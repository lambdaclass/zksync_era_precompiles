import montgomery as monty
import fp6

# Algorithm 18 from https://eprint.iacr.org/2010/354.pdf
def add(a_000, a_001, a_010, a_011, a_020, a_021, a_100, a_101, a_110, a_111, a_120, a_121, b_000, b_001, b_010, b_011, b_020, b_021, b_100, b_101, b_110, b_111, b_120, b_121):
    c0 = fp6.add(a_000, a_001, a_010, a_011, a_020, a_021, b_000, b_001, b_010, b_011, b_020, b_021)
    c1 = fp6.add(a_100, a_101, a_110, a_111, a_120, a_121, b_100, b_101, b_110, b_111, b_120, b_121)
    return c0, c1

# Algorithm 19 from https://eprint.iacr.org/2010/354.pdf
def sub(a_000, a_001, a_010, a_011, a_020, a_021, a_100, a_101, a_110, a_111, a_120, a_121, b_000, b_001, b_010, b_011, b_020, b_021, b_100, b_101, b_110, b_111, b_120, b_121):
    c0 = fp6.sub(a_000, a_001, a_010, a_011, a_020, a_021, b_000, b_001, b_010, b_011, b_020, b_021)
    c1 = fp6.sub(a_100, a_101, a_110, a_111, a_120, a_121, b_100, b_101, b_110, b_111, b_120, b_121)
    return c0, c1

# Algorithm 20 from https://eprint.iacr.org/2010/354.pdf
def mul(a_000, a_001, a_010, a_011, a_020, a_021, a_100, a_101, a_110, a_111, a_120, a_121, b_000, b_001, b_010, b_011, b_020, b_021, b_100, b_101, b_110, b_111, b_120, b_121):
    t0 = fp6.mul(a_000, a_001, a_010, a_011, a_020, a_021, b_000, b_001, b_010, b_011, b_020, b_021)
    t1 = fp6.mul(a_100, a_101, a_110, a_111, a_120, a_121, b_100, b_101, b_110, b_111, b_120, b_121)
    t1 = fp6.mul_by_gamma(t1[0][0],t1[0][1],t1[1][0],t1[1][1],t1[2][0],t1[2][1])
    c0 = fp6.mul(t0[0][0],t0[0][1],t0[1][0],t0[1][1],t0[2][0],t0[2][1],t1[0][0],t1[0][1],t1[1][0],t1[1][1],t1[2][0],t1[2][1])
    t3 = fp6.add(a_000, a_001, a_010, a_011, a_020, a_021, a_100, a_101, a_110, a_111, a_120, a_121)
    t4 = fp6.add(b_000, b_001, b_010, b_011, b_020, b_021, b_100, b_101, b_110, b_111, b_120, b_121)
    t5 = fp6.mul(t3[0][0],t3[0][1],t3[1][0],t3[1][1],t3[2][0],t3[2][1],t4[0][0],t4[0][1],t4[1][0],t4[1][1],t4[2][0],t4[2][1])
    t6 = fp6.sub(t0[0][0],t0[0][1],t0[1][0],t0[1][1],t0[2][0],t0[2][1],t1[0][0],t1[0][1],t1[1][0],t1[1][1],t1[2][0],t1[2][1])
    c1 = fp6.sub(t5[0][0],t5[0][1],t5[1][0],t5[1][1],t5[2][0],t5[2][1],t6[0][0],t6[0][1],t6[1][0],t6[1][1],t6[2][0],t6[2][1])
    return c0, c1

# Algorithm 22 from https://eprint.iacr.org/2010/354.pdf
def square(a_000, a_001, a_010, a_011, a_020, a_021, a_100, a_101, a_110, a_111, a_120, a_121):
    t1 = fp6.sub(a_000, a_001, a_010, a_011, a_020, a_021, a_100, a_101, a_110, a_111, a_120, a_121)
    t2 = fp6.mul_by_gamma(a_100, a_101, a_110, a_111, a_120, a_121)
    t3 = fp6.sub(a_000, a_001, a_010, a_011, a_020, a_021,t2[0][0],t2[0][1],t2[1][0],t2[1][1],t2[2][0],t2[2][1])
    t4 = fp6.mul(a_000, a_001, a_010, a_011, a_020, a_021, a_100, a_101, a_110, a_111, a_120, a_121)
    t5 = fp6.mul(t1[0][0],t1[0][1],t1[1][0],t1[1][1],t1[2][0],t1[2][1],t3[0][0],t3[0][1],t3[1][0],t3[1][1],t3[2][0],t3[2][1])
    t6 = fp6.sum(t4[0][0],t4[0][1],t4[1][0],t4[1][1],t4[2][0],t4[2][1],t5[0][0],t5[0][1],t5[1][0],t5[1][1],t5[2][0],t5[2][1])
    c1 = fp6.sum(t4[0][0],t4[0][1],t4[1][0],t4[1][1],t4[2][0],t4[2][1],t4[0][0],t4[0][1],t4[1][0],t4[1][1],t4[2][0],t4[2][1])
    t8 = fp6.mul_by_gamma(t4[0][0],t4[0][1],t4[1][0],t4[1][1],t4[2][0],t4[2][1])
    c0 = fp5.sum(t6[0][0],t6[0][1],t6[1][0],t6[1][1],t6[2][0],t6[2][1],t8[0][0],t8[0][1],t8[1][0],t8[1][1],t8[2][0],t8[2][1])
    return c0, c1

# Algorithm 23 from https://eprint.iacr.org/2010/354.pdf
def inv(a_000, a_001, a_010, a_011, a_020, a_021, a_100, a_101, a_110, a_111, a_120, a_121):
    t0 = fp6.square(a_000, a_001, a_010, a_011, a_020, a_021)
    t1 = fp6.square(a_100, a_101, a_110, a_111, a_120, a_121)
    t2 = fp6.mul_by_gamma(t1[0][0],t1[0][1],t1[1][0],t1[1][1],t1[2][0],t1[2][1])
    t0 = fp6.sub(t0[0][0],t0[0][1],t0[1][0],t0[1][1],t0[2][0],t0[2][1], t2[0][0],t2[0][1],t2[1][0],t2[1][1],t2[2][0],t2[2][1])
    t1 = fp6.inv(t0[0][0],t0[0][1],t0[1][0],t0[1][1],t0[2][0],t0[2][1])
    c0 = fp6.mul(a_000, a_001, a_010, a_011, a_020, a_021,t1[0][0],t1[0][1],t1[1][0],t1[1][1],t1[2][0],t1[2][1])
    c1 = fp6.sub(*fp6.ZERO,a_100, a_101, a_110, a_111, a_120, a_121)
    c1 = fp6.mul(c1[0][0],c1[0][1],c1[1][0],c1[1][1],c1[2][0],c1[2][1],c1[0][0],c1[0][1],c1[1][0],c1[1][1],c1[2][0],c1[2][1])
    return c0, c1

def main():

    # fp12_zero = [monty.ZERO for _ in range(12)]
    # fp12_one = [monty.ONE for _ in range(12)]

    # assert(sum(*fp12_zero, *fp12_one) == fp12_one)
    pass

if __name__ == '__main__':
    main()