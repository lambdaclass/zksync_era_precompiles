/*
    These tests were generated using Daimo's test vectors, you can find the original files here:
    https://github.com/daimo-eth/p256-verifier/blob/master/test-vectors/vectors_wycheproof.jsonl
    https://github.com/daimo-eth/p256-verifier/blob/master/test-vectors/vectors_random_valid.jsonl
*/

use zksync_web3_rs::types::{Address, Bytes, H160};

mod test_utils;
use test_utils::{era_call, parse_call_result};

pub const P256VERIFTY_PRECOMPILE_ADDRESS: Address = H160([
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x19,
]);

const RESPONSE_VALID: [u8; 32] = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
];

const RESPONSE_INVALID: [u8; 32] = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];

#[tokio::test]
async fn p256verify_generation_0() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3fec5769b5cf4e310a7d150508e82fb8e3eda1c2c94c61492d3bd8aea99e06c9e22466e928fdccef0de49e3503d2657d00494a00e764fd437bdafa05f5922b1fbbb77c6817ccf50748419477e843d5bac67e6a70e97dde5a57e0c983b777e1ad31a80482dadf89de6302b1988c82c29544c9c07bb910596158f6062517eb089a2f54c9a0f348752950094d3228d3b940258c75fe2a413cb70baa21dc2e352fc5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_1() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e775723953ead4a90411a02908fd1a629db584bc600664c609061f221ef6bf7c440066c8626b49daaa7bf2bcc0b74be4f7a1e3dcf0e869f1542fe821498cbf2de73ad398194129f635de4424a07ca715838aefe8fe69d1a391cfa70470795a80dd056866e6e1125aff94413921880c437c9e2570a28ced7267c8beef7e9b2d8d1547d76dfcf4bee592f5fefe10ddfb6aeb0991c5b9dbbee6ec80d11b17c0eb1a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_2() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b5a77e7a90aa14e0bf5f337f06f597148676424fae26e175c6e5621c34351955289f319789da424845c9eac935245fcddd805950e2f02506d09be7e411199556d262144475b1fa46ad85250728c600c53dfd10f8b3f4adf140e27241aec3c2da3a81046703fccf468b48b145f939efdbb96c3786db712b3113bb2488ef286cdcef8afe82d200a5bb36b5462166e8ce77f2d831a52ef2135b2af188110beaefb1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_3() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("858b991cfd78f16537fe6d1f4afd10273384db08bdfc843562a22b0626766686f6aec8247599f40bfe01bec0e0ecf17b4319559022d4d9bf007fe929943004eb4866760dedf31b7c691f5ce665f8aae0bda895c23595c834fecc2390a5bcc203b04afcacbb4280713287a2d0c37e23f7513fab898f2c1fefa00ec09a924c335d9b629f1d4fb71901c3e59611afbfea354d101324e894c788d1c01f00b3c251b2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_4() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("00a0505b3dc26c564d45a658c8e910f41072f3825648b33a851201271e48febc4af4cf0be1481b0860396c2f1d7c3e38ba12a5f660b4303908c9d5f382a45194fff9c856157b4bc6c2aa1d833e1133d818a4c87d50749ac47f86f774b2e15d2befe694bcbb072e15a4b3071531c1f38cfd176cafdad47abb87a40bc2ce7b35a133475556b58841a5fbf33671730502505c678b532e3e4c6b35b0bc5cd809d811").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_5() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("588cafa2097443366bf4b4a0f108207dfc6d47501376beb7d11f893d2eaff51e224d5751da5f83847a288a5f93211405b568048a094ae00c194f447457069b2fb5df7b778f63cd5e5fcf1a0e5734a9d05bf16256a92c6126408f802e14529720e7cec816b13b7273e70df87a670d95bc00e2a489fc7195ec2964d6135ce3d6b28a69d61aa8badbc2a4169188de5ad2620d2ae2746cb0121068069f9c1745099d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_6() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6735d89d7ad05efea65ca404a92c3cd3dd826685834278e5c292344428681f29935c0a842cefc37058d883975c0581ca2156e761b909497f36ccbf6da12b97a19179dc5e3b693af6e175f08f86ed0d3e00877f5a9af55bea4efe83c0cd49b8818b7fe745df184a88b502ef2eb628f75cb1e7e053851c3420d3db5dd281408ec12475a026ac5f4afffa42e5aaec981c2fa4b846ec2a18e42c346d73db91eb15f2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_7() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e288707aa5fb4f840b20abd4b0ee7c4d4888f4a70e8e05ef858d8c8707f04a022ccc1c0b1881dc337d714ced3b6d3bce1185c1029b9ab7628da52f6ef4c5e4d6aad777d702afd40f5ce41ca089401a5444569c62d6bdfd195e7cfa9adfef89202a68b66ffc0bc0556264c43cc3245496f95e4ad7425a0e04332823fd492de636b4c359fcc3472a66c9f716bd3f303eb5a9e66bb16ca1bf1e65f8fbd08393b6f1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_8() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("698cfa0ce20fecd4822d3c022af9f911eca59125a4330ee4a62690c7af335d21e0a8293baf758030fc28e1f0e42af991119caf4744b3591c9ed10df076a6a7b99ee36981b9ef7fc30e08e4752b5f8e1b7e3edf29ff7fc76814f05c3af3d824f4fcee89d28fd7588b4c6b3b7de462bcdb0c560ef2c792018d6703f0c133fd4b0b6004045cf972883fc7cf1e51fa9a26c4c3178dfaf9895a1958c5d44e90b59c2b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_9() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4efc46879e9d41455314538a0f81f207aa98aab1dd280e0eede74d18014fb27758922fea43416e510a476e5935c0665f26a1ba166c857940db861e3932abd9b565b1674444715441a3afe8d853016eb1f250e4a228046009135f9a2101c48a59578423243bac7e510aaacc0df9647edd101ef6439d1c540ffbd98ec82331d2b8a2206ca095f4658b5a1fbe4b91ebc4be3dec729131d215bded4deefe5dc60a13").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_10() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("57b193a582de0db54b9fba31e9b264e1d96859f5ba2712bea41b115d9912c9b9d3270712f7ac431fdf66841f003a20564ec5413a039dd2557166f9e66431d9f7c9e2ed561cd182c016a163881f8335dacef8052b0f574b0fe211f8baa0608a7cdd1d3735e37a303355fa14c8eb702a85238dc4efe9e8a777652a8b338d712832788167b4451062aebddc1bd6907cf34779a84d753500e77b3e011b47e1054be3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_11() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("829c47d570c75a2f707c82e2324795808008d0aa69602a2d702e963d11469ae42bbd620519ab3e38e7ab3642a501c1432d604ae54442f9f4b3fd665677056289e0e9df419cc2084b2e0f01dbb2d8fd4185fdfb119d24d57d00a267eff4dc0be40d1e0e13b3c7882b68ea89de5a4dd8eb238209d38d70e98b6ebe98c33fa01c31092cdba9463387b0873477ce6046b93522facf472cbb64dde95dbda8f169b7a9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_12() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fa300b90f1fd0f7a08a81a86b4d8535da653dc3976598f4d389ce9146eeb129c4470e3c18ff73db8092afa8c974a400d8d7080f2cb83cc783e419998855004f753ff51764864b92289206832462a06558c784bde8d168143172f1e209540bd09eb42e3c84e5d666e3e73b0b5f5df1915de1842c146644f5ed2e6eabffa70976c14f8c794d022e5b99cd259de5c7751fec148a63e8e0164ca470ef1bd73b3102b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_13() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("04e0867f5b0772801a735f5e3bbc31f6c4236d0ee6b82454dfb13c6756dbb115ae1ffac2ab6014a57c3f9865c84bb2fbba30da092ca54bf61d31937fddeab2223d40b1691c97330f4b33416ecbda48ba3171a01d0bb2b24530cb25830b1cec766827d947211ff65533ee8714948340b6026906356e0ea7708e4826259654c0386be85c083d3f0b9c89bf22cfe28f60b3e98d25acd8cadfb0d729ca68793c1ba4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_14() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a899369fdea5f7bea640195c7feee84ea70f645bbbca1e71c621fe92b80f857498096be66742dfcba929c0851968461ef18414fb2cb0877e45fed518e5aab6864d1d7e4971f6cca4a3e3aa3ce55d5ac0a894ce8a33bf54692c2df9e04a98417f249466c66afaf57d2f57615e0d11376e885082a102a284fa87e74cd76f55fa6d7ae86dd9f3788502bdf0d521f7a29991d45a369fec447a7258a778d15a1428e0").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_15() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f7de7f097e5a4b0699332a280be399edf42beee323b1b8110997604c66bf23c6f4a45b88ee37e2cce3403ef02b6c51df33dd4c16bbc656eabf210856b62295f302391ea849c45959282ac1b233760ca3af5fa05b4efd8fa452e289cb0666377360856ff7ff02e58f9bbf92c4881216ef29a48e6d524be1c0992fbfa1429ae7364526ba333c72d54af4275cbb25b3951b6d894338971a8fb6bd0264ffbca713f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_16() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a33326827880764f2249194591415ff54f0cd09d22619890de607a92a305847604fc5d5013e3b9c34bdff18eb45bf2af7698c2f590a023637b1f5c5500755ecb5f57389c2de67c03db4091009a0e602b2349d6a7f373c181d179c3ab4f418cdc7a06417184f1c94ecf6d097206c07b2d81ed5d46af88cf1ef8950bdc958fcab3336d2a03548ac70afcb72e1985536d213f8a07f513bd6c205d72de126e88d766").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_17() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("068d6ce266cfd4bad631973e332b49bf86b78a77983a937bd2d9ecdc3599170fdadeb74f094268568dfa3b9afe92426d40bd5ed4fb9a4646f005c8f877ce921ec260c6373c0972f479b1048d2a5c0c713c4b6193e8f7ee87796461f8b74f103b20fd87b1d7dc35a3bf0cd0b0904b67f860b612af8c053a3d4d95d5395906939153f12af2a28d68931f39c25f95f2e357fac2ea486e757759e7c88900d9256c69").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_18() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("148bcb353b61329eeae88a538360cb944a8de26d1244e03337383373c514e05033893772b9251b4af729dae09f5541a0db9fbc6c7ccc2f4cd20b2a2754304bbdc6c8199590759878cbc9bd30186a9c7e1d6242d6e234ab4d66181d7c107511ef82e073509da0e0c2850f6c9163e829b093ed7388b4510a0ca6d2f626e0e28e50301cec3e44f0ae37c57aaddc369a7af03f2366b8ecf60791417f743a2fc73125").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_19() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c8e388a5c9cacb10d51a9e62bc7cc5f4267ed78c0d0d1945f1415131d08900bacc7eb3e4ae50aa7da03256c63d8a220f0f5ec21e8f368dd1b05d2eb1ccb885f099937d32df527bb9c67315f2a2ae8486c75e565020954084bbc8421310c2704e84c7a8dc3fcb5ca8e5cbfd535669195d2a43c3a6c655b46076b0d6dad4395a89a37c41684a3a09d3bf9e89f321094c8fad2b5a9a8c4c95e7b735f4634ed524ab").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_20() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("769a76c12fc6c17943461400c178304e9698ef840a9065ff4b3fa71aa57128c2713bea0e870a89cd407626d43c2c076feea2ee7776a3e1b6b58a193e70a8f2ebd86e6dc4b0a7972a7d34ef3f1bd78b13f3f852f35a586b5efa18dbb6772bccab370aa0bd821bf9a92a92ccb31e8e60520e2597d035376cff2d2b28c9c4206f7a838d05b888d70de2b1839612bc0282676576673cc3bc849d1f713e4be4cefee4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_21() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("11c681e1e56d15635b619c5d8fc4420592026e03c15cff9add9d364c41f00478bd9f2733ce3e8277e5c0856308d305cff09353a7ede9eb806370a3ca4ba7c9db6e233499d7e4604cca47bfcd2c7a46a4d95e086e369f947b29843fe28d0d2731a509e079a13d8212dc49c6314eb1a648ab906dc67bfeac7ab648356d15f2f3712e9f704297d08fc48f2eb996890e5fae999d9a0276da3c6c773fab058085d227").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_22() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("600ff6abc4e16e81b82f7d740707097b09b12e20e25453fbf13eb6ba6ad978b79fcbf4cdecbf8d50ac652f55eb07b56c0f13c2e9c81fa6fbe6333f6c67ae0b0a574defa063bba35069471d15ab2d6d69f6ede4941e5f5d60707c80ecb8c27a9bcb1874f3da7944f5ccfc1d19423c475e4c0f0567d6bcb1a0516e3567bd6137e93427ec42f936c5ad4bc57f09035efff65789fce52b87c235176184931faa2ad5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_23() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("309fd352661fd188fdfad4f72d04352a8622f94a5a8cd8f4d52b9ecdda89ba5e7a59061bfc3b21cc0d9f9b4c6291b56baf4d48703c4847f6e50a22dc2aef94486424a036d56bd5cd4cc413c077fd905119a5abdd0b8277f75708f800a7da18e22fe27d6e8d7220381d063dfcf1f21e030f6c4ca2a6efacf7461332791676f40335fbbabbaf58a0d4d56d591cb89bf5c4c690be8051b87a1fab538aeb02b356df").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_24() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("312767984731fd7fd201995b77e462265fb3f9eef651e7d1817630f7d001fddd575475576dcec7d9813b2f8e51c03aca667045fe6fc285f5ece22cd2d64bf8958c312837744eff9c2f29455739e541bef4634f3e938f120f1c48bfb4db1d8a47082e57b5877a9e00b1a7f338f29d15152b6481f1926d355f871b7a7de4ab582e9413cea4afd6d9723e4e695d668c27331ae5df57080b80f20e758d756fc0c946").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_25() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d84a62cdb0d6d9800bec02021e3b72e6ce94d12f4ddb19ca325387f3956072782781e72b155286484aa20a5c821cd49694389613a87edfb2f4b59ea8a9487d752ee8a78b8472fbf14633499bef07fe2d2c637ede38eb3909b833517784f412d1fa93a7ebef707f2a2fac96ce05a496abd6bd2013d941c86de6785b460b90b015f895db9dff4f1f759cae8763082c78e28a351e1b75e80ccb8e3891f18ac06ef3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_26() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9429d36bf3e72f0a026dff9acb5370f925fe9f3551fd22c1e6296919d0ab72cc34c4dcefc50eb6f876e454337c2326e7cb525f6daef935b1ddb2ebd06a7d628da7936c2c4503a252ed1fc36f64ace78e51be1b83626455d8fbcd09633d45495084001b8c8f9bb2afeef715875fd215301f872005dcbea97822d0ae032941089dadc8445bf68e788e431eacf537e7dbc1fb0b3f56836969edc87e535c6bac31c1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_27() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("91db8d20931589449f284ddd7bfffc3739026908874a7cdc1eb6eaabc670d541b6c4889d1d5882bfdda17859083f324accded09a7f7480b49a18e02a4f31164b3899ba3e087c45adafc76f668af5cd542562ebb4a891f7ebef0d324297541028cab48769e870c218880d4ec39ae8bd130a85798689baf70ad287197aa328174dc2cf46cbba25ccc5c671e78f3eca08a116dd48b4448575295b5af274a20bd4aa").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_28() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("256adbd8866849c3b59c51be499c1706642117214e6611f0b922d1eb855ddcdbdf6167d03e6cd8554b4d102fcc7be6f5eb9b619a820991fa917b1d64d4ad52be595e54d942ed1a895ef2b4565636eff42f4aab94300eab1c0e8489bbf87deaeb00234e67f2419fdc8fa4f79cc876fee0d2c8661039f187339a30764923e3d3c66b78835c3d491ae71dc107d7083d48cc02016006549b2515cdc5f7630a3e4449").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_29() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f0d78e331abc3e44717204eca04690bf2440214faa75abe589ec8937b5d1045d83aa46f78a05d4e058f9b79dd68086c7db6aaa5fbffa9834ee7afbb290ffe471bfe15c0afaeb29ea1d1ee0539fe1d2c2d648a47ff89d24a6e9e429e9be1c611386fbf48f28bb98d8ef3ca838511774fbc5cfc5d91e079fe53fcb405666101c14f2b794955c3a83fca2d55627c783a5813369fa03f67d1390a30e53a2b5f80e82").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_30() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e8817609eacf904b4a09ae578605a3914eadcbd09aebee8bdbcd9494ab0721c5fcc1ee8cb447a88b9c0aad4d60320a4b31f539940f0ffd1baf225ae6b4e208242c338aad7aea40cc96df08d1e840576a16b434346660cf95e6c7a1e1627399b0e951ee8d69960f632ff80aaca0dd8403434dbe12995ae7537bd8c5edad9878b88fc59b583d1029fdbb2ea6f41c443917ecdb329d1b27415b83eb8a256e42840e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_31() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a2bb4d078e12aadbcc85b022b06eb16b4e77f63ca0108850fe8bbf1d40a991a78110e73f75d5990477e6b625df164be2055482ddbfb498066e84ea6e2bdb1c3cd9d6716b3ae287fef45e98ee9ebf1be8c2065de86479515968779c93b9b1654edd651cb3abc3a2af5d62d2624bd62302c79291d322c27035ae8726cb5a8d56cec5f4fcd5288ee039ec8752240693984a5acfa941b4c143c600ac3f1423510497").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_32() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1ce1c99c9e24d3aeeda918ae0ec43e83840fa699fba2dd98d9d4124dd9616bc6ed31ddc13bc71e5f8e0e815443dd6040c539e9b9dcf458b73faf80d99368d32a23fee2245748be549368ddb6595d4bb13879371f98e4c1443ba41d93680d2f2fa447b964f606000c04becef2af847720ded80c11050621f3fdc31b2fb9c2c314c3596e3078556fa5b4c4c81a2912fc958e6b532117c434e5f8121bdd2fec815f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_33() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0912a22b615fd0a214ecf010cee28d36381f7af89099414a9dbba6133e4580f69e319d2f45c67dfa0265814f6dbdda7a9848003abe828da45f5652d70a0ff39e924b2ac65229e49dd2ecca01cfecdbd0943e93d60b22411ffb53f43a30c1b988c7c928cb2f304f4e8cee844ddb0808176438f8b734872074dbc495844819096358817c0e38be8dd9e203036fcb1a9dd0466720ef0c86b001dd553e00b6f04168").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_34() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9fa2927c7fab03596d72016efbf18e2a004feac7a2eb34e3902d8142a9cbdaaa7f1b45e48fba092dc5962bedb4c37ddb65e4ae0c0fb1188327035a729feb2167d76c319968ce83fcf8a2c26b2f87f908cd20413c643732096116563b1669b824b8f202f3cb96b6e51c0bf1cb8ac291db429122d6ccaf7f1a87f5b64cb079e9c126b2b8742aeb95aae01b80ff6e4245f9e4c20f572bdb362a9c6fc86ca92afa1f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_35() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("99b1db75568460b9c7f7904e0f774f94785fc19881702604571164eeb59cc31896fab178019dd7788c9b46019e8f4dc6d8035093ab64a91916a6a566829c3335b0572eedafbfe677f9d768c9aeb264afc28c8c21832af8b3ea1f757cb70ea29fbfd1c5902ff106a83340b7f67b56bc2b89f209c5f9197218b1f66a289a6a91fe070e92e113bb68ecd6b77c16faf03eaa479add1d186dcc1e0b033d5d48548fc6").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_36() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1bed5f1b44d64aab8e6b136b3d71d766567c8018a5781197211773200544ea8d64d86f34992a97bebf13d7107d4808b0ead496ad44366e3ace02f6c5d43ff52f49e69cea8a938a16f1a56887df1191586533cd228eea7786846230784d0ff0650c239118891627763a2bb01d646b8896995eb2f0261e3835eea6b04eaf7ca3bfece3c376cdc64acd941c41fd56b0c591c64ee8c40815482f39237331e42ebccf").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_37() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("25c6a41f375b36053d42d4cc1c4d36ac0428a440657c05284f15c2cb3f68afb228fb023021434845910520c29d1e5e1d8e6c5c13a6b904b52e8717015e911821cecbfe42c472a7fbe1f2b98a7e978651802fa3f23c6c280b5d82626f0210abf94a27384bdd90e842dcab02d5940aeb3d9770098f74815b75e2545149dded53bb225b68ca0416a0a71c0a3b5b6d895bd9bc6e4c47270a7f3f52f5f071ef59c28d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_38() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a40988ac16d636cb6831a0543a116bbc05c81450058da46cd202020f7b68b952c2f7d0a38afd9ed383d55017d58a7eb5454a514333da9847bcc7434b0bbbc2ad32e9c88a6f1591c2344b875733d26c167aee7ab9cabfcd5ded22807abc610e3eccd81cd69575b850384311f75e1c48922ee73ebec5b8339b839cf6cd42218193a1bc2c159d3f47c25d432d53589f95d8cb9b59192f1a1f131ff617ec84d962d8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_39() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("76d82e55ae31e7ee98685fd78a432f7c353ae9ae21bd656710e2be6f07023f1576c77d398feaf187970b0b91f3627e8ccbe226285a53e3479ca39aba6710636bf73aac3aabd8d905cee71d34d5e90accc45e37d729e2753f27d4e5a54ecaf9bc3c64a7c3a69a57e68dda4fa50f1b5986f43ac4e7a35be228fb6b70ed2c26c79c10d0eeb1cd4a1b075f3ffed544ff8e4c43a0624792918d28d391d923916dd8e8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_40() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("26a4b677b5b5e730cc9962a4fcd73800356a13a12f4227ba5f6df146e8145d47443608e1b22a0b9c2b5bb065143e5b3e82110e32512ac3216bd4e73f0c6ac9123a9882a8a6b70f16e17408a6ac23235bd1e2d8514c74604bf9333b6761fe335162e36acc2028920431befdcd37e70fbefb0a3c7547f56461371de5f6ad498258a5a6d61361d0658dd70ae50ff51516441dfd7515433b6a269d8c28bda038c32a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_41() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7c17ba8ff9e44b2b11af00747d3e57180b6115ed18ff7d866469961ad7fa0a1432dbedbe9e2c2ee14d17a2e6ad4954a3a3e0647ca9ebb4afa3118a433e478f1ccaf53a2dd3a8ce69b207970ee0e921c3ac73079a863c6b1c6e5a03a67197675c7616294c84893f7c42f970d9ab51a88bd5180d179339ab401e92a8e17844617a8b29e1476a0cc6d528e51e5b55dba260354a56961f0aba29730d1e87c8bb946d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_42() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ac219365533c38d5c3eb8a8399780b16fa83a9ae85f715e95c2f28bcc81e9d056d0348801eb0a51d361a47b28b54f162a75aca48052fb0910b285e7dc629dc21afcf258db13b02ca76831d1282e028549f166869f5a42a29c58f3c9421ae2099838b504a519a798e1777fa477215af3c32165d8be01dfaa5d92b8a070f967d643983368a4851d1bd7d10cdd315d3d3e6c24c540cbb810fc4d9839cd2cce644f8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_43() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9eea374da0e50a2aae6de80332e0773c4b5a0c2cc4047b3a6e56b181e5d4f0964726fcaa17dfdd08a3f4ceb0dab452c264f854e0ed720bf4cedc46a902b2a52b2a1e57a15e323444506d1f0e9379691b75af33ebd9fe0a3d0e2d8d6a5b8199e4b3cd264ad60b03a1f7a95c7eba50117e339dd4c088a658d4c45a0ebe0917779d43ac4bf7a779a65d11e02090303f62fd115ccb2b2a3432b14ee3c62401d4dfc2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_44() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("eb87eff5ffb4e19f64ed43e593006b3abde54443618e11ad0a103931ab90e000284b3ac4ee9263d45bff0568526063a590a593ae1a6855fbfb41fcd3ac6b663a9693017c471da79d8a323320d8116374bde3ef3280a2b4a087bf314a0ff8be64e45f739ad1671a65b46c4d1406cb5a5cd309c2184685dae07766190ece9c65c12be297f4fb4090b971e5774e40b16829cf4325cbbdc22d5cac3b55beca5df3a8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_45() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8b587ecc0e72050a2b7d88f2376c2feddfab04859949731768863135d9075cde6aa77c6ac35bb04bec85655ea97cdd2b048170409180784f4dad50b26b516a8257678b6484259c6be907715304a05eedb59dc5b462d89f7cd31f8637affbfe392049857c870c1e3a01529ad42907e4188e0310dc9f75fc8a3e97940730057bd01f2e249560791e5d33739516469aa70b577f67936ba4bb1b4d37e8afc2d98e17").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_46() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e117086688c663f7c2b51982d80053a30cc8fd21fc5a67407d9f1bed51076b59dc59d7bb8d6c41afa20371f78fd3aff69d098a0585963ad2cd2e31c8ec039900d64a6b4ce7c7f233a205c0678556b547d89ba34848ab4a354d31cff1242b7cfe965366b80ea0a2f8a8515fea0648d6c0194a06faf08802db9f0574134c43aace74e9b0ee4f8352d042c23154ccf85a100da4b6eda7584a98bb06f7e0553092a2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_47() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f89a510dc20a8a3f5d47673a7b15f2ca7981cde9e390ee00bd02f168946a61a9878bfbe703d9d65d690f988b47e9e3d3aa202bded4062883646ae81f21fd330384c4b61404d8d89939159b9b8adb419ab0c8e1f32456203ea5c28cfe3ddf51e068e13e423f4b2685a22eaa06a7f6607a6a138e7b106d900fe6f4338e3800eaf76cd09664bd58dc33966d34805841afdd16bdf83a746ce0ac0146cf28ff79bbf1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_48() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bbe656694bdbd72a99a5e69c25287f5c94e1cdb00f5a32e52b9759087944b7c5fc16aaaa8033957ef7b931957b8c4b440ef6fcf3f751bc55755802498defcaa1bc612e75273d09774dd1ec6ebe4b0e1f1b416f0a6bd058decf56c454e036a05019aa8d2d6e7e9f7e34b3d2738a66084e5fd0a35e79fb4be05195ade592abfd574ba55f4f2f37e49162d0f8855df73f44a4a2d3e72bed4a5543b7ecef25cfca44").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_49() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("626a3061bb003e0bc27738319c16af97b954e0290cb96871878a86f2591715d38a2cb3d6dc4c1cb6e1c7660360b38b3081f347798af088270049a63c68ffb0e5b46f16adbe2d44f133929e8dfab8f4c7cc76b721d09b86df94a0dbe87f827131720c45aeed1bdedd87bf74315d715ce7dc49742ea1489667d7e8bde092b9e9234c40742f61914488b24dd28cd27c853bc0af58bdcf5f52092310bb639e676fdb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_50() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6be10bccb69c481d5cbcc7f2570d61177f0c0968d09cda59691a88088d76131c28cb364fd99b42a396cbc6adfd29903e52fc513a2fab9091bdef0168638b283413f9a97949553d70740052c292637dbf99798773eb3828b2a99f873b40ff247f881dd9181c172d029e81c5e05da8b47f4b9ac9e5ddaa449f48c8b582aad914d36c2c8fe696f47d18e2e555eb2d1b2c7e266be9226be438ba5adb0cc899c8dd43").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_51() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("106cf4982dd001e5559a9a25cc810d12dde1cbb9f538cacbfd9c9326389ea52ea8d77b399c8cd25f3c69b94ad66d95d2ad2d514a49cadc801669bdc94e72df88e13d49d8b8f31f8b478f4279b75587c6a9d9bc0a2f978d15aad72db615448355efc1431aadb5289b4a344d91edfcac6844e8b646da5fcc520c7c26f9b577d7f9589a713f5af16a7a8ec292129f4b05a06836d03f03c9ffba3bc3aa7039edaf7e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_52() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("61df7003ca50baaf4a555586da398c8c974a77128f71b7fd7df5ee9f1f0c14ebd771761e10142e732e8b810c56756da23899075a6c4adc446ff7f4b3cbf5990f04acb16990f7828ad4a6ef31579f13f66f2cac3f488dd5b0ce5f1ae6594d8bf3c40f7acbb446b0d1b2961ddc1617adaede4c1fccbe29042aede278e6109aca38d69564bae90f0c25980d50e6e30d3af9be466ac693c07ddc785dce2c1de834cb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_53() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("dadb8b9514c6d357b420d36a625aba5f4b19ef083d04bb4a3d85044aac46e0f244b6e8c151889c1201236c8d87adc561bd7e9d212a29b1ddc1f746db6b02b594d022c08660713e453de7f851ced01594ab71033ba854c3bbba11a232532dc5e6bff590f79ebbde7185499093a13a76dc78fbf6a59f02d0e9b8a50a8bdb65788a11712f0431b2a06a2126696a3e4dc9f2a5ad92fb0489bd8785fef4ac963965ec").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_54() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("745baba5029e645f2e9c30c16fd77f4d0918ed930d7e05f043a5b6fc600fc0e34aac427a04ea45b179610b93310cc481d1d205df5ebbc57f536e9ad96e058ecd3bf5fa3e12ae75c15bf5707b75f538c3989f5d36f37322441c6ec0522222ff6ff24d45e06836bfb777c1ffb59bc30825bca5ee798de16665e0259574ff20cdecdb68f901910288213bfec8aaa301f877e675bb8ebefff19d8bb9193fadb1082f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_55() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9969d04fb09d4ee8f35412e7c64349780f7d6bb476c1c239de62045b72e2039d20001535947b4a58d78b7d852127483ff83a2f086181ba7cb61abd233acabbdf39d40e41eddd5847a7a4c6b1c8b43b91c18936b6907e6611b00e8b474959b4265a5a7cb46e1f0d2d828841a9e08c90478cfba0ca91bd2fb10acd5e1cd683da73de343e0bedcdb1d4556d55d9274caa79160fb31a81ba39582f7c57ffbcdeb22a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_56() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f85be3cede315bd9d9d4416e3109d9a58198a8d81aa3918250cf8f49df3edd4e3ff73a01593613d2799641705262651d4125d6ebd03caf2bd61ecf606d393943ba1f194c38440248a7441049007b4af06919bee5afef1a96c680be79fb695b45f58543022645534165222677d970e5d527f68e1071449b2784f9383fee636c86eccb6ba84dc09ce3583b6f752a7f16a91e62856e2b58c0f629a60312ab386d0e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_57() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("44c9d6b05cec706520f561648946c6821229d1987bd494fffa1da0571897e97ca727fed0299fa1ea7108806d4965963d1096e164221efef6eaec949e858cb5bc06f7a5dd70930cd1ed7262441c5b1e61d3a73a45891d344cc3d3355e0f45e0d589f035f7367495edc35fe1c4eeba16288f2d7fcebef6a031d3823be1332565162f6d29f61ef793e5bd40fb6da72dfb3a92c08007bdc3d37d774833f08ed11a9a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_58() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("42680eaac3eb0406f92eee6d81f798c3a9166e5a894320b4a7c7a0c317f4cf7c152d95fa3e7336923734d85e85b70aa3eaf616705cde68a273ef70b9731b0484f6e7949d251255bad7d9359d6c896b75e4bc935d7e66a69f9ae2d4c8ba55b9bc22f22c488c72d321873c888a0a647d4c0ae1c280e27e3d1322139a35384a915c463279ed72f5d748b6216ce65753121896dfb2252d87b50cc98322bf636daf67").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_59() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("15ba4fd6d548536686bdb153c7dda051d308c0cc24a3a7c80fb1ecfa8e2e2c940a1f2504170b9a51277dab675694f82611a1fcc0d6b4152912d26343baf771617c0de7206c76724293fadefc3683c738472b862153c2b6eec995108241026b830f5883b1b896deb766bffc5a7d5f21f2636721cc9a0a66191e40dbbdf5f40fe4f545ba16a061898a8ae57c29727afe4ac398043aa9b5320cd5c01a54ce9b2f6c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_60() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bd04972b22f8ac687c6e9a1e88614b2800c0d3cddfd81d3a73b1670cb2f6ab13db09d6b9e41bd9f3840b1fad0f1d9b2dc7f2554572f733240e4d51585932b3350a5785c2d11905721d52138e72ec6038a48b12c49ade93e21e8f5ef7eef3840af021bca592bae33c3320f74e02f29e6ece7b9b05f8b80d4aa97ff716bbeb557b7854ef6ed48856e17fb45418beb519ebd98666ecc948d6a6119e8b5ddec2b4fc").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_61() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ce85965efe372817ef281b4e2376ed9b88359352c4772c562f2b0857b70779c6b2cc157b90c925ba799897a066fb12647dccb102ea90ca4e3893285876feaf9217c3d414820f500f3fafcf29fe9165ee4818feabe7802ecb9ba711cc6a7076ed19699f29d9a60acde6a30ddc266c704df5e0e79a0ec829ddb4a148680435acba801235ea08f2c75de8ed6bc30b84c9ac2c1612b0385e300e1d6cf7d9d3df2bbb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_62() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b7e7df82dd9e581828d3d9d8dbd552479a53806ee7e186465eb995b6ff55844d2d138f3df987c7fef8e55fdc5e22527db48c710c5e73b3f905e02b93156fe132464f9fc83f95472bce0d26440e4a995f45121a3397296bdba7bf94e6f06911e5ef7ed782f58b5e227834ee0a69eb14705802dedb766a6942dba76365d6b62f2095ff4bb11362c8b7d4388f0e2d779f8577f42fc03be8eb498edc361bc4fd762f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_63() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("365140303daeca0a17c77c72906f7ed8b3e79df186ce3a81628a5b5bb9dde6d9aa3a14594db422223dffc2fa3cb22b2e921e2904770ec870acf0b55c7d4fa2d59677942456d9d035822c425a85b0a74be290d53cf40c3cabdc6088abf01ede4e4331a3b054cd8c8da0b9abd4076d5236d29a9b7a70500464db33e4920a6b784ab43c3447665abe4a8b180de5634d7b76257fc9a1d719c427a3de2991820f328c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_64() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("945afb1cae34bce8b08094ac51d48ded841ac09af24e9f57c59447b1b85f8d69121223335e1e59a819881b1cd6983a4174b75c23278867cb8a47cf890c1c7a233b6d9f23c644d4843a9d4b69e2d72c528d6d518d328677c259aca0bc3e29b983af2e63545cd535f5dbf2e854cfa0a0a739b95780af575524336900a0d6c3fb25afcc66fd7a666ff4d858aa0f842308f8ea777d6a9b9a2dddc228f02a4bb44674").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_65() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e50cd168366f2a9ddbeaa0d4cfa09db87ece05768b4564dc1ae3b11b2408452933f237780a17e374e36f9cf63c69df70557f82e49ee52e6a45cc5b8ab5fd6201726de4d7798a6b79bc610649f0c6295c9196019d2be2e723a308f1b0bb3f0a670d7beed87d2dbee4b648c96e6bdd1ee87c99b00d323e1ab2792fc81ffe78731bd5d6ea8eea19a79097f09d604f18c88f8484d12fc1ef81fb80f93cc74297b23a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_66() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("03c6bb9ce5dc190c03faa2fe1c5f80456c783b9aba1f1357ef912954d7f0aa8a096e76116f6ab0a53b499ebf072421b219824a9c4bb78694a7de949728913d6db7decbb901edaf83b6eee8f5708d9ebbff408d5220d304073195c6619af850895e2b967c8e484c58e7fa8c889ebcd83652589ce46d8cdd1b2b186d023e59261f83e994d49dfcb1199f32f2629f6a1288ee525f6f8e199a260453a5aeecb95d45").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_67() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6ac923c9dd4745da2ff90d63c4fa17c8419166c1b9d6c0e8347d2fc3f862101728d104a20862d2d394fb1162ebbc9d018dffc6aa7ac17c2bd7442348684cbba0f620e6aa2fd3acd60d64336acf9e9f4f4ba48b171d3d63cdcbd38c179d08c1a0a970285ce5060ddc85d9c25ed66082b77685c44e5ed93271b1f4fb1c9175bebd10f4ac83cf8d37a908ea5e53f04cf7019530b1ab3f3a421bf554002ba5b2e1fb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_68() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("cf662159acd82d04f85b6f5939e9e250c61201fd392af869275eb457af0ac3c338918b238e04bccaf8187486fb056e179a9415fb708a3a7bb2759c5d3a7628ff14f414bcf281dae21b9f776f86e2cf85afdd946eca9ec9e810c3569041f77fa5eed015d3ab043cf9371fb9385fb690f546725304aae0c2fe8d1662b626f532dfb4f2c2900c3bd3b3750d116f58a115cac3a5a68b09d89e13ef56fb04b354a915").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_69() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d0fe9868fb0f0662d7886c945f354c0dba3cdbc1b1865243d2f63b0193e4395ac5eb5062e45f3e8f83658399321a5b68ee469bb9e287d7e4e464cc688ef331584ab2bc5cae70aac99ad27de1c9db0e40839e25b16094956b30f0dc4d35926bc748df24c23e489fc8994e2503e7f62beee29f8034de9007a2d10b5643d9f57aa11b0ba74c79f02ec2b3dc47aea2683b65fe591a82e22b1a858188f02d8aa4ef14").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_70() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("97b83146885df7ab4dc344c6485ce62c9cd394d6a55e09fdec34e83257bdd39b10ec0f9a42a7a0eeda4f1f3b043bf6df6064b43cfef173692d8d1a6ee746f96fbe7afe4de3a8ba910ac7aa0cd7ef18e804718de0b34cf5b0b0b0a5f023033991471101407c0500b8c0d8aa051f3a741c4639109562c6ccf10cb57ba3bb6125ccf7a05f688fb69175bd76a18b9e34911802ae78b39c8163e425b777058826a60e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_71() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("92c86d8b40c2c22f1503c77eeecd978cb5fb17d81e0d29f6d35feb7344fc11ebf1e2df0c6e347d4eb4f675333ca4a9919db83b9f6b10e5ecdec57646bf7c9ff6519aa23ca179118b76f586750a959ddd5f7ea6ec5a0ab15da57e01c2b419f6426b039308e99dec5f57324d5cc60674953a0736b5d5eec346ea1fb4b4e327b09058e252dca89b1db532be2c4517f2753f3ee7350aa61414e1aa10d4e1f9299826").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_72() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fa00d5146c2e76ca53e8e99c8029b91c7c1a97a8da33bc6862781f945dc231a3deb1065c55d72217f6c4e032f53d5af5b3637ef1b25cd66feb124aa1d613f84ad5ef849b351fb41af205f8a7ec314f9697b4b6fdb0ac600ef114857d7fcc9170db5be8c0620274ebb630919928a7cc678d23e38237b18633e9df4352f8d298737f13d88c77c61a2f1bbc885cdcfa0a5aad3b6dbbc3a12b5c41afb90d950eb517").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_73() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("15449a5e21db1f5c36f8754f33d325cc6a3ec7a074197d894e0c4af55f8f50ed34dc0f8ed8bc56e8587eb5d1e579822a881b7be3f9fc9c5021e5a1b7964c5178938bd6ecc7ce1acc37d43fa87c608bcda585cdf644509b54830a317c4426ea5f197292ff04de4bd295921f98dadaa38c3a4ddace60a04fa0f1a62765a49af40805c5f737f963457aedcd358a396abbe1453365e9449dd0f3accb6dd186578899").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_74() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("decae25832c9857e56092e041ee712c382ea662e560128d48b47f021a6893598bb20bb171c23fd56bc79a9e87925445d9b0b30922e3b88ae5e0ea4e71567ce05f3529d75a8542a78953e5bb80536200030262b48d5fdabca72313cfc13533a579a0193453198715af05b255b449bf44411d0205b76eac4613c291f7d1b5302c39e0f46cdec953cb393612d769e532a8168ebeb9cf566dfb0db6f5593549bd126").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_75() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fd55761315bd74aa03fe9ab6456da986432bf6ade418a45e94f10e8ff9c82a5bd7c801e47b865dc0682e7ff93e8a8a1ed0cf37c8795442e43e15e72acbca93a108d8b19234c7304a7df192ed22dc8fd78a4ad61c29a6809e1de052639676d0fa74988e5a235e5541892dd1e78c860026324cdb0128298e2cbfbcdd664a9514a4b708dd80566825f27f033635c4149b5b1bce60e90ab38b5cb9e1d644c98ad362").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_76() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("954e7f56c45b5aa1298b7cc2ef22b89d406395291a9f25359fef1e4e098d0f059412c48e39d5c17fa0595fcb80ed3ffdc7c3a05524bb158be1d5c056c24dee17923a4edc739cf5990ac387b6271cfec0c568542fee1a5eabd07656bcdbfbc743c46af57f049e1ff5d702922ebbf8a5f26fa26be7e4a256040275771e229674952bb12cdcc3b0ca9dfab5f999ac2bde56fb685105d342c1c5be7e7c93c303191b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_77() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6e4f5296a4679f22da05733f737c759de95848dc183d4d2c9552a92415d205968ab5d459512f41e9307f4e317e19c86da7f10e52b66cca9c58e9ff3ad80a89ea69dd6cbde1a735ba02ca9ba8543255cc299be9b1a08bdc66de85d4de1b015930b4add3f81bca4b7523a65e440d991227637d56f8ab46862dbbe1b5da30b252d63d76446e4c7e4420766cc23b53fc4d3b6a0aa36f1ab8ee0b4816af3afb5b706b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_78() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("03f8a70b5a33e6ef9ea0a8d50272ec83e801b3af6f79dffdeac3436511a5b2305cd442858b334960dd2f3b6ce5450977df5b11ae001ced1348701360e82cc36f4f67c83ff8e1e8c1184b5a90e7064740e7862d5fb2cea4a6d5c2a5cb5312bdcebe224db56409b379bf70b8c10ccc585b2bbd379a2da2352067e8982512c44b56c95bf2ae12cf62d139a7f0b2d935054c9ad887d736523986ca34132df344a1d2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_79() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1b6b68b6701ae21d50b00f1a7fbd54a6cedd307cdc12894d39ab7537bdb098ee2ae924ac245009c8918f7f4979d2bc55ca51690bbdaef0ba4dc6794e7cd8fe452f220906e340df4b9f278adf93ffe81b8eb5f13dc2b7aed752193e6d9eda0170bf843505f919d4f9e0af38355712a35448fe77963aa0ae630a1ffdeb82f0583a53a4e7b592e5b7c3daed8c25085d643a383c8115b7b831a6a8a31f7373fab7f2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_80() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7006630d7149a66ea2d0834f4b7524acf1ede97999ca0afa2b969bc2b4373dce4872f1c3344f720000814ce61210b9c0660857251160b9af5de68985aa9d79a93fe3a0058a5140195b67247ad69f3872fe7e287c04cffe9755e64b7a8faa2e63f532f359d347801a7ac1d8f4e0a04ce71fe1ee381ff9b4424d6aa3cdb1a07222d06950ffa7e59a5d1eb25c4ae7e0cd83d9fad7841a8b2081c67026bef0972d57").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_81() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6f65493f835281449bca25f9d0749f821144ce740ed97adcec31124a049cad0c9659f0a564856f6de75958ce0e1d1c61fd8b4a209b52a2d1e91977260e4d87a8add839e38c2e2f2d2ad1c4694f80827ba81e3bffc5b6b9af79057157447c40f96b0b8f065480cb66f83fffd26c5f472e9d164b34ec03d5bb03237cf05fd357e1061b2b7ce2b5759791812e3f231b1a5a16a90fae1f9565c1b673087089bbed53").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_82() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5978728f72b12f414073d27f84a7f2ce5295d960cddc8f77837ea38457edf6a2022d4f20fa4bd60452ae11dffddb899b7e8a6ecc928775052577e9046e1c1e3f19e63476de9fa01e985f84cf86515a93bec03b862033e01368379c00ad2fbf8ed183359228a627e6c1c11fa46c6a179cd7de6ab16e7009f087144aecf56c2c83e3431cea4a61ce0976f2c7081cade75d77f393318ba3dff600c559436f13ae84").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_83() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("86bf14f5f4ed5ba6cce1b34158ecf712e1220c00ea196194093a38eeff5cc0564fc1bfd34ef065e88f0ff0e732116b2d6b51f8ff1a8312e91e625e178063242307ec4ea4d690af51867cec8d95315e6320e4b0fd86a40078456d2fe196abbd3884dc9f5e49194b6e77c5be6367a9923042e1bbb3742542bc4324c28b56eb5316871df28aebb8ec79472e7f70c1dc754ee383d2841add00f890510afce958ee2f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_84() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("263778240b845dac270108f59ebe9b990d90c1deb8c6b6a4b2191afe31f65753f6e6ea3abe22ca463dda31ce159a9152589873c98c067cd6d29493415e6ecc1d157fc0db2beeac78828fa524f0f4d95d31958438a25338a4503be5aedad84e7d6a23fbfd42affc1d1dd0660c1918ef3c3084a425fa4db8d858000eaebf2d9ff060ae5c9dd1398fc5a05f674d29612783022729a17ba33c1e1562a1a13f28e0da").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_85() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a70cb2d135c95d736cbf4577e043ffb269f47a2974ac8de9f0322883c3befaf1025d18382a22af8aec9140e2147ea10d535e257602116fca06561e99ceb557c6b213d36ada76817c86622fb1a8b50cca9a7216f0450125d5a571e7b7cc73701bd381f89f8769287d3f4eff76faddef1c07f83b78038355f4fb5f85223dda2bf278a5b45618b9c60bacb0ed38864ba9a238999723b9a8a5267ebcda9c3b8a0d28").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_86() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("aef916b920473521a5943ad84223edafacfd7e6d6f51e412a1ee15e3c0c4eabf6662ad3e87bccaeff9a08541a1e69d4b09006b96504db36bdf0422dd70b577f78a406a74e5ace49d3bb8225f0b60bbf1f8a39335c9983a1fe248afb7bace302d8547778e94a7d6902c4f876ae97904b2c2f3c7a4504b193bcd0e8db6682dee331af25f46c8f871d50834a393ed57e5135ccf05d5f12522cdb82ae96eec39442b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_87() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ca7ae0d1789a48fe9452d081ac93cfe31e156fab576f67b46bf350860d13785daadfa192598d0c341b583bb01db533d3dad94455c2bc73d4f9a7421d1ecaf9a36c414ab2e5a894a9f38da62ed3719eeff08bf644503dfcc551bbff5c13a68fdf23ace905a0e6365f8657cfed3013587f8e07fa6f8be1d6314b2bbcfbd4cac7b6d31a3e438ccafab68dc3f4c5d34f7dd29fca8905f4e02b07ae6cdd2be5e02958").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_88() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b57eaa9ebc686eba46a7d71aa2d350e387475e112776226063fd124b0aab2bfd89fff87ec92cd819454f4502e297d82ea25de659a2f26ed598bb9a36948943d7df06275208cf649cac58c34daa8e038f71a822ff73204dba047de72c486800b7ed9bfdc0102e66eff3b5cd6349a7e3aeb4f55c072d4da4d9ca3b1892090959bea6384d96ad0acc2f5093cbe1a14a22b95d82d4d2821652eeab58bb7c384f27db").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_89() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("546fe5fe8bc57cc57eb6e5b0531b1a366165d735f4fcb758724d957c5b0e64232696b1e88b9195766162c5b81d9a2273142917494dc0a19e38f2068d046376f53c01ba182fc280d0753baca1050071a2d192a071fc08aa5b8201c6f8283277c0a58d36113b450d6a34f0c9d5cad144f699653547eaa27a7dfdc31e9fec200e90dd8b572e98ab2333b6cd7cbba40c67913589159fe0973b25472318587af385d3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_90() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6853ffdd4070741735636f59982d2866249058dd2ce364912f9d569eb0dd4511a337fa2b1f4a59c888dad23a10a1decde4c1dbae8b7d82f5e92c9b1c743433919aefe57c203501703872e72c0ff963647ab7026ecd6a5b73f7bd034cc64d8b7742f2cdc9dfb0dbbbfa9138bd279e28e7ac2ef1b5138c4a0c481ad6d1b4ba355f94fec9d6ce1740ab16ae9be19b26f2df2db6cf0c3393947d50292ed29346cd13").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_91() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1d662b9112f12fa26ed6fc30b34f1ea179f78d123ef080a3524ed2109455d62aee1874f54cf89b8440b07edc823b5e2b3cea762b2c36af3b37938909cecb08ac38fe027037d3c98a5c603691ffde60666986438931a21e2e87c0dacdd9a35bd1d628049886f949017befa899b30dd252dd19f1280e69d14982b6cdaae48a6f6a417707f40132e1b77bc95e31843f18b56280b98718bbf1d48253b1d40047f9e1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_92() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f1fe57de771ce708e0e688ded735c4f19c9e9cba09b8c26e1f13fae12a80eba3053a41a46f4e31002fc7f94003ddc0594955084332e9f065d05d30500ed9c3d093279f528473e37712782197bbb42d0d2128d1465847e3fc6d77eb8ceea7e2c4a5995df0a0902c99de6485f344fb7496cd6ca6e95da301b227b56e78e3a7c9eba0ffbe447b4bee46fe05743ba10b706ff350b596b1e4828013759ce966cce726").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_93() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b544c055971100dd47ae82ae1f21ba810154e1f7c3dc5fd9741330cb7e36c0618ba9d10ede6086412f2a0dc749f80faa1f4b3042aa44580c9f2b7de78c0e005a837b29083545a42e2eb5b733877954b4ee47e010c56f8755b1f07e6df04284c6f145457e2912fe365e476b6fe996c2fc4f02ca8a0ea76be1a5fc9d6966e980fefde5243214bfa2c549dad27749debf579443404bccdf3e0f53c83be328b0ac4b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_94() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("50d139b9e537bbcb7422179dfe562ab31b49b6ac4acec504d361a3386177e7b4f68c220e76dc409a6f5520c521d374d7f7be0abb4fc122ac069db996f0f63ffd7edb562b2cef3c8969d9b781eade8bab405c7677360eba28b16a3a7cef20e98bad8a84ee7eabf7071b115d2db973782971446b737a879227974c2d61bb077f12cc19316ee187bd848081fbb7391cdadddbc27b207d9f0f83ae8695909198932b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_95() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c9b9b933177af605ce531e69da20807348599d0e8539a7fea9935fbe8e225f42ed51555665608a511d8372e2c73b9fd6c1d1f2c6cb7d5cf225f44c3d337b100e1d8f1a134583a75a60fd806358ec3aec7feadcc79d763dd6cb7ba79011e7010b30a254d17f37e4120ac86d5c1e0746eb176be2c036789e24c4033c4b814e4162a17b46ff160359c9120039cda6cb44e01de624850529e94f315a96eff338ff59").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_96() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1ebfd7773e8c59ce42fa1f64174e79201771ca6d0799535983af9d98bb9a7623b16f0fc770c26547704854c8b29d616f29f8a9cb1814b26eb6902e78b68f5f69cbd1305668d79b5f124794f7f751d640428683b390952acc30f908ba36e9883991b3e8ef88ae98f964b964d0cbaa817042ab181ebc461b661095f4e9469feb728b4ce60710f08767c5fe2b51ded1f3bda4a8eecd01d4485c33adecf55e827285").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_97() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("be4d34c23afee5551ea57db4b92650e54c16d1d31c45d30c66dc8fd1beb329a49a3d0769b26390050ee3639ba98f52e4d68b75173237acb2752c4548c14a7ed4f2bc1dd5d14e86518c93c126edce61cbc725fb66a85afad15d3b1159616292eaabbe29dfeea83053ae4dacad18f97b1d0f6d001fbf5421b75653342373712468ad8f2feef53aab1a0b9079037fce11942389a691f1c7409dd1328fa5687648b1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_98() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c254bbcac4453812c174f205404e82f1fd0b94ab3d1b42e7a6bc716c9ae4361f94b417d5024e4bcb43b51748e511040d48207c31b38b008fbefe8e241fa4381d7348c57f41d27c7a3be27b998167dfce2d42c992944995f77e6c91e63b5923afe834c4ce44cc5eaaba135da453160df9b625e5723813200f96d1e2023be6449a38ef1a78d39d275758402520f8357a742afcf7f20ef797792db329e6232fcafa").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_99() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e622b637521ecd2c63e3db17f7d7f9d1724b88923037c01e3305a92e4be2ef8ee255759ce67bd630cae381cf15badc4389b25368ce59911429a0f99ba4bc84dcb6ca061590fd5031b46ceede510774ce0b378f0f3574719b62eac9d0680a3073ea4acb474f6f0871b323b57fbf57f5d670cb378f4c2cbf7aa670be3d083126cdb98d42eeeafc0c68e4503b80d6cb98944238d0b1a685e2665cb415c5cce78d29").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_100() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("10a15b7eaa66c617d25ec61fa24a40ecb813996d82a077261ed28f5410fc6bdaf306c4e79871d9737f689a338bdac599bc314e28cd4829beaea0a15439dd9e15b40acbfa635aa6bc0e77e35110f0c8a6b435ba2eea6f1e9325411ea5e9060db7fd371a22828de300fd8ea48c852fed46f3c4b7e91bb719a4ff4a4eb76115e26c00550bf50b261afc0b6d81366fa2d6bd03a9f47aa7eeed999ce01a69739d6e9b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_101() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9e5e0b4aa476da5d3eeb14988988dad9ce0c9b2fd227761a5e415a0de1b6763054608b42806ed97e1b019338af537073249eab6b7b7f6bad6c389d3b05db93354c8a0e9e715f296113a9fe9ba71b64e824c9794dcec9abc1b01655d6c7016b1dd18b3edb42d521848272cca44d7b084843418ce57a35656720415bdc2b90cc62a1a71cc7b1f6e11ee1b325b6027162a136ad241c6f6e9e30de7db423a78b8081").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_102() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6bc0c90f70792b391b8e9ccae776fd531369ddb78a89f2bfc7a714bf5be64c7fdab64c7b6ac1901459afd3bc250d49adc57e330febd4c97f21fd9ce6dc56077f15acb6ed4e4a7a6c95442a61652b7fe48232dc4b4ed839a40094e0c2e2f0523838eb60465be51d4cb7de54d304d5fb7fb45a3a523bedf7ededf77ad5c4810eefcb1b79c7f1d3757e63b996d7fadd88c9c941993003a6c2a6d6e87fd9b386218a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_103() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d14780e3b2b42327ec732c0935bd7c2e07b4ef76d598f5035bf947b55f8b73eec40fb717c5b10f7fce99cc4596c07c8fe2453f73a681f9672efbc790b9097096b81599881d95c9e9c7b2cc320e62f4434f6397d95682d28fb5e1263975dc02c5b46a142d550810b9693f0f3b45e266da2e513a1dcdb388634721a7d9142f3aaa7fad6e73571aa2d46d140780fca88a28d884b32d210896c5135aac075a3dc9cd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_104() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2363b2e72bfa62db3048a312daae9401e3d51e41b055555bbd27cbe6f86bcc560708e5ce53f794ee7d0aaca3109f9ebe84069ff784bd62582c450d9c14b7e45eed7cfb7f98c9988e3b1de8414ce3cd82e4d59270b3cddcb2702275a4082954a5c693736aae986e79670759f6d49b5779028c9bfec0a4ae49ffa9afbf298bac8bdd532ac8d8dc8749be65a3c2d6b5010e674f526f8e46b3e0cd6240f98bd44b93").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_105() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e7591a3f0d2b587f7740768d8934da5c1dba9de638274602a16e3d6ca76be640f8220cd02bbe5b86ef30b7bdad8796ecc131f317c4ca0aa655dd16722433ba11a9ea68d6942f5c6199babcc3e18ac6169ae09412e5ffbb817fa2f2ac9f8243cbcfeba74bbdf39af97eb441911755c5472a9f45ab94c480c597dcecb2b5e939bb110bfff89e6c6cadc79c3ec391269991a8b38a5e683dcd4ff0fcc163d1a2eeb1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_106() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0b4a9fe37fd89721e6cc14d8f2a9fab4fca7c2ac6ad01f50d9d90af5d2feaa2bb410eb9678e915918b8838913be17ba96e690ae281a870372662738d64e5b863da3dd6e7bf0db3a26c3bd5bc90ec8945d26ad38b11791e466b0389a0cd9fd5deffcdb719f4723b2dbfcfa43c501425a67719b0a8b59907466ca8f8cbae10f3c070797da9ea7165a5e4add6eb8b8a395f9a78fdb88b8efa30af4443f9e4c8dad4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_107() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5462e16e1f3ceae41492cf6636a3b30ac1038117f0405338020335e42b997fd7ae48d6825b6b7c95b2ea896599d7d78ad51c678419de4611b87b4569f6609f8ce9f269a6dc6055344fe5c55d23470139e2209961b0d4cec90c58d44998cce71ef0fe3ec24ff38f49ec5c901f2dfc2b28251a4292873278f233d397a739cd4c9216d5656dc674e161bd65130ee095f566b1051391fd7ef34c64b23277d77926bc").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_108() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("213e98741ff6bd4772dc3a347f14cc94a2e3f14ab49f3af960fe9d17425fa60b6c4a6506ef020541c83728587c062834d0bee62b361204cd2a418e20c5d89e67b8f87bad90b4202d9ee37cd2d295082c3764c56adf9a2b1c649550ae4b78a59684536044c03ed70f22aab19639090163fa7eb0acf8c7be9dd6415c4dbc68699a9a273148ef919f313d66e488ee9c9f3711b512a6b6c6bbf548de59c3650b1600").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_109() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3357e7b65c78a80ee45abcef7939b765b317639980ce8742785b925467953a10fb219f1f845bfaf6f5c3d72f046cfd8a292052bd34c34099f33ec3ce11eea21924babe51f55e620503a888f7d84d2b24c9681a2ffa30fbe837dc5841ca8d92e0ea4b6354aba0b13409157aaee10871d9d28cf284ac793a61470ae4046ed54afff57813b7d6820b43a9ccb9c2ce4da5e3b10e1e083a53c058ed4e198a5b1dc673").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_110() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("be8a82ac062fb1ac601b7f7aead1860f54776ebede071762986848ffb98bd22e41ae8db89e03bf0afb10228375534109c52887a1f3f030ff9fbd0cd146746357fe9500c03839cfd073f9afaea8125ca3cbb7e726848f4cf4214d21386da9ecdc488809f2b5db911a622ee1fabfd8b3f42305f108ac43f0129db1d3b1ba7e2169728dbd423a6de3d283f37b0399569ec914ab5ce10cb0bc1e9ed94efd20082e52").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_111() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fdf623a0f407be180649a07087cd15cd429be1bb4cacc14a94e256740462fe213ba42679e01ff73183bcc67171e51ff2ebedb88c6b06b1e30d9e367988a541cb1543a0c82d8a24e612211dbc125d9fe6840f83bd49d98aed59f38a2cca81b38ab2d927f46ad88a6ebd46dc040613e26d4f527429aab0b7159b27af6c3790de78474a84f70ee005d79e46e8e8d585bd36346d315ed4e82bd300ec600d7f7e362e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_112() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8ba6155d06cb5a43181467349bd6f0f1e00e6c7bb917c9d66e1041681635b27c34c92eb227e1e8a317f80ec42b8ac7727b89594abc12c08134271f4979ccb192769efb6925dc9e65ae04340d2516aa02df1ec544a9b01903a3bd26610a12d2d1793dbf38d20b2c97b46421c0781a6786bdfb1caa7f7fb49650a2c5ba2f8bd526dbe932040bddf6e6c19b0e2801d54706727a02c945bb25a1d71bc1e84cc04dec").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_113() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3620e155307e561ace35253af16b3881a17161713d974886a334982a3bd0bbc602e19b63dfbcfad44d8c71b2c29c2ad9df79c39267299c6025b178fa8f188ebfb502424c59b257375ae8629586bbbb252866ee432f74b6070d4a1823e98925683bf43ac55a2f5e2e1fd3d18f9ab1d86d9c51eea0e32f901a4a173cb93bcc0a3e4c50d1616e3ada46eddfd4a732b27680caf9965d81eb09e33688bad79ac40f5d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_114() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("36854f4bb79e2849a18583314bd4a8cd9b1ac187e903f2b2dbbb65fbf9f6e3086cac208c7f0a18bea735bd0d44dd85cc1d202a58516b04a31b0f41ac37a8d466698897d3903a178ae2033893cb15de950a7b414be31dfc3415af46f857b56099264f368d7cf4af263dafecd9a0a14480eba56aaa0665178ec65bb6a750a15e0baf71112faac8606e6e2cadd7cab0c08afccb11187baebb4418faadda5966f6dd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_115() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f802529a5cca73459e158d792cb9cede7727effc2e0fdbfdd7fec69d17a4ff4a688e4019f972dd8c4750a0422591362391d519b6eb54d10984aee7cbf44483f74739a45d474cd99fb16f4e397336d9fde4bbfdde06f1e643ff1e44bf9ba27386429779fa467736d4443821ddbf6a53ce7a0ef6cf78b6d0dfe93fe5762ebe3c2e86377205c6c39eab5f39597af18b43d9b46a2c80a6149229e36cefd4b90891e4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_116() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("73d4659a3f28528a8b4f3f69c1c0a150fb609bfcec6b16f5fdd46922b4e1025b4d454416ce6e5d65c987f77ccef3cd61c9e75dd405a77db1c02632181fd46a75b0c165d8fedab7252087ec0d0a040dbe8c83ec390ba88354d37cd334283f576424795c6895c1179dbd98ff057f5e17cafdce9a313aaef59fd692085676c856479019fd7cea0b327331bc708d8cbecb8a7b003f02d40b9586eb75bb6bbe0f18a2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_117() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b621c3f68dce5d791f19cc18fb6ffedc771414a2261382d59f7e8bd6af0de06c5e23b714d4db88e82a8d0c3483084061a14012c0f3ac0423a9e3b372864742002779b8c32fb14226325b75ed58f73905d5fad452e48a20c83d2f60a6425831981c754f69c11113d9f18ed458f0624d33b3844cde7eb1684b215fd1687d773f109e1c3a72227e9e5d082062de53f837f2206d1e61c72db0bcd56ad4ff8897190d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_118() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d8bed4bfcb6a93bac9bc7acdaa6d05e22833a2352307aa1640819c1ce6291036a74a2614b25cab01b020896d5a0fcbacb734a09fc9fdeaa1c49f73655b772e73d7d11adb15cec06dec6e7dffa21f55a08b9d93985f88de09a6405d27af74eb7dcfa291bc16a1220ba71bde4de3f2f26852e21d33814d0831b43cbf51a31e8ba6fca7cd636442e076e7379a94ee92a0c81e2186bfa553a725cc606e75f7d5af61").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_119() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f4361587df6b000cbe94428da1e43111cf5ae84e3d35c5fffc8eff51088dae8dee435d2f59e8c06c55b603614c8684ae9aa7a5c84e51c0e2fa4593038d1fe7d27072eaf355ec18c5bd95784886ed1ecd81ce27c341f6c421d382035f26b6557ac28a1f75006c28bc5d4cfbb7ae7f38ba95a6ffc830b3c7d30f3e21649152be9b67786047810bbb55f78d8f1bd060342485654167c20579183685a527012fdb97").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_120() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3c8de9dd5dff4e430109d68c229568d00a2d83edd69bd6cea9ceb7d6c132058329c95512a35d9e1378820486981c98fe9613fa7b49eff5dcf9a29ee8f798eb3a6babd8cbf9652092a81d8afbdbded11f54e6e9d5381decaa84acc1f05a6949bd62628f2961f10121389d31477c3592289d21ca9c73154dcf94add5c297c1839d52f439ebca3b46dfc5793adb798cb4ada069e2100ef67254660564a0492edc06").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_121() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6822d06f3c982d88b81f714d715f0a7c7a1681830c42580200c4f613795e6db79193f32c470495bd88b275ae417ee772868d03645ee7fe26ec32d7c1e58e244daabbf752528b631d268f138e9782c3ac8e5fb08ac2716115fabf57287e57bba8695ccee291a49d49eb2a1bfe06e13441427dd2a17128a0c4d508f214d13e43737dd7567fdf5e706b04f54a8f9b9949c9fdf1e17a09a7a5f75a6c852776751226").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_122() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f1e782e5535f59a257d9262517355f12ed9b6c09dd0c330bc9bc4af319292f0374404085b19fb3bf94625617628e06e6f29362e71528d9ff756696fcd345977b1447f253896ab0b9e1dc18c90569d76f25dc043863c5eb689fef0afe6d28ad5bc04dc1ed3bebb9f5edb5eb4c151694824cb17c7c0a572cd9cc708e44415c1be99f4ddbee45ec9238158eacf2681465347f1434e5eb32c96e85c068436947694a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_123() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("801c37786fd22c9345004e6e70cab9f9e24b47dfe0be630a7cac9c827bcf57b8cf23bfcd7cbc9ec657372101e1609b30e9b06fc51404156253a77067f3c35f4be2765fffac211d88081dc05980b230a8627399243ec2d310ea0197c405a1f1dba98250fa0c38d955d0f31d3ad9f9befeddce28a23b3fcb32e1e80d190a702707f44bf56efc131766e63ef347ac634dc68a8a9f9780a76b676dc3835838c43019").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_124() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f77d618148c381511e9eb926977f1ae6e90941b84fbf7c574515eb98761ac54f4c969a8e48988a6e53288817265df1a21ddfede65c4bd2631c2ffae94fb34a5bbf48060f62e721432f64d36a52989c6713cfce4edb32875d224e58dabee234a2e8f48f17ead1ab2024e158dc2eafd29ca8bd3010e27144e231922b38162dadff1c3a4ff38803e727fee77feff5bc81bdba52b419c8745e9fa5e4bac3645c0c33").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_125() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bc01cbed1f364a358d84ee9aa407a336fd9b283c90928901a2a1f5ffc4895f69a712a18a337fb29fdc82a1079b95800aa79849660f35d52f0dd11e6d8bb340cd553a08a0e83e56c1874cc13efb9f3dcffe75a962a6ea5b0a6db2394ee2853e8ff540a1e99e6aa6638814d6956543b596db257825194ae6f278c0c129002b1691a7c33b2e990e8e0f1e160cd1444d25ab68144b93f95e2e96aa264d9b18ca87b6").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_126() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("135afb6dd6b3b7f3a1b1afa0b6ee77aaf6d61d619738cd9c779912f8f8a09daedc61ba4b767af0e0e658a66ea961782d32c3eda4ca0c1ffb903888bdc95f4dd46ba0af093efaade593e37f3b901be30aab8b04c3913099c24064eb8a98923e38c42bcc9cefd65ee7f664d4110be4a7ab63a3d2f8da681858607abab6b650df417d30079849e3635d0ed664685a09157a6de3c053e643e382aa2374b43353382c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_127() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0eb9fd22a9ba84e364800385ae08b0610dcdfb3a18708c7da7d020e0024495e1f42c5e6ad6f451f92d1aeba5e2fa3f69e218b6d758513849a3f6be247d3d7e73157089ea14678c9428d8af35df0bf7690ea03bfbab0e47287b88b2d305c4ff2cdb1d18e3631ef4db4c129e9a6849e11a7702b56e430d928c8eecb0f313da9af591aedf0cb632b8060867afed333e4160400e787220e8cfd70c7318f5a8ec06db").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_128() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("09a6943d5c420bc5b8b313fab540f4665808cb67cc312b55527695fdfacf75d40ceac4669a843234b2ac5b7ab60f0c588eda448c8fb44fdf935a942cd017e075b4d0d281e4bdda8d04f9048e97e90871972a73f8b967da7b32c2974a256d5ae1f7c09bde48c0d6af9fda8fa9e89c66f692f862a0a3d835242f44de0052eb38a84823a18267d9258971154176a4dff9186726994cad2ab6a57df1f6cfc017f5d3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_129() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9c335c31973d2949b0a926517274d2aa3a137c787e12e0ca773247f35562db8186e67872e692947a0aa8602ede3c60ee54f362058c08948c4a8186457b82b01adf31aae69ab45cce605d89f4f8dc73a9baa9da8a2e60fa5dc2be370706b93dd9bd327e9a5d369189f8067f562914a45ad6ca48e745a4b88dd0ebe70faab974702cad93d6f369b1f839d3a6f9ddac8ffd0384ab155e7be17629b5483aa5ac5bf2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_130() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("85f8efc8ecd0798071ccccfea86679af1aab44f11e0bf310cdbe50b4cefc0bf6d061018f75a96e2b6be3d35049e5a61db31b119de335b2f1f6ddaaa80856d01550e7e31fa1bb53c764b23e920d9bc99cd7c11f689e1e0da0bcebaf82469222d9136e5b20131927719c0551a164f44e5b92b4f0d6ff0126cad39fb2905d73ae7966829479cdcde5577a26b49fca1d1b9bbd7101f17119499a047ea4b9e54c07eb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_131() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bfb97b54e4bf95f5b18c9f8e158dccb463eafd9a9972dedf7aaf171e2e2906091e9e81530f9f8f3e7de8213cba03e7236ffae80e310c412bf7db134ae586c1205f13647a8c92f3b556967adf974c9383900d635c32e4bec48bbdb67ef3b51576a2ab3798e8e01be3cd05d46b961342980cac6137905b45fb4329220cb88c2c3fb6d7dfb74df9318dca81350a3afe0287411c83770ca589528c7c826fdeea5366").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_132() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9af803d90bf90d521969665c2e67bc5b4641f72cf76e878d4ba00bd4ba052ca0bac37b0a3a98c28bc39a40f08b2b13b8849704c578b8f655dcfeb678ceb5b91f8b58edd48879f92a446abf1f21ec8866eae497b649181fbc8e26bd2803dd91d8f96f9caf1e387d96b61e5bdf15e83c24e1ddc22efc96d9e4279dc1be8a67f25dad4e3dd6b7e9ddb77fb568f289e5245c0d215dc06cb535c49175c50649ac552a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_133() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5036e709f6ac47fa8edc756ed4c776d9a089fd3fc16272b30a49a58cc6b06d38d3aab63b441c08ea5150e1f3944ed810c7a615ca5714e45bac9124f57ccaecfc38e2f589664764f1bfc8830e93554e20fae8e2c4d6340e81e477a72eed1da11c0e69452c4a10bf8edabfd4d2e1beb7bae221c44d8e5a84f992c5ae0ded613687e27820b0da0b464c15031dd0a478a4b2c699966261ff4d069d7188fbb6ca6882").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_134() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("84ebda042249ab00f4165c9c28734fe07c1c8a79b80c80e2c68b1a820d5e980c01bd969953eb4b4f0a77051fbc73bbd3089fec83edb550d521b5ec2f36ce7a1f51e55226ef65d72f7b5d045cb590413db04f8dee4421a768e722cee71dae485d776c8e27d9c5eee38842b47380f650ecac5bfdb4cc0915323342e52a9ef3ccd4d3a691b6cdee26312f1a46c42522cca27316d9ee9200d0681cd887bfba42d730").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_135() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2db3870852eb22bd9bbaa8e65df7e4a6140ca4fc6c8c010b1f763da58e560bb5b09c3071445a1d2e4dbf3529a85a8fde6cbfcc979efa899d1afba9029c176f4ff495af480ef516bf740379b1ea08eddf82f711a5f83919e9f0cc6053912745b58bc955b08f23278fdc792c681dad63a7a38df2d66320c4675c7ab57b47acb2fe5973c822f1afc2c97f9231859ffb7291bc9a774389626c72c5c0b5c3270d8bda").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_136() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("386f96eb6db221a42f1bced424e311991ee25e56b3c2c766885a95a8845feff13fa132c659ec73f9f707eb7f93a0845c5cf2e9077b89a34f0ef7070fc8aa20d1c3f87e8f6bd8d8ac967ac0f398ba1682c1f68d79a454ba6a86a6fb8ea70b36a1f305af0890f993635afe06e2c3c9d694001774dab6c2a54bb8efe5a2e4b0517ff367cb729a644fd36c2e22e7b4889c8ceb0a697e3d4c77d15c11f8f81b639537").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_137() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("138493f5ef03849b1c9ad7f170043285c518d252db3612eab20cb8ba912dd37fb4725c772df6aeb88a251c0aea8760eef4d136bce8334738d3baa2101617223520952c72a87e1de87e6660f68c5cb9c0ccc56da9e64bae5cbbb2a7f22cd618c19b4db3338dd924e271c38dba7d436d644b666ce03997c38ec1cc7aedc603fac74dbde0cdfeaadfaf909d07a01076fd8c58629bb1b7dda56732ec0e6c6cc322fb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_138() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a0cfcfaa1c2325ebc2e75b3b3f9138f15691d39b08b9c65726e64149ade464e129855d27a299da55df7b8d746e646201347094e9e76226ad20f6434c8ed7d5b7835e3d1ce635f096766869c1a6a8f7a2ad9ab0fe74cadf53e61b23e52efbf242a74b12b683b47ee0686a785b9325ac0dc067bdcdbb04ad7204bdcc3643b7c8dd34965b412449672410dac82a9edeca02e505ba872bd84975659b69ead5eb76f2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_139() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bc34b64dbcbd45f2a6abc4d301ab9171290b1d51366955e7072fe2af7ecb5e2a5691380927a5571973e479950829d358d926a5d4e5a4e4cf10ca8394fdb5583f123ed541ed200712fe0902fd688d1ea09aa5dd514aa06ef93896acdf41008f653a5fbdcc8e58c49c30ddf63adabedad9747a71a0710f17375b0d418445f058ea731644897ecd3cc1e1ac10cf4d2833411bfb397e3641f96445e8bf96dcb27a6c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_140() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b7ed3176e03bf35d570d2e5a47a91846819218a25b87b58bfdf68e6bcbd17564394c819ad00d240ee9cfc9f93cce21b7ecc54ca2ffeca34a5a8b4b4afbbc3e0660f85a8c354197aefe2f0422c4d47c29f910e36f3d52956626f579024358d24ccb336d41ef0950bee9a104099ada6922e381a2bcd2111aace7927c6d8f061d21882431f0632d71fa5df6d0ccfcfa6c968c52cf55450a2e8000ae21f702a56dda").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_141() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8677b54819d60a523e1c7a56c0b1d0e2efdab40a46f718351ffeb91e05c145eeb984e126427bec922ac49b627064a831f9ed041255ec6d269c410e9440d53d0383db6dedcfcf35dd7071c27793e00811e999de3ecae2e3cf2ed99c5aacb3b355f1599c82a25af193c0f95c38079a89fba6a5ee77c68a1ef41b6c25ae4a41437c3adc27a81e608e80831b5524e55d909c71f8d6be27e4b693909652e42babb0ae").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_142() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6ae3a5e63a93f0951d61fc816317c7978f660a80e02f9350e3ccaa54b925562b472387aa078eaaef625c3922406ba8fd710a4c8f07864617fc3927c553f211ada853ab2e873c3d656c1a73c2db4219e88f0456876a1b7e0c4285be36d6b50e0e29e32dd9f10a3dd4a659f39f123fa4837473d91e4d9392f12e54375ae679a569d92947fb6af45f6b1d2ded0c7d8d1111fdb3edb34b1a34e2d1eafff8a4a0e144").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_143() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("38fb85e7ac75dc3037d83bdfa0a7410eec2734a835a401e24dfae7fe13759f9cabaa983d1a5278260b955457d020c6aa70201e09076c76a47054e2bb12459b8c0097cb7740db0dbe4246796abfb50a4ab5c7c31e6f6dd30233352d7c3b996ca641670f66f2c1f97a224d3c078196c449d6bd4703ea7251c74b91a0a82da41a81b0adcdf3c163cc862b5a1a2486cc15c495089890dbf634a56a734d0e56293e32").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_144() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("11f17152a43ad81ce5d1f4a1bb671c1a45419cbde7282ff3431806c6fabb14d8e0fb98de5a34d3b48d85fa3bb345daa74e13a496c3c88e2b8fe26531d98f8dac7d8d6d2395dd66d85c3bd5e44ec56dbdd93c77b65b9bfbd2da08de8276f0c1c24770934bd6f0ab2e58fb33e75ea55232e5442dc2c01218b24f441373158fc35ceb931c0476eeb5ef1ce8fc28e198b7f0f7f4304890a033c585547b17b3890753").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_145() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e34a2740d36b6b8825f1c33c91e2153512945d58a22838fd6ed744d5fd17ef9e85e324420288599146d7834367682927c3f28955f65e744f082f19948fe2166b44171d0e8b4d01033be920f655f573abc157737ff5227abcd5e49caf39942a6a65740d7d73d71d1c0ace69e191ba084eb7c72b2663b9c46a2fed9467a88f36e36356297b87fd47911dc3db0b268667835462d65517d0cb75776bcfdaa21dbc11").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_146() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("61c46e31654cecb00f6876df47f1a98c5706811c470053f86db634c0df74ff98c597f27fb079b0ffdcef6b0812611716f58bf4039cd6f955eb5e619240a3b7e663dec916bd9e1749ce38ce82a97709d59d3228db7b1dca242400a00555369553956ef426c339599863c9459cdff66cae0739a26c0d495ef839c62a9751170768d3c1de85158e80f9ced3d35813e12d8cd18355eaace51e880ae8ca77aec47fc4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_147() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("862385f37861fb63b4052a6b7871b73c572774cfb391106ae9b817e83430e1dcc1b95f0cdf7cafe4324f704b2b78086140e1828fae163b361fc5f8ce48743d0dcc28de4198ba8231db169f2d1664c574b5b3022aee9234b1f8e149b2b8904bb3b7f0e17978064f8db8a180c542ab2d55884c0ceabb36c8366a63d5d8002104e28aefe4ef628a4cec786403048c737cadffb33f84acc649c35668087005e52bbc").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_148() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("922ad7faa3aca66b2dc8381242763b36e6bffe3715b12960cadc6479b7a8efdfbf3da51626ea6e28dbf9fadd1542f9b1b6ebd2f6db76f9117b8ccb586bc3acdaff0142a54fb156c171fde754958f6dbb5a3576b21f17f1eebc1854c5f8076d0a573aecede3d2db1c216b156ea3f71fbd2e1f09dce8768ed63e4846aeadd9f4012b0ea981e53b1c900e901835281a1533b85e4e4758c156191deb10758d1cfce9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_149() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("54db9c5cfa1aa9569e5f0c9db6b82bd254523da0a14eb98743c1debaea1bbbddaa09229f76e8c1fda60b4b2af490adeeeadcf61375a5dafc1456577c607f746ae4ef237856b33267884f6f299bd93c2932fc113a11879f49b81bad56cdd4c7942f9619fd0b8af1b40bfc74753f154f4dfe5409ce57cfb8e8a9b24229733a8705468fa7ffe450b7bb4d4f8384fc7e2d38e41d38ecb220ee8afce6f558e2218bce").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_150() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1376b260df9d1ff6815dea81593a848d1747ca6e61e6e47dc43ff2b6d0af3674574aa427719c50e6bf437f2449dc1f0059f5077c38858ec4f1ab42a60c5b33f140c008d50b5dcf69049bdbcdf304ff63e7c911d93f92a21847ca34f9d76793adf44e5f68a259669dc644c903c0c6a44f49651f230549b516c56e707500e590d2b073580b0b0d943375db91b270470c4d96ae6e3afc23bd0eba0df4cc55edc6b1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_151() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4c9df3813cd61c8b24f688c13d0593945a4b8d5e82b487f1845dabcc4f475445428a491fd2f610c18e885771c7b899d6596392eaf68391fe6c0cf6b4a78ec79cc01be7b066e60bcaad878654a169d0ae1d0450ef10080b8b7de5a71501fcd38a67801a38a5e121c0f57196818b956d9ab9a4c940e6932814e7d8d74025e060dd0f99ca4c0bfcbd5fe97921611fd454fccb6ccdb215a17fbae035b95240b9415f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_152() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b96b8f5f91ae0d011d3879075246f2e2d6f9eea9d22f0fb7c75d89cb0a6ebf97ae18d57ac2c2559ee0beefc1b8e0571196761c31c7627a3cb2799aa1a0eda2f791ec80fe5049de026dd232f2e5e4569f9e02ec0efca739d245e1aa0b3d65ff1fbd3bbdb8b67d9d36bfc7027d86e1c99042222b44633d6f75dd1a52b5378273126527ba446da90aaff3e6de9168efe41d99716c0c86d8c8eb8a7072b17bd956c2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_153() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ea7039780f450f900ce4d509afe76ec0e9ef57de844abbf237df9e0bc0686888ca80472976116534082143fc7838cd6a4a68955f891c84861a17719007383fb62c57c16fc622b48e48638e9b9848c91f66cc9685ee390fa8fbd16c39a05bd72a27ae7c2b92347da72757fdc986d8be4e0cf1ddafb914eb3ea83c98cf7614a8fa36d713196a6c0429beb7921df05bd21048bd64e2478f69feba4553e9a0aab08c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_154() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c288a162d02ce6f3d169340dbb5e4d2b201e72082ac85d6b13b7964a600384d8dc9a5ca168604fdc0cf7227d4cd3f1e72aa35fbe4c8c8102ae112d143a81c973653caea27bd41d4f21bf3ee628d7b70661f7c913014a0757d2193f6563890c87ac3a3040a301a5942f37d279f96d88e9afd9a749875c48923619dd89fda24480573279f4712164ba52ce4b97a48e8528e5e1346b60536d87212fc13dc87cc02a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_155() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("45213a358963234c95cbeb82c6cbaaab72bd1bf976e1767128801649b3e8c29def425cf371cc5dc17a5e10a2e2b8030e3d9b741b1337a179fe08fc01b7da40cfa668dfc7ccf57f8e27ea7de85b46392eb4f3de1be002ca815ef031d9ecc22ada7235e6421d01401ecfabe06cd1e6e9d39d6cef19d5a95ff1030073c10ad6a771dc4999308d12c479c4cf7358da0f1dc89ffb4de4efa8850cab97fd6c743d36a5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_156() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fce757c3f95bce13151bbe1f0c3a5677b03bcdcd2578ba49475442220428885edeea22631ca14dc8c0481dbe901ebe68ec50b99409386c8a90a6254dd5ad200ffdb7def38f602d3ff84d1dc4fe8b6d5872269eb369fb3067888ce3dfb3a3b49ceb64535869079cf3b288f7450d1e0b3fe5625354def5a69cb4a8a2e05a44d6daae0baf2342f27e804446725d03e1dd5aacb18fe2f6a1554766a5383c371c0aae").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_157() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a6aebb458f056f5111dff0599a9cca1df3be3902e90dc53758daecb29c8150007659422494908837f1d80fc6434740fbaabe99c85baa1a5a1cee6e9a2f529bdf100fce4bc10b29659b078ac2c8e34e9ae72f2311ed1432589b30006761002755af9db3c6b145691c72030b83b2a2d64c46aac0c27eb6014eb46ac35a4fa0243abdabd858ad75af3de4e875fe0a76c0f1a6e1b226153ed44085d30b84a7225dfe").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_158() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3f4a6bf5348417ab21a88a8a30f188f364c46affefea2931daa64d918268b807bba2f932ee337e35d165759d00add5b3d05376f76dc757b9cd962ecae01b1cd445516f8ffc08e8aa282c0e411e01adc60c5c1e3456e440d13f916b7adec22bea0bde18fec139bc64f12f82f914d1e3eff09f0b945c3d4944c6fd8025bfd58aaa1bc3f1406d63f77f9db90bcf11d092556bb137d92d80d4626da15040214c7466").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_159() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("cf694376f308f1118eb16796add26337e28878e53505915e07b8a818b638312076c526a6402168e6543afaca6184ab98cb2727177a0a3c0b8e5182527a1fa5b6607c326c12214ce2dc4de69faa9e0e2bd203883c60b14480cf98d248b519dbd89210732ef4cf62f9818cbc7bd68ff973e42598daeca1ed5d2dff43a0cacc6eefb0500400e1992a783ab49baee4f8f865c8331ea76d2f0acc99e83e00e79b8c47").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_160() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4d0ecb572913a88d0a0dde6b9bf4fe84f35ba2d7fc7522c6df64e03bc12048fd608087cbb4cb7a77f27e2d4f463de9136c300e8f4ef6fb1248eb11c7f15ce8a5d55aed81dfd5bb1b4c558ad1003fe65faf679c3fbf2652cde7d4ef9211537f5fe6978692683363d10e079f6fea87e9aa49413fea48e4617c2fb9f988cdcec8236b5880b1ea923b6acc0dabc2b2835543e0635b743b2e2004df6d65eb9e36e4e3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_161() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d1524fe30aeeb003a8855f4b559e348e03754ac305bd8b48bd17ad111d3e999158fb3670858366bab30e4517f7f049c64377d9eed63a213c9464e6107422bef67654fd5b143a7f2d6a4bf7dc2a664342992f709f10cf520f25efb4c96bdd7b69484ffd78062dff8820e5037ffdd11c4f1600d9c9fea1448b36786eed53fcbfb94e4dc954cacf649ca968f86c335fe966852289e524c933134d4db450838708fb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_162() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2b727030fc75efc0d144b29f9231568993817c8d2474df2877d3812bdd58cb33e0db63ddbe1b9a17a68391af413dbefd729d4f7bb26a07b0ecc2cddf291c90ee3c618fe8b90a85913b8d40c2d13fffbf7aa8eef427b25b93f6bf362f0b12372276294463727590137e6e24a33afcbb1f1b559653ac6256df05ff023568c140edbb56b08c25df359510833fc92e12244242c2df15bbd915cf58c03738f55466d6").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_163() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("36308c851375b617667d4ad8b593edb60135f91e18a8682e2e7a65ec0e2f1408eed28c84f4ea74faa2cb752aee6e9d59aebfa316caf7f9439c4d646a2b2b935e689c4268bdd6b86a8a70f8bda58c486cfb03dae2948495fd61bdfc634c6e1d17ebe19c1403c692dac5045a417fb3ef4ebb025f1e31e7b1b96be76732956981b7b9f8a5fcd14123e8855c219771c91cbb199d7115745c867a07d69a72c4e57d1b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_164() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c381551a160441c9b170d12889de362c9877f7f599ed7b399b91aec39fbc6aa160b61229508efc863f892e8b10aa8e5e6b276c8e4af7fdeb6e8bc64bb7da079d82501d730045c7900b4a47a715e7410da2f2c98eb682a4be8ff8f609c2bf116c34ebd9c79f21c1765a3cb0adb70b3c4bdd2dd3b95a92bc292bf640a3e47df9bfeadead8af4be0cb93042d25605096c297b674240a48d2dcff3f577098d4c35e0").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_165() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("cf2145ff38da9fcff40d4fd6a435f76c07d09e61781c579d2a5c959709ffef722b099fa39cd335729720fe6c7dec0141620124e2bf0bf112bb33dbb26b22fdca3174474694665155affa0687a9415321493b92923a8789e6fa0215ed2ac80f2b486e53171fb59703f075492df2f964891c17f18400427b4761e833907d01497bf4923e54e2b4f2d5d9e6cf54fda090885ac5f87465011e6011de34b0fb97e473").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_166() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8c9f0fe36909b35e053efc2a855a72b77d18d8eb6018faffd63b9fd7353fef0152f3589325518e49416fd644b01d5ce625b2e3105da78c886368c337aeed3128be55116e903c88b39f841e722d0fa392289221e097589bf3122dcdc562da25a6459fd482acf54fbe1d14f869bb493f5ccc6e00c7b46a55eda69cb05a6838fffbde9e6a459ebf8f41de466f289b9c57c3d02f1f5ef8f2cd77cb66eeb40b0d11e7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_167() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("cae86c76282e90e26733cc8884165cea7061bd48dcac497b8a2c7830bf4657a0b6375e176ad499fb536951bae19b1ac461887d0a813905333daa39c24c1f588281748b63b69c6cee4e96bec4e345510dad2ed75bf2ac8668f69f271241a68a1fb690cef8468a17a9be58d8dda131bb5d06565d909fb9821a60ae3f0817bc03f89511b5ff2e29837972808a45a1b8e23d6a9715178fac186d177565b19aedc335").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_168() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("33919aa0d20c021b42ab2daa18de2ee947f7a3abf5d47962fd012dd037d93b61d38626bede97e27a9b9dc83cb8dbea1b236e597f332dd9f1db1f371d531d98751732a286254de39490f1c9a5fd60b33a103f5e6607d37838d7c1f5c80f3bdef8a1e3cf4b7c5b88b0934718caa0702679a72f21321ff0cca961d78dd62cb866c51e6e8fff8e1c5e1448ba11320e796c5a68112d799c4d815495e56059c9ca0ab0").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_169() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fa8508f17bf005cb632076383a04abf92dff14856d45641da604d33a57b7c7708189e5dedd2712241c36d8143cbb2f483904c0bd18920ed3d3289598537ec38182f5a0a917b4d00f56bfab82e1d249796e8161dbd7580d7ba32c1d41062025802ded8603132461562f6e4a9c5373d13b3a93eb6acf2316ee2e44eee31cbe7b4b6d4528d24eeb1576e8bb6d254c67cb0a3e942d714ff6cd135decf9300b6355ef").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_170() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e0bed0ef2b1d92ac0e30f05118076d1748c0c16f42049c8846106ae7fd1ec2dd472389e80143d8a1c33dd1515820669ba99d4c1994c8e2679a612ae82671a4a44126a359404cb3e05bc0165f29f58885bde67d2590a0a148d4ef23a102ff48be38be547011b0efcf1f478a83b2ae39d9a3d56831b3bb5ac44a1553b738cac1d9f3cb79e7a7cf479d02c9a8a93a3597b46af2b85f176d37b923d268786597234a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_171() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5532cf96b9b4526d6f9732f5c58efe8fefe14297d7809551d61310fede35b74592dbb3adbdb6f8dbf242d68d902dba0a6b72c304b5e38a11b3f375f5db6df3442c445c268f81962e2190c32d8be873771740035b0a5dfdd6595c636c0bcc10b9c19a1a4d73d9955d684a101d5dee653e1db6e060a4a626c4957e8c06bbe7384156567dce86b4b2a16e1a2be9a46b5d5bae88df7c0c43c286f7f9dad7b02cf920").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_172() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c13d379d28d046b5c20f6d7148d8a43ad9bbef2ef1da73e19508882828e37343274d1f280225abe0d1205e59e6f36aaf4ae6b060fd7af08167aef01ea1d38fea5bbc33f9c1fd66d22192bdaa4f74338588ea93fcab92ac774ca71bc314c3a03a7e6b23a063aae7f1b5886b8b195df500dbfeda18307b8aa57e02e40867bc5ca132d3b3946e1c7f7780f39d085fdc406add9967777ece3bbb53ba09d4ab7f84da").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_173() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("51786186298c8748da1829509011e8b954fe248de667fccb6ae0d0b1149fffeeba3ba4941d91a878fd38b1af704b8dc4b580128fa85350a89a5f8f064702faa27439b9074da603deebd0bddb8c3332519fe5ebe2e224e8b4e38d95b411db6b4a754c7aee2c6145ece1e9ed9c870745b593a8b330399a1843c7258393fcf8c8693426846489e28de06b24ac6c4128ac74a02cd54a27857e99db4d1a3136b52602").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_174() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a51f29c74cc7d918818708ed7cf7771a0b832da0938569f8cf1cbd4354780e7d6daccd389695181f4a8d4244679e760dae4953c4bbeef909c9fb16389cba3b6e0abe62d4c6af2dc8bf87875a1ac97cb3e5844dadc5e63784fc5881d757777fce996ebedc2247ec5ba81c360c98d76fdabd565f5b9e7aa44554d82070b2832481d73e05840bf05973711590beb525b83fe7f7c5a8ca2f7a483c09069856b9c3e9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_175() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0f5d422899fad102f2e8bacade1e269643ebbab88732a323213c955207cca3b86037a97da343943c2c2b6948f47ca73dae0a18dc8e3fbff9f61500c5bf1245c2329d7d2fdbdae8d5b0a9a5cde13beec67ce3f5df6fc863b81a39a9370811dd7a7de590c3587314ccd6a523bedff6e91a46c82a6134d6e68e24debb9e95d86de9d4a3ec5eec5b1a53738ca5fcabd439c4ce6624b10c72a704a676f5fbb5d8552d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_176() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e869769fa88b15dc87eb5dd60efeb95777e08875dde1de68c8117f382bd62138268e51c7f68e173104cbdeabc6b1b11e5dcc6bdde317f04fb475f924bfb106d44bcac68d9e4f4865033471b686a6fa05c03f7658e71b4403f09a79e80ee4aa1625c24da63324c495fe86a1f6f8d49ce38c61025d14d01d6b45ba9b0265e2969f50aae9edb882c46e9a72e7183587c37633a5c54de6ced4f84e11ae6f67bd8994").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_177() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f6ac63aa33419d67369d5b49759ac7c3b50a5a06d4db954ae3cb726309d14698e087ec51debd8b2a42b580fdcb701e101d26c48fd18176bf71272dc4560c0fa167bf4332d7b04be489d2a9fac188724f890c90d96dae61ce750a6044d5d3991a73889d826c266262143a85a279ac4d5b4af9c92fbdf154d3a5c216a3962f7d40b35f87e696d7ad30df54f109e97f2e1dbc3464f3d7cd5b7ba179f68aaf1d5ab9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_178() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ab9d647a00693826f2cb2aeb0efcfcff24a1987aa7f933acc1395f5fcf11bc09f249f1f282a99dd3eb9584d36ccaa549376ddf9a2522ef21a145c001b7cfbf149a2be139b15dafdbc11b1e25b962121d96ae19abb6ef8e2e174be2e36ec0c12a2d05b8fc44f15137d31358bf56e387e62671556100ef278af6192e5fbb2a57bceb016833d24f75aec6fa2ce19917180ea48c4299ab7f865118728e1a09bf5ecf").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_179() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fdc09cdd6c330439fe78f2a4c3c60aee7d17ad55684c6e22a87bcc24c673a0458966184c76ed12ff2e635a2821dbe5c9c84526c63278a6d0b6d953c24bcd0c40f3928d47870837b98804df91afb0e1c4b907408bfb30e26a41f227f6758102ac84c78e30219dfeff49b85126f6368844f2b0da98c58a96d9fd77553425bb4d0211f18be2828ede7846e270beedaee8b51ff79b8cddda0564c08c4ba97a557ecf").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_180() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fd9b790be2308af1fb71e3fe3a870933ae2f7dd8e838c1a51dcd3a4d7ae6daf4f2ba0f12137da6839b5d63a3ba361c5ad0eb2f9957635a6880c6ead50034e917d1587e21cf4bb87fcc67c77aa6d394b6cb0d74bfa007825a487a44c397fe3679dc6bf0e59bbea260030ae5af3a8853f3661b419894ddd1e0ceb4fb14b02501a5acbf5bfd85fbd5f3ce0f56c94127114df9354adf44361efe45da3188f5c15308").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_181() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f0a0f3154a1b16b64ef2a19ba7b06e4895580d942afdbf9c7f162dfd0eb7abac7b825591e70e8d4f8ffb7cfa8872e3d4379f9a54f3ddad0b8b932e91797c7d2c8a6337288e7c202d3915a5ac90319cde7ca4c283712915b9df89e6da2895e31003577e02007c6c8f16f628911318991638e288be38d0ad04ff3c1d704b05084bd234f53de7245232c25be9cc5b4ada3deb7e6fc6033fd887baf99dc8c24d7b61").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_182() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fd5777433999f8001a12db6f4331b72eeea77a14944f4764a15ca7008ab91c75d61d5228b4c3f8ba830538d4ccec7e87aff70995b97121e13c5339a53769ad3efe324091e444ed553fecb7fd6d4680c7e91d293d0e3ece3cfe9845d0748ea207af7c0d3ecab3ed2dd29f0b97ef50f989f572e8db2a2f5309d229628277bc507b3805e2778f2ca1bf74af2ba4937c832979afb89fa0ab0cb5c295a2d2fdb754a8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_183() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e5610ab5909ff309e8f91835dd266ddff59f1c4f336188313e9989246fc1a70ffece57fd7b5fffa60e945df33e4abfcbbcaa916cb02dc02d8c32c9ad189334c37ed61f7726bde9dcdce90b4eb585f6113e9d65560d0488c6fde9ab277e62605da0da22b81eb2680496ba5262b4c9f16ac02a2129bfbb0e167b330e06607a2ad06444762bc75793eaf1f04b2031590ca59a1dd40feda34e3dc9e79d520a687a66").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_184() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2841d1090ce959eb11c3567fde5f96270883c88ce7e98fd7fd3654631b372ccef78484f9f7525fcdd6a19118ecf0e838270b451b6b4b69383747d8338941b71fc8409b2dcdb6954fed7276d171d54af0184b870799bcc4ca2c6636cd2ce2d9127780641e9bcfe2f75777d92f2fdfd8a48a84436faaf9a9409285725032248ff70ecc6ac64166a79b8bcaa22f9c74422fc56ee5b79a4a8fba00d4801ac6971a0c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_185() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c06a90cc91b1e79a85fc0b235b13f9475c85c744be7f000043c0e233bbb6ba0564d9cd509bf1a08f8f12f0fdcef6efcd846b9fd9bc3c6743618149e75f3575b3cd68ce1cd1cce02a6cedf48e7f7a83549891d30f11b1669b0715179f91c104c4fb17269ee4d52af26d0c49583658f7f8604616b44d82e0474920bb4e5b510e5c88ec06aa9c3b2ae892a41855d1b223d39b39e037ce029d09dfaa72dc808240c0").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_186() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ce2d8724c6fde26e1f4b83e0d1e2ab91a26ad718868c3dd08493e019bc6d53c312ea8842e9be61052ab638576dbf706954748d9a4b22464e11068fd4d23b314d2855f147c6004e9d76e53e967f2a203abb6b5067c608059876884b12c45ef41f176b35fae7303bcbd7f49d295c4a609bc4be12de5cec2df6ac566c961f8ce16e1390edcf6c3510031866369db13c30ceeb528dc4263ed7d29ad3f5841519bacf").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_187() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("91a201740fb2c8ae969e53501fe8b60f46a06e13efb1f6a8ae7c7aa675c479cfd925f39b8f9892106b075d9598f5bd68389c45710728642c7bef13d731e310cf9aeda2b1138b961f28ed6d7776a6154e176ee1fcd0639d8e16cc64ac2322fecde2a9761ddf5e2cc0eb6df5e682ee37643a419f0ac5ef81feaf990b02780d1469df0e173c0a40bd341ca29460b605e6263192bb495e7afcc92d8a37813ce6b67c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_188() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4e5e89d3d3b158b6ef21e645d49531f35bbe0d2dbc1c2599fa5c1c5643d9125746bbaa4d81a38a5bcdbfcca22cae2a6905ea661865246e859c2ec35f8b0d38d79a8c0703049c3f8ecbad0026e37dacc1126eecb38e38e4e4f21845b0d333c486bce88674d9421462082f25986b2510f4e9cfe70a2a1cb3d9b1bc0a8164c5f121f8d96fd31643842b5e7b5259066eb5f1199a0c2ffae7bee05e009f86c79aebea").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_189() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8b0931ee85c5a4090eb33264b731793300e78ba4b0ea1707d9f5992f5b5d54e6e377a366db1e9d95cfee2794f30cc9d5aa5420594e39041d0570448be7749453f12506efc04c651b63547f6592194c7ec340d96db2da45dca94cbbf8afff87b452e9ef7314730a02b657be566c1785449011d35ec260c558592b8070d926103a382f5decc9cf4bb3fcb2fa3b75c40599727aa24a1f588c2280934532e0f3c160").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_190() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("616d1d185961504ecb0cee4dae80a8038bbf1c07d6085fff32fc17d6ce6507301b1d9b5714ff1740096d1db8144da024c34c0a61ad3259740574c2e314a26da188b3d8143efb32670dcaa8d7d8a99812a59d90ecc56d0975aafe6c514fcb699ddf97033489af917db61809a1b64ddaa691dcec60f0d18523ef7f75bab6c55a1bd2a5299e3aa153bcf27aa495fa00aea7103716464f1a2f6a811503e9f5f73343").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_191() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f3ee12c8a5c124d1925b3cefca55b35ced6da072410cf307f440bf026502c6c2e90f9c04a6543ab27be1d6bee1402f7e1e2dff75a8c8b91116aebdc086ad17f1eb1992e99b07e7bc03cd5702c09d2b877f71e396604a428e7a0b10b946151153e22a2da9e22fca09f0d79e87f7a3f3988d2eb784d2a663248cde4bb12ef10fa64a0bb2d4a3faa44cd1116060e0073aa04752aac7673196046def23f0961dd218").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_192() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("400e799d448e17c5d04bc8de66348ea415095b8b5b49e7f4d7bd2e7399f4f9c54cddc7678afbd57e4b842ea3697e0bdc25314980e923549122af94aa798c2fb9ced4eeb4fbf5b361e011e6f8a1e80054a710b94f63e05c8c6158708f4e485cd154dc73bc64541a288c367a0c786182c1d741110f284c83e4ca62d0668e2b9b2edbdaed2e84934724e2859ba838fe25a52a86f83eddd9f8cec9b024e838745dcb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_193() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3bd85294b53d083675ec90f8b3eaa9d254a0f20a9185640953453e4d97abd432f8db2ce3293f4b1eda7e33f9186cd8a75d51fdfa1a0057b3b76a9ec516febfb8a32c325369b174a46a26986a0db39bb0e460cfd9cabbf0e17bf8152544133910842613a3582937e756d63e8584bd0f488561446298d97ef3fd6dde6205c964b7417f32f05a530c4b184ce2b32b0c17856ec5cf5d053a4e9fb2f981f800130547").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_194() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8da08aed00fcac7d8de43e0c8cd8614f9592ed325309b00d347410011368d7713a18814c89215e3d91b94542232af3a05223b7068fb1302e87fd2615844fc881f968d3cbbd5b6449108d0318e421316ae18e0ec501a74993c0db433161682bec78534dc4bd67484fa12d0a183be1ff43ea78dce7b36962bc4c6762bbc5f1df0f74f7e2ea5e3afe1d3f0356ae00fcbd13a29031714659a03f1319034d326d4d42").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_195() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c3306aa31762cd8258801e88075b6376a7569e3a2383748f69fd2ef93142bd18a16335f29363aba42d19891a5265a7ba590494401eea296f72fb75755c6f0e2a79fe2aa98bd11cd7e110b66aa3566930f585858e487e7c82da4611c4d2e3b1c5b98d25991308131dba86d94907ec2eaaeffae3fb0660c9ef67eedc047580e6f9c626d8f2c92281f264e23778a316831a0b57610c0e711bf10c817a2d02f9fb1c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_196() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("42d2a470e2fca79093943d525100414d6391af89b79f95251bd0c2f66a8212134561e7b19d057627598b830f8992365ecbe2c9dbb5992b3c82bb5af845f0cbd0b0a06d33807ea0888846ebffd0b4d619d0ebf0797d2cb02c20d97d2d5100509242d275c81c9367de8d38a2dfbc69b2b6d8b4fdcb74026eeade2860989731a0232bcfbcfb239d4e061926594ed04d2aa05cddf66636e62cc5e8d29376b0e262af").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_197() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("180c64c962685c12c1e81698bd3839ee68c02fd9263cabd62677c2508bfd8550bfc7a1b75cb7b1093a31220fd468cdd6048356692ef8ec4226858bc2f1551f73cb34d2fa2dd451e488481fb471c352e0436a61024a4fda3a1278e894e66e0034f175c8a1add982e27fe48a6108985ab584f07c74d7f7ed8ec3451511e6247258297c60d18116e0f45cff9d45569546d089c432902582691de000d805e3eef764").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_198() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b42ef0cd41a1a45de826a8aef3fb31af800d82d2bf6a21bfbc8f95a88ff6928d18b4e6fea1a35936f517a03ce3b7de321b001745717c7453ecb5fbafaa6c8be32c05e5cb1fb9cd4c5b91c46496d7f38a4a4c816fb781ea7f8e2917ce061da1458655d2019e5b72f576f4854b6ab580260bba8f81caac9b7153022935a98215cdd28986651bb1969a2096a3dd0ca2ad94237b239195b23358d0282d49f4e35469").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_199() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6dcfef75067355f224a47532b305fc868bd340151c7278f7dead3bf847cc13839e8f1c81e93cc11583a2ceaf0e616dacba84444770d9aa39611c4a0285e76d0bc4f4464962d42f059578418238e79c9414498442425000ee314c10b851d50e03e298bd6f510fc15b4cd6de11ae387b854d21c792994dc4d6dec066d21e9b8852deee8134764a12c8d74f88b1c38158064f9f48bef84fca16b804021dabc89a2d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_200() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("64763dd3b158dd649f707a21bff1f66536d6e716c22a0bd754826a83f82cbc9d67c9ec1df389d1b6aced649f0b328a45417b3620f14cfb82c5378d5fc3bf7082123dfff3299834ff485e2061398fe5cece888d1e2e2f2c14f5c2704e0d81fe531d48cb2c6a8c974b11c798821793429ebb1e7f72c3d68d794a320932a7dcfcec69bb8d341b7644e5fb3cd1a098591ebd7accacd413544eccb53edbd5b8335840").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_201() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0fda52f851a163796ebad98a5f2addd7ff70a17ac6d8215fd1631ccd1109fa10d388a15070294686e37b3756b367c8f58c530a38cb7f02ee3c6fda47a5de735cbf273080b5844d16752097e18063b1b80a6c2c5fcddc4ef6c487ccbbd789637d4626e2d8eb957ec714fff88d1f3c410a43db87e9b09d70b207ce02a30bfd7a358d09b82623a346530c80965f200d8d59b3e74ae85fd93e325b875a393fd20738").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_202() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bc1ea8b64b65a6e16eedef5ee359fe85525e39bc5acc1f9c4c42dfb1ad77ec43bf6f3874300ff895fd679df23d0093177bddfc8a9ddcad376bdb0de0f470c8b4d7514bd253385592d779e3e75f6e5565088312122b456ab0c4448fd0289c3f26b8a99871b5b38f4b54497b90df25c0b0d36b56a1f669b1dba3a76f4420c32b919b42e4126447c98b093fe145b270e034ec13bb213db839b0cea1d6769ac90797").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_203() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fd0de39accfdc7ba16c1f8a3d975873534b6ce5f24c8b7c00f42c9955c5ab2ee00dbde3a65752b2b2d70084a559fe4b6557dadd3eb380ca8e38a505168211c155bb128872c34601d7fa285f523c4868d190bd7446f226fbfb8f4d7dc3bab2fba9801cf2c2dec42a7428024f27a48ce342fcf174a54fd33a474632418c15ca64add5fdd4e4db0e8c7734c4ecf647841393f6baf120400c7b377dac14b15520348").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_204() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("77819443095dde1aebd188d46d3b60d07887fe69f3b25fb62326c4db906e2152ef2a1962977d8a54c8d972f82ae443d7020f8295c107f6bb45670695b8cefcc31c44b694e3e77fee80cc049ab11bb06936ec78db393aeb9a7df5a67c7cb3cb71cf0918f735ef03eea3581971f6d7814f9cd43b4f586d7e6ce08efa70327aa78d078840e07a9df6a05747087fa377493cfa66d97da349b52e15e9e8b525c8c67e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_205() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f8896b4c9bd40c74909633ef1b22b076203e116c8bb09543ef4b498d00ecab0195891b8c1e6da15cbf6c34ae54c623d832574ede126ee77cd9dbeb856c126f313770130ddb187e17bc1b36cf90443511b9c058cd1aaccd98faa2bd1b789a531d14dda2abf0dcbdd092d246fc1e00118d5f25047434da654deec9bff07da797fba830b86a7e57c9e4e9a419d2eb51c27285372338f7f50860cdd9453afd9237d9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_206() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6efa005097a858782ee7752f96ce21d3ca17e1c46ab76c4d6347391e4356f2b65f82b3542ae7cb3efc10bea1212fc01ddd3233847f5b842f6735881995460efe70b04998e80e734806dc50411b975725e344300256b8603ff2fc12208326c0ec8db0563a4957278ce12e98c74501e74d1068f8596cfed01c1630241fcf0e8409450f5472c1dc44df1fbd57833ef0f96ebd8fbf937404dc9b20355126f662f9eb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_207() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("873a34153e2b65cffbdf9f272606b768b828e5ff1d11fff42076b0d7a663105539155febf539680573e4f8d021a5cca7202d6de55c3f1362c44901dfe5a0b7dab94ad9fcd342aca28ca27d34076cee0e615afb3ecf07ccb26bfd3d8e47598a579dbf14d5bbb33c654f224adaa87e27e68d6dbaf0fb7af755e777dd6e7c3471246d6d8c7bc0b310b03fb35542eb1ef327ce75dfb6b87c9b2baca98138df68c68e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_208() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8536181af3444f76c43ba6ba6d71801f43720d8bd25bf3c3de71d7edb637cbf8e7f51176a1b7e4bad32ddf82c642a24a38c71c27c32b040cad3111a3e38720d8cdb1ff12a301d166f643d772812e7145652c74214f851e877d8f8df07701af6ef30d85b7baba718df4354065df2a918d02a578028f3b6ad76d83abd83879febd4acbbc2cb72e541d5646e2bd972b093f722ad88703622c1fbd48425ddb4d1f38").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_209() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7ccbcedecca1a7273af118f90d389101e1e79a7446d7f6635d5b7a138ae3cf738ddf38123e0635371e1d871f5ebce06551948fdbff4eec7b380d16e5933a4ac996bcf96c3fa77611034af5c7a2ba340a5fc4345fe192602644189f43e029c7c576461f118918ce4e55ed18dd897bb981cd3543cb52564fbfa676c590cfd41b3313f8df9ba039eec8e34ad3d82b50d7562572389af7df9051dfcd571e17ff5809").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_210() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ea527ff61271aae8b62917a394c54e6c92e96bac218a290ddcba064b11fdad27ab49fb465d79d33465ec64a81b1e4788dd5867b2953e309494b03d26edac479b97d0c73b9c227a4e6387079596c98978681de02f5947fee23259a1644a8a35fe2652b4a22a3c741f84c02c8f19e3442a1b9b89a8affc5bc9e63738bfb6fad527df12abbbcdc8e074d7f3990578d0be9722775c0a8ebb72db93c9e6fd759c6691").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_211() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d838e603295aa4d017f16f2014ed92ee7c6d1e7e02e2908af870d8694fb3670a9b08220c726f2d7fdba8db70b7711c424f7565f9c2033a38f19ca46c7b05387d19db9469ab38e04b7b87bf11f78c2940bef4081c9e7a67b9133b623f113e0c0d48e78a75b33e12e8317dea83036e70b94f7a468284a43456c5a95e01c52ad1bc1c9b3719d5a9dc8ae4ffd6ef5856c591685cb172c5bdd0050e43544457d2f389").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_212() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6cfc2699656aac5064d5bcdc2df73eddc7f3c6e26f1e14f42e8aa550fb6813d460d95e43f791f201562d3b13c9cf53849d80efa9e181bc078f6adfc6eebca23f1afccd9b57eb716b0314f6df88a64b4a7a76a63fccc06430ade77d9682543f3817afb2dc0762c5b3d72abeca03b89cda13fde67a16163812e70d1331492cc75db6cd7b5c5098c16f1c9e673d167c808ed1bfa6787cfd42e0b59d6cbae351aa8c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_213() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c1b4366de2e43f957a0d36efa7462ab3cb679e7f6fc05abb3f5997f29c7fa3933d0ec9d4c7979c932b5978b9243a5185b7874991f19cf99c145f0ad95d277bd450cdcf2d1b580f66215f9f317b600dd05ec88c605970ec5b1d0d419c8ba5b17a1421ef95ceafc81fd911f36a342d4e66564bbbb711f59db005dbfd7bc9ea8442b5dffd6985693ff098ea84321c7ff55bc778b3146b4ca82355d2f71ff5aadf30").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_214() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f85cb6f7e3cdbc112167445fdd98d40a3aaa370edb6e58fcf1a18611a5a62ebb06618fc05e39f9f9306860f264f70ac1aafe470ae4fdef29d9705eaeb67bfb07f52cfa211349301637bf89a0bd2bf5b25eda7906af4ffe85e5f48432f9767ffa13cff4c62500ff9e063c822a16f5c5922c7cdcc83db87288208c044ebb71ff4040c66610d8d7de8a1a687d28f448b4bc930d4cef4b99f11930761645f5d64e7e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_215() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("be38da69d7627831bb8913f157f2200e8b386564bd18ca65c999977a57e9eb9ce04c85c1d00cd13156a6791770d8ae6c67c865fd1e48248b4b0253b5b19a1767acf4638171e5412635506caea8c98c4f49078c380ac9b270ce83abd15d58328809789600f0a299bca788d9f0ce1c3ea238ed76144756f0a9b48e59bf3c680290a82b1f55a8b2dd5e957ff5a226f083ee10c272d0f37520cf485764eaee3bab03").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_216() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1890a325a7fb2e774f88054823f9327460188f381c28d30b1a30dad94c2a810d8976ebf9253dfdba554590b6c6be40614e19db2fc59e9afbe6bf40a3d180d1d23f16d282bf1ef8a2bc6b5359872cba28f256e7fc89c25e6e3b82504da7fe26e5deaea143c10b06674f08d20addab04f5494ba36ae4c15ae7fa533145cb7b2f7f42602b731bc29c0f4955057d7813b097fa1fcf4976948ccb2352a61a9c574d24").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_217() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6a2535a198072724193ca7cbeebe70360f5a315555d40f4aebff4f1bba1ea1af861259b027f73b0654b590ddbbadc1da571ddd7111da3bd53a55db94acb6f2c721d810777bd52f3c34816dae46228a22df75aa593bacfd2a01587194c42daa1a6035887663a2e79d784f73caf7b875429e78e1c2da66dbd43d40e2978ce28ed6acf4fddb2804aad3cf3f387c9b1d5e0a363c38aebb746f303295abfa44bad583").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_218() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e53608cccfedefe10a2a748d98d0d72c196a74c7156870a89026b28d7bb774a5cf68806681a98c3b860f1bce80a70397e56124351963f2dab561321a7c6234a7e62ec0f34f01fedab19cc2971b67344c7e0125c5a01df919ec6cbaf0f07ef3af383d7c548bdd0da635805bce3bb5582f0a34f9be0e83907f88b82b6aae88ed9aaa0574c2a91973a72e0d043c16eb90ad6de96f453556b028c01faf8fb861f722").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_219() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fec60e9bee70c3bbedd01528e93d383c4ee6ca0e170a76afb2dc05a1388dd813899cf1f257f90b5b6d66da33c7ab76dc2f697165d12bfc294afef04e6fe375c24e4a1ccdd824d487e5ef1bb329e508c6ebd01b45c863705c756f75549dbfff5400c26cd41e9b2211faa621d3cee0ae13f12b2514055ebaadce89625d15b93fc4e51b453da4de35c98ed17a847af320b5ce4e73a3b8d61932600136a92591d40d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_220() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("47554d7d19c61b289d585a7d3426c259cf291e1e4a859073035ec34ce34a455a7143ce4001b0eb42eea433d01eb530198109d99e9571d375a1c5dcab42c7d3157dba90e2bf72ee566d28894add9358ea8589fdce6383ef8f744b2e53853724a1522993e94e3d2f567ac7509a55ae170c00f1062312e8d0ee9e03d9e59ea38bd86ff9937895f7e082020354f7b861dc059a903256f666696fcb3c4af65afe6b5d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_221() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b87de7901e7b098118903f6d34bb554a040f377b4f6cc9ab821471ef0bd98806fafa65c9ce31270a7b75fa4eaf8d8a99949f6dd85dbec35794c75b1ed01dadbe5bc7cc0641e2e5168f555a9f0a5d516b460a572d85633c770ee6969057a11230f6ee577c2b4a658de970e34f7326c04df6431ebdf5133454aaad3ec054ebfeb3658bc4b2068e23062e27390348a2446dd4e9df8348477942744bbbfb57d63755").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_222() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c27cb28cd5ac4587a09c7c27ac46ff8919949d5fc90c62a891d57db72717f08e5cb5c1053d179690974e02facb0a842a928509832a928a90540275662651aad9077b08b9ec0095eb0b63ff62a05fe7cb0310a6ac78d8090e4d1eac1386c28f15fc5f331ce557ebe6b791d2e7e00a6e93f26198091b82972cb70c7681142325673d6ddc4c9f0a03a6fa7e681121b242dfb3e974be885d38f8b2daf15faccf0dcc").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_223() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2ef0f04c131ed8c63b805aa30a2e1c8c996bdff56f8ca8931b11384c61562387cbc783574159e0f10b08133447e957e9a8a5d310311be23e2cad9a3249ec087c48d482573ee7131e47bf0d3f9a33275253ef908613b16d881fe95e288abcc53f3c70cabed7855d20f00215b921800635df23d282f225a8dac86ccf4359c9eb0b173ea332916b542c422fd3ce918318ab03bfbd16c8c34abdf67e08c7a9d48e20").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_224() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6be032d9c1c9a3bacf4d6f40862d2c7a978df62ffc5aca8ef2b87e9463ede16545d8b8691a944b0218ddb7da2ae1f73a680ff9475ced70d462ebf6b6ab76b125b607a24d8d02c1d4a0b4cd036e6d6a80835ac2d5e397f78eb1f9902351a9822704eac3b44575272fda3d47850eb73cfd2b73b385ef7d3bb3f8a3325c1826eb85bffce127a7400d84ffdbe27df8176cf69f90a9d44ee7b4df11e2fe4097bffdf4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_225() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6594b71147789709045844c7850141065374329cd1098ec4fdcfce43ef0435831453468e5b7ae88ad07b7ceb2a8cb6f815ba9050d200f20e47f7c50725779b160d85dde58500db8f75d0a3058c30f1bcb88ba68efda16ae550051af317d8349b760c3088a80115a8be756ea7209839b86ae08debf025645fb0679c2887efa0a8041777081e981d5fda2a1936b1a8fe1687a4f9a29f24ac59f0909398a46e131e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_226() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("dbbcd02c344f00830989eefea70342344d4b12bbbc5f989aa2572ef4ab4f88aee11dbea5538aa88dde4630d9e5daea5b551e76c7610dc353e59ade28246b81eb8476240a477a19512e74d79f8e47f9c111092f8f88a5da94652cf5ef7ade33d5aa30e1a19cf9096bda6c74640d0674a22d9410f5c0f45c6c7c07ca64f5ad1a43bab423425d292939f3f975bbc0720c2ddee2a1417833cc6cfc6e0050a41a4b14").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_227() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("84358301ffd430e7ecad194bb6c437ae874a0e6731bee24edcb54014912449b28e040261a28c07030b2d69b4d0a1bdaa27c083a04c91900143904461897aab5807362804a9b2afe058425921b7ac41f50f0736dce89919a3fcccb9a95f900c7d33774f979a47820159958bc94669773ddcbe73bdb5135f93b1ca2634a4cdb1fe668d4969031761d668fb6bf8f586aa950615040340466e5bc4d672514e4724a6").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_228() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7b2d0f5ba15feb6512ec57a1a513e15d5df0ab7e1e4f3de7be308fa17d9ef7bcc051ba5c89593554e4f85fb57a941818e80b7c1244821f96609b37d2200f62514fed429003ee79fa42ade87adc0f8d55864462d6dc2e7019d25df382a2ac3276ce5efd32f87ffdfd228313b5f08cafc3fc3a50f4780c451527159d0a395cc9840f3f87ac10b837cd70950ea4f49a83d51f1b7fe3964f9af56f0a28e84f9019e0").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_229() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("76218123e2708eea80f796c40a036c20b94c665017133a122849e43420942c331873bd861b5aa3a8ef3780a0d62461052a48ed774e14b700bb63d7844ba292b9853449a25c2d5105582ff54c2ba4018cd18588546f7464611423f23f4cfebc9884f0c82861d5352394c4e48a3d2a3e68fe8344b363d8571bc5da0cfd487b777e4dcee7e3af5384524337362e3f6c6f385f6dec3bdb51b116be5c538d9d4b9ca4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_230() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("31fb680585bb5d0312ae8f1dd408bfb6a60ee0e87baecb0be6f4825b241b719254611750a18b67f92b3d413f377dc8a491c652d16812c4286a563636c6ad7d2c177a63ae122e4fad31ef79364a3039a9cfce55deeb17e71a0e7348589fd8d8b82ff51dee8fb3ce380b56dfc39ecef586a7a6d3d9cb30809ad9e67cd851789c2ce44c5deaae788172c44e86e2d4a4d6fdf73621026673b3851987e31570a47a85").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_231() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4faca3a537e11c1c3a232a378ced7012c66f457e19912d9346fce1b5c52cf3983f004da91ab2488710745f1f73b5bf79036ac6594cb9ced2898c844f2c030255d84b79a6b30ba2e36f0c31bfd6a54cdae6f33a7249f8ac6ac0d02fba3539c00712917a14401d973be6f6582b14a19d8b2c00d26d5fa7e4e04c8c03f5f029a06fa1d82c98299ee61d21acda218ecc233f066781ba119965dfe8b5d3070da407f1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_232() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("dcd7cfb312d34f3536c132d323e3dcc3a17d4d4f88c3e39787d2987f1e8741a6f85ce44ce0f9171f5784f36140147275cc0e7a4a736fedd61a9e63b5704f6c62cca81dc6587d5e2b397e8b47f32aa2a8ff8e29b74e5e0231d8d1dfdc7612e5ed43c3a030f30e621439095c0480e9d88ddee47c942cbae27564c879ecde802a404beb194e4a14dbe6f2b4104531da990489f3d46e5f9841dadca571a1ec88a5fa").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_233() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("228a6ffe5b8fbdcc7e5e7cbcf568a9823be734fcdb58003790bcb909cd2f9e18e01156b039bcaa982850434c36568a5e3a1ef511e7a4a6eb9cd6f21033c1538bf809c6d1623ee7d84c5c5f226a754bdabc2bb166c194d07464c534deb994275d179534fe4394491a4b62ffcb53ec0c70ec1889590e35d59b849ceb927f6e0e738614cb44e3dc4980c17cd9552152635ad0f610aeba5aeb2f95112fcec38784ba").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_234() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c15b0cd0145da4bd81875a83f6fa38e542c3da5898424d2276971ba6a68e548e62b4f2e36b858ddc8d9ec811f740420b1371c4026904fdce6273957df7632531065c6e6ba5acba7b3416a3b82bb3627ca1b9531ed9e16777e8ccfcc4a2203e7fa43c3358e73d97f2c9ae098691bc76ddb08dabe80b332566a9becf23e722361f11d519bdee93829a79f305c8ebe24ab2cd5508142fd1468d23562a13154f1d03").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_235() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9f118152047be6ced59d70d026a25124e057e5fc52f40e3657cb71e42ecf29ebe7417b8a9d30fc61028b19c227a4a95f2981444ac7f23fe05cfc14205a92197dbeb59a706801ea255725cb8bb1c1dc6ded6f463d209fe7dc0e08e83f6d31279a23a609f21c702120baab48720e2c9670ca9d0b9e016bed3fad21ece4acede3cbf932370d2be79e769f75f5b5fca0e288912de30489bf9693e4dc2e979e6411d9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_236() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1ba371ee8cb0416dd5ea07af8628dc828accddfbee4b63aba48ffcf0d10ff42beb7cdb7802c61136e53fda29134e3e0d5e59f411d396ce7714d598ccc7817a3a857adf18bb4e3c267aab3a52d0a1524364d0a636978129d8f74848a11c408e920ffd2c05518b25506525d18ba7b7661b107f0384042c02a1255bc426cf29c8c4eb692cda3b209b8fcde2e81721def64c53d741064a90f6c6dbbafef701882bca").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_237() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("06cf23fd83151cf34ba96e79240247eedc34b5bfcc1253bf1b083509248531b9a3e39de1922931b37da5bebb58f9b4c8c0c57c87465b3e4ca6c06267a702eab750b5df63ed3f1498c99cf5c6e6c2c6cc07ee2042c28795b82219a5de1102c376ec1ac8d86833ade5e8bbeb0b0a6b95b5f0a53bf4a35c5707a5bae8cf1af21af589fc5395ff75d167f5508a461334e4c8e1f79240e9c1b1523b54be58e8b1866b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_238() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("014b668af47a9f1177a5669c1e50a923387490c2eb524d7771292828964a42933111d35d38256227c908a1a582a78a8602b906adebe6ad514a7c2ae6b9c4f2379d0c0c2e388db16e2b9bf05d708a1a849f861a812f9de655bd242d97cb5e18124100130a4b60d4253308522d31cbee5667ea85ca390014cc89e5f8592035b7c9240b93b28dd94f506e16781b0e57d45d0574ad0deff2bea024fa581be49b0771").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_239() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c10d8fb911ca1f92d85030f9bc5ef86f62d1c93557899bff6bede577ac90ed1e135797b95c574bd635276bfe864655394d879c14f1c3d16db5ff792ca5750d10fe38d4d69a9b9beb53c3caf5d88105be67d94b74876d85584469c4f9c06f58381318cfa218506f513f38a5809ddc2acc455d1cc41dc5f4ac39e182de8c1384f1a94e922a43a414d221375b9a4e455bd3a7fcbdcc82d5ab48f1c4e8be079d004c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_240() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c4ee284713a80f6ea471590aafae0a90b53bc4dbaa0fdadfe68273d47ff2799e1faaf8450cb2a4b0248207fe3b4716a4d2ca0d5f11a991d4637637bcf43b4dc88cc9252cd6c2760d597f58c9ef5c4c93d8aeb6b55864096d4f98fe7dd7d487b52a77120beec834f12b0e1fc073d6f30f2362fc4537cc4830b1dfb6ceaa0c23774886b82b499faa40d7004e4f24c78b4aece30bbc36b61dfbcc4ba53744cf8951").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_241() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("758da078c3beeb46773304d200b11212abadc3edc028dbad48044367beb683c4f915d9a730c77125dfd969c699df444f477d974578a5fdce0a063da3f145749783380654dec04d9715faa7f295d14740aa00815fa7de7ad7c8778dc8060450e89d508e73144a0b9068f44a4c11e1c5efc0a7413fbe9b3bb97429bfe34af00165fa605b27e429e03dff1fec6c03e8e139a6d1a6b0b894e37db79b737621c16a70").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_242() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("298967e1b1012c076a2020a2570c51f18e3686d2a426dccbe10f9eb5baa93f012ae306ee09c70841c4ae5d3d81b8b2d57b006012abf553ccce52c50ee0a352c5fcc2bdaf0f93b8e1a92fe00435f97f831154f79862e250d8c8baccf778713011925024de280e8f45513693a1226d3d760d7fcb4d1d5fcdc8bc7dfbb2e38b1d87846d27afac6fc324665de73cdc56a357ebcfcb48dee5f13e58dffeff87742f10").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_243() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("25d180cd9b355ee2e17165fef38bb4a7afc37d408952ddad05a9abbfad1193463a650c90c1fb028908081bc39e03347ca1926dcb0fc7cdbd8f4d7caadcc5698e25590b29bc465c1708628608bf9e838d413eaa2bba5c7493f3567a9992c16d0ae0d07bf6a815a8bc1d2b436739d3b3fd41c8d88dcc591f679f2e2b5699380c4863b945b0ac3a0077680b14e5cf3d8a55fc2f41e9f03cd57f2a619e3f6a66587b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_244() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f5aa852dd20d332e817e6c3e0b8f6aaa4f82ad74ed5d2acaa22a50f3b51cec4ceb5a7633b5fe65af0ce9bcb27a5e5d145605a5905db39a8cbaf6173d6e2bc31e6eeb76f5b2d24b24aeaa6386e41cb1dffcdc332b09c2e6b3d5af7aa6c376664aa17b206abaafd40f65c43a953faca88c14cc76edaac07d5aa7917edcbb9bf5a76175129c76685a6263194530ac36b33a379a43473170f16f649ed930c2f97e7c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_245() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8ba7be60afd0f82c699b134b8e6c8522dc034fc6b64a9f5df15e0d1fc8dae5ca58673ea62fa87be4529a0e92e8a21dd5ba90ea1db2d5f1ed44c07b06c6ccb054f3068c28a654ac8c9d43e2ecfbf515924a2b55f570ac02c1c36baeb31263ec083db8418aa446996541c52e0367de9ce8b0595367b7c5b41da5db702ba1b2a9abe2cb4ff7d47f79230b91fdd01561c157231ed70097371569e45af9047118c46e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_246() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("85dec7fe15d314b982afd6e7ce5f800effd051eeede236135eb91354ba3b5195e9961ed0b9a064189fe866c9c115edd5021ba528990f9a924e72a8aaf5cda9ae8064095fabacb631ebf1af792976703ecedd3c73cfd6de9521ee4e400ede9e070419a7756bfd3240a4b8b9e330ba8a331e5002970f404d170f1f0424c3ccfd2a27351ef5fcd43309a764790420ed62361e6271eb103ce572955c094f034167e4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_247() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b4ab5487076ae6b6811ba35d0d71b7d90f2f21965a320a3f8ada859d57ea8affc0707a279ed30c04e86fe64b428c12fd4fa21d0be749a8def59151cd589eb516cadb7af8923720479549b9a06f516ef48280f20866a73afacf98351125e91e201714c5d8decff4d421247173886bd98eeb1392a35f236c3e77f3a399adde2f4ecf1ce5e0b7c3d1b3e04c35a150543df20b10009b708fc954d00bfe8b81c4be0d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_248() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("91d170381a0ec17f0a26c29cb6ab350be2e89acff12a1eac2d9fb1b23ba96d45bb6e9d2f6fe54249eed4caf634164168dfb2bbbe5e707c9a5cc9a707f356d9c51f95d8c01ba72cf0aafc684f98bd2c36111c7441cb853734ce0b06b21e68d3d4a5180c4483b76cf8bde9b8dec43a5bf16f2564ed8f5d293342695b4874a627f6af8bf7d834d6f197979b266975629c4835a581e7e4c2a01b038d76979e7a351e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_249() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("953f9bc136aa49dd3d03cde80d2e99a366a97792ddc8ad3664bd6afc4dce5ca4ff3dcebe8bcd4e5bc124ead6e3dd9b802d75f0bf444f2d54f871629b0f7a9d21274f827f7d60e3eb5fe6df61f9274602a280dd6bfcc95ea6459a11ab8522b853708834482e61c8974d6ae33014a80fe60e5ad3f4f7ee1b06962f3c1a82bf15e53464a06b943a29f3e8dd4fe0b40766829c9c0eab7a9bed0eae03056285fee4f2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_250() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("71c81d14df8cf7dd065e9e6fb5d70a1a35177de5093cea89f33e85a8c5797e00f15d2e4415183fce63d5c3c2da047557810dd60b82fae49fcefc623ec0eb47d7d167a45c3fcb43ee3de99f3ede164a5c27bfc363b60369e21f0d82d2e7efb4e5d0670ebe2afc6279a7854fa62ea430b303a33368880cf1043950da551a9a9cd29ebcba24d4de12c367d53bd6ad9888cc954dc23064589ce546434d5f58f23020").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_251() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8dd03d2b02cbdb383be0b0205ae72730c0537bbba9428f37aff4eeaf0ed43f5b42f7f8fdc21b0d2be3f021b0065f8fe9667b1a19cd47493e6782b874d289501e6c19df24b56230969f9a04db880290b8b499e446162d1704cc9c367df595817ccfea4bab6104208cd004d2aceec68d1c3a04896240d290b61997fddebf0a121a8eab46dba932ce5fc8c1b3dca8944f23cfbbbc0e3cd83c046d2e94144578a565").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_252() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("37183249e159af2f161a450b5d4c04c80b50a95c3305db0fb68fa923804cc69b51c2e51c031f89069809c8c954afc7d1a99d18877ed56d017eb8271f165eaaba68ae602f352406eb93b16da53f55a99c72ed58ffe9086cc80a0e29a1064d73a7bb806e86ea3fb74e436fa8eb5644a10aac1171c78c1b939dcaaabb690e47efaa35a021df920348a41f23cf5a7f68df7d106057db64eb177605040078a01dee4e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_253() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5928e419dbb69e274d05a0682dec7e506414a433c154280380ba97117f31f8b90eb5fcf19386a4d9efe2b2fbd56a27605151da57ab71ae8d524e590fba8018f3cecc1ecb34669bc15ce7c29716b65677ebadaa4551fce96e09f3766afa8c22fdfd5173a79f43487bc3586fe6d545a29badccb6aef0bcd9a7cd98d384160b7759977cf44ab2de685aadc43578d49c4b5af16660904e293755da06c4016664a0f7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_254() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e837ed868f66e634c9e039644a5b1929d98373bfaa80dac439caa013d028484cefa5fa147cd83689cc5da3cc0391bddd24c0c2942b42cb85cb9c8f38177d5bfc5521624db7f5ee9765a53a7132dc1239bdecd23930eff6eeaff6a4c59afd0bc0c04be27d5b48fc479236cfe17dd7fd29d6f5720f955b965fed26ccb89e72b30b9cceb6005424fe72b688ffda2f933b484e7f1b49e659c7766177617b81c46048").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_255() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9d75d071ba512516dccba91d6f1adbf305c24c773250f1c0a49180819141bc3af852a158576d177350b4facaf86cdaba57e43d0a34cdeb9b2cfa94afeb7c8af153d91ed66a3d172002596f2e9e65da10bfc7f5279443b25c89b146aef10ed6ba8cf454becb87895fe2cd4e697b4df57594b351470dbdfd7ed0b17748d26d432c60e37e00be9c46d4849c673f4d97909c12e8dc981ce2882af622a06877bc3cf9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_256() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("424304c8c676391a3e8d7fe2a1d61648e3dcb38a6980b4635cede3dce1ff26feb00ccfa1debb7fa44bfa700430bac843d4b87c255dee35ef0cc1f52cb37c7336aae1436db2e1cbd07e144c4d91d0458baac6d95d8fbfdb9e8e020896c4a980c00232bd4caed187099d8b2a307d8901a2344461a1701929b107c1c27f543d7fb16cadfaf9ab4cf8b3dc3e13e26a12948ebced0edd1781a8cad57867649870409d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_257() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6f4092d80955e4bf9068ef4d0bb6826765c159817cf320d59a325a5407422a83f86b99f18c6675ed33df8481b04ff002a020a5b495fb66423801cc747e5fce2d71537e49a6234d6536b478b7f3a594562a81709bc25b879a742c9e4b8b3cde8495e6a7cd7411430d1b63e0b43fb9d4a3302e3ce71396bb26a53bfc2b27eb4f074f3d15b3c7a532f651bbbcaf0f2903900f0b2e82c513136f5522015654ab47aa").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_258() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("200c5fe2fef346a741a4e782de6b76ecafb98f93e47e96168fa2e5e53f9ffc90bbcca2871ac23e0a231fa7d316d382b630a661c7e3f6c388906505b9508f32bb08f250cbcb96162a2ea5384e31fd585bf04f0d995ecc38707d1ff11964cdebc88189bca76ab4c846bca7f902264f336b53c598fd1ea87334db66628079e0a48cee7869aaa55c7f9dc4c5eaab689cf7f9976c0fe6c485774bd628e5cdba376e8a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_259() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e44dc11e088723c3ac36bfedf746c21d6b6ab30c7cc002013391e7de0893ed49b0aa6040947e150bd2774374ab19ba3d24142602b3c929d40a004b1dcffe01f0f98142a0eb58ff3f4f445bec6397615464ce308c374455038a8da6e2f953d299653f2cccaae5b866c853b061753fee88b024e678cf46c680770bd37daecd6666f8b41341f8b2da5598ebae14c65e09bb27517ecc35a0bb9b16fa383078505bab").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_260() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("29abecdd1063a8507831e3db56e45fd5f467112f760a93fa8b26e93d9d81746619a6f094105ee7a95e21363991bc310cf33a7ac205c2004b088eff33c9194299ab58f5fdace9d3e7436b3d6ee69551e35e3c63683d06e34edb7dc452a5705603ff69e8a221806939ee8c213b681c8b92489a5f0045553b1e737ee121dd4896b5d4fe6ed93069f6f7cc801d622fa3e2a37edc01d3ed295cbe1a7c18f4895749bb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_261() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1480e72f67a9e265f56972e4de7778ab27ede78d1cdadaea81b9a1afa75e5d83519d34400b18cb0728304c70e999ff913a053e37817468d06cac6c2cda311293b3e15781fdaa09ecee49f7ad19b9816b32f7b8a59c4593306851b50dc4e5a5224302f2afa9ca627b43ce2f725ee7381b0920ad30e672325ef1fdbcdfaec672588de140905822af7b537336c9618f2fc00f5df3229aa3a7e91589c70152252a1d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_262() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("770deec921278db8d20031450df20540cfdcca6eac69262e8859df21f4f72888df3e09bea317ab2471c6bd5e574ad772e70d4c41dc0e7a10fa694b6a84a1d14b97319d6fd0532e565b0538e25c14a17bd17f656794400944067e9443ead237a4a832417e84335cdfec4efa6cc2f449b3a8670aab300c2b25b1f2e348fd14d3d726b79cc8b09a95fce138fd15e1745856b4d6e40b856431bfe4daeb7f6287bbec").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_263() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d1a50fc38d6ad4bc07c84f2f94f05df499a91c4964de9bc4e3149d1e295184c1f0eabfb3a1d91ce8fa603819a10224314a7b1abdb480d2d8e7c710f17878a9c66871bf521239deb87e6dd88caa4029fc19749ea33a79b87a35337c1f820753b6937f7b78af6966af1db04f5d887e115731f115ff415255279329ca420e53b3452c2d6fa5fe501c2ebb05f020c5301d5a292ea4de1f8d763d980aae531293ecbd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_264() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b7e8f8dc5aa293bdbd4b6dd91d672bbf4b1f468ea88ad63ca868f0682b9fce8e064ccf6864350d2d5fb228d9ea52c50804de134e7adb4c45087cbf8fbecef15391edce8ae889c341922b82832ccdda116603c6b04973caaf9154e199b56f8961a3f08b7b30dce2e78f59a514884296096953577ee140d9110649fe3f41b6b6e21b50aca5853427c09ee0fe0b03d08fbc6ecb4f16c90708a293695d697e04e973").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_265() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c75d21ab2644fdd757f4a6abb58ba88911419897f9a689f18e7a55325cde1032c68286aa7e066daedd0b175448bda2112a2ed8949e79b240cb8a6aaaf2d66ff01b1a9ca7a483751862a00c4ddb62e4be7dcab6b048978f17ca9f6884154208120b9ba60a467cb80feb79b683e94feda006f8c3da7d93836c90a69c8ca0c0d262836441d1cb67ee24dae0e832e735f98fa247660bbfcd3f36d27e2ebdf1deabe6").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_266() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("02f4fa1e7205e4db90ef4026194764e8a6afdad03ef635cc759f1ee7b08d1785a247172241bfb404e4edf1c79ad3f70515a93f370fe39ead1f611430a23c2eb99a12ad101db23480c383f5137ab54e7562d44973a434d9207e647cc2f1124cd602790bb31e65545b16ae994763235947a2566850e2eba19e4057b049cd835eb3b6fe81c1ef1ae37a057c1f32e05b29628f32077bbeafb1cf9f101bde49e526a0").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_267() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("40d0d595fb087e690558b8c38a322e5e8c8c04f7ec8611ab239b3e78fbb5c4ca1e39c3094bc0dbbb283771328f7f71cfc967a9c726e0a083834021a892cb2ac7a9ae4975905f4a1a60dd3cf78697f754994c41d2f389b8f080e5d43aed7f7beb84f65284e43771ee3a815892ca8d967ef77413315c4281988fcabe67e6426d930504159172b07f9a2bd9c285c3ecb56bf112ea743548877eec7b2e0abcc8d042").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_268() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6f4ef2a0db8e29a1ad0c14fe6285a8383b6c7fb01adfd670961706121ff2561d74ecbae0b422bdb700bd8cb5dc7d23230caea0a5dd83442f94991ecf44b2b88333c4de3eb61e859a7fba35feb2ccda269e7f4d2ba9fc2f0a4433c8b7f59c37698b3597539cf22fcfec4923c075d66ac7be063615de42285c70cf78bbb401133c0c21e5b1139036c44c8070da81f32bf6af34b7fc30d491b7d40bf698fc53ccdf").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_269() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("57a119d5b71f891610ed93aaea6845e34a18a014a6787550d50b0ebde35f8621c2a78332233e1da49d54ebfea66e678a799bf6f0737a0995edd1b833415b3fa5a1973165a4c8f710ed31aaf215d38a3ee62f1360a75a6bd87c6b3e89a1e7612f594cf7c8e979a4faca578cffbc1831c5f4dec62861b486595018f68604b5fee00ff3c0e24bb2f18cccc9e9cdf31123076928605e0ec7d5f628d90e31c54b175b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_270() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("375e591bee1dcbf5a2f9322465335dd08935f0fe1cd07eeefa76a4687889425a6d420d542b20dc510aad80ad4c4f49a08ebcf21680c3eed08f4e7d2057ea30e40392326513f3b5287580c0091b27a835fac25d120414438e4d1fe2ae19f56ac39cce8b81969131c4d07144d1703ac7a6b4cf9bcc78c8b27a0917d97becbdd30ca0a9c3e0ee2192655cfb065e05f1290395b33658cc0bb28612523ea3407abbb3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_271() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d0f3b6cf867fa47f0bb1f0ac7ecaa2792c243fbba2709bca2bd1a181aaccd73ff121e6f7aeeba087ed9ecb1071dbb73a87079d30f1ad053340cdc166a5434520e8022419771c5ffdc6fd4c23fe684d3340b507fadf123dda4e9ed5ce5d31b798760374f5f75b61cd86f5c3b123f7208fd6e571b48755ba0fd17d49125bd29f48d8a842202b64fed5c481a739e2cfa4c6c2b2b2d36c5c8ebdf3ef76aa35342aa5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_272() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("648e4fcebf7e786634c3e61ca12b5c5d87b5a28cfe0190398b9960e3b671abc064187445658b20eeb6772f754befa70e552d086c2c8301ca9ec5a8eacf01afbb45e25e6a1c674968f95358c49252f9932d1f2f2ef09173a33cd4d328191f3464fac3d7296e6716746f1a8c23f588f3b134c6014697ff37c624cd90e3203ce10a58359f857786b19685e772944875f6de5eb08fb9d7986bcc1264fb53f1c4db91").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_273() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("12e48e76e9b2dc6f78d3718b37b1bfebc7fc308e51e3edc1932d4683abf5a172686c3600a3565d02a23defd8d603d0a97286fcbbf0f7d8184c80b0de0c7959c64ea890b74077d6182bf7c26be5a9afa140182aa9c913b5d19ded40f1eaea32633765a7e17d9f72fd609298c6fa620ceea70f8feb16e1cb0745d8c556d756543b6b6c247cda735abd3a511a71597a4e4d133e0353b975befe30f426daee479989").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_274() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ef2e992fcf244703529d2b4ee5b6c2570ca3cb911eb21b1785cba4f3d9565bca7d797e4203401fa380ba9cd02f788cd8ca2d6b3763c92846c7031f3edfb3415bcd7fde038749ffbf2498661296e5e0de371f7c5c49e0906b6226558283486eded09876dc23c29bcfd6fccf1b96c6256a5532aae037bf474e7f075426430284394a2d0e5614a0404b5e7ec2e65ace76075c013010915fc74a7b16b3c167057e0a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_275() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("557d7454c3f0ca1574a902261ac6f61515cdaad067f220c762a20b01955f5f5806c2b6ba069e6372d8a91dd04c9f588506274e86e507c7560ed2a1a259155c560219a64066498d7a2f5b89e8a853547c463dc88578ae6bae09095c7d2d4e739baf8053dedde22812b3d2ad4ccc839597548c011c3389be8652ca6941f8bd6f48277f1c789bdf1d34f4d7cf4bf144ba01118aa3282503a861ad4bd166abb42108").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_276() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("de9290bcceb74a307cfe274f1b63cbc9fa9c9f11009908ca785cf44ffe583be244d27650244537cbe726f39b8028e1e9db3b8875d9956f6cbe91c065d36301284005058e11a0d2024afff4692eb9faa9c7583188f5215236653a106442fb19d90879bc400eb0fde8d74bb53a2575fe39ca51a5164bd499f3ca6f5ca9175bc00da068fe37a0256e097a08fbf96f2c5ed4c04603052a63f1faa58dfce34fff7500").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_277() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3e75a0705c7df27ce778bf7de48bf406903144417783f8f1392b3429eec97a871c84fa737a4feafa211f4adade67b84e8eb78c1f0744220efc1aad36bda7d6e5ea0faa60aa27bd439bfc34a67e8b3db406ba0b95eee45813d3db648607693efbcd927b37ebe14edbc018550dcabaab5d24a9fa06bc46b4917aa8e9ec749aa0907fb43bfb70119cada81fd4924a02d7b292f78fef9957e286770872bb89707dcd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_278() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d8071b869191b22aa97fd5de0dfab293f8737dc92bbc40fb80d94aaea9f4fae3bc9616aa48e61c349f119467506a97c2c602bcb1587f42541e52b6674ec4279836d702d6e6bccbaf49ca3cdf27985af7284f5eef7f147594138eb23cf135cf20d6fa90b4940ebba4cfa989c4cc051f5c52e2e6aecc2a8ab2879e494dcd8ae48ddd35a1ea4fecd89e7bf7ca0ceea28b698787d0f662328b79486191991680a559").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_279() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("68f18f576ff43cbeb624c58a079c4acb5ed8456f4e521aeefef44b6ca9d6e27425baf4a35f86892fb69a1be36a3193cd733bf6b92477f60c5dcbedc42e47954c8821c9abbfbb1f78ffb2b6c9face5b1a7a012762ac743334cc388fae3de40b62938d43a0a17ebcf8f90cef5cf61b7682d7da8ccc24346995c46a494c907927f49ab5f7e89621814f2172b267e3b35b5dac0657fb60208507fda9b5fe35fef4a5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_280() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a0c87273402f488afab2d1db7aa84d2bf2ebafa22498dac19d70127f537f107207c9a5bb34a3d9e0a517608fcbdeb33e4227f65eea8c469f6f623c798ea2958b80c28829d57a4f9fb3a906c6d070526bdd01b0c0442cd49e4c5b3016ea3603347d71ce90fd9a3ab587f4dea9dec4c176e9a203e48682adcdd271db1c3eaf7596a0b8a0c90be651993b44b5f8265988d3b47a3546313eb318f0dcca0fde88693a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_281() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("443ce79e7dc200267179d4279a9b73a7c253c535997471c9b91b631e64e8f12eaaf54e4d90dd5c8f61535ebf6d55a91143739aead98d97a1fbd309effd4f52440fb8826a576f60859dbffe7118333bf0f3437d2749b45fda5d83904df6d0b9d6eb0f3b09e37fe865a53175a50d67258f3ef1ad760462b4d0c5bafdca9e480863e4ad21e148bc60ca725da903ab677038da0b51ac78e6e70149ad62fc9a758e6e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_282() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("331a43dcc506a15174ca9b60adf7c248df85f0ab74eb7599012840e4b072f3d2a3e0f4f3b3703168bf487edb6d4da34437f4bc05fdc6f15119f1d7b8f6d099ab9991e49b39cf6794f819563b627a4e0cd45da3a5c80c59d4581bd465ef3eba9d96fa0a10aeb07a6c8619fb5115708e60267e70e6e28cc3a0d1f278cce753b3b83d2cb487db273c3d6ab2b2b8d1bd08e9d5fe72db76ab776e08df34de45295656").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_283() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d2aa9b177d611ba0cba890fcb8612fc3d6d9e06456bfb05b47e31d4c40941dbf374212169f70c04df906270e06ea59bc55b7a0002daf8ba25dc187b5545f42b1cff1bc202b1364609116d6f047827687782572bde5633621bfbbbb832e3ef1c55e9a73d9069266eb0f5a64c8a6215d3b4b208097c40c63e7727fae72b99ee3c0cd38ff3070722275e83149c6791916a5cc04df21e10d27e639f4cb5243f4b778").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_284() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4ccaa5450686977a587b1e1a42409229869996b03a48737ff613f9ac3a70d8c3e17c6b9bbf2f203fc06a5407ad67264c14504967b2ebb926070e48f54c753020883c3d40a4e05c31250c976e753072138c7d4d9c5c97f309ea178417a85a226634f639684794e3c493da69957c4807974c47d46123d1643465c2bf2b356198056c821383d7392790cb7eebd1a9ec957918e5cbb5f6f1f2d96d7a78b8f9c4be0a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_285() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6229cd877e9121e69e99eb5d4024badc6b5178889eacfc63b544df29aaf5044eb0b5b7c918990a263b0c261019a2f42f1132945f6b71d9071cd7c1ca3c3211cf26293f5c827e1bf2664cc4b1d3d948238d934f9a2d78dd186cdda5a2a88c72a83d6460237269c6319156ec289e36bcbdb8518868aa3eb2fd9292df260b4c6a1c76b763a16f92e9629958d671c6dcd5b2606995d51fdf3c219de74bb0b17d5053").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_286() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0d95258d68e4298840ae344aef2643e30de544080f18590b1f250d9b202f5417c9735c2665d2d0815e1c035ca80fa45737561e619b24f760103101fd2da2bab0d5ea95837b7decf6a3331b0ba918bd257aac9e260b2e75a3ebfd90cadb5a4e1c22e99162b2e753f28b620617eed976ce0b28ac3474291725b4e104a297c174a27bce057d131e1f389089f8118e0ab5c6aa25522e289beb04691e247dc28ec29e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_287() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5f1052860921f72005a1104bed14f459a5468d3e11f6c83a86c850cd4ff256cc03fbe0e6f80e0264536e8bb24425c28db0640fdd318fb078f640f0a2a463cdd4bd271fe6a729931515c690eb50feb8ca5f5a9c82e5f9812d7d3d58d8ef7f86c468b7e8e7f3495c045be54c699179deb9cce1f3dfc575986ef4c4d28a648847d814e1959d3263282b1e5b342a642229448b77cd882573b49b3c85b466974b09b9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_288() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("49bbdc6a5012e1b08ea4dea13be28a603058069c20a2c3f53e5c7ba2dc0a79e1fe1d330b95ad18f35e88e7cb3646c8f3db264a497800f14721e47ead8563fe7de300908d47f2feb3f3e8ef020a0627297715adeb63ba6374530f28c29b3338904bbcb46d5afc9b1495074a6bb06bdd464d5568115c2278cddfb6ad74bdfbd884a97d9c58de836a44d21616ce6eabb933ffc7a965be6f8019b70c60484c91b40c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_289() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b317166e4633076557604e4adb9e0422b5e17ec10c0fcf5a97b97d5235cd459f6f6b58a8f8ec652e48a57f1f089c987f593c6fdcfffb1de95dbaa3bdb386458905567eda23bf8b912cd212b64fc75ed6538dce90d9521abae08591a827f6e64cf4358859d57d93a71ea42f3ea36009146ee6f643ee355650c96cc23f8850e04e5ca075d5154ca663c7598d4883f79b549d77c1685a2b8cb06f67d23d41353234").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_290() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("abe1f60979e9d0f36909821f0aa84cf6860caa6079320814129eb4e4da9a27c21a5f9425cc81dea470732325d71d85e5f64bef2e1ba6f99e6110db719554fd4c84e4938a8c768cbb0603c980da024f78ccd1d53a12cd479a962aebbcd320f0e0276efc341a3de749279c732725edd395039eb9d8c214996e3486c287a0169e20f11b71887e1a134432b7c8546337bd468f6f415b9d1075a808132cc750b46f26").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_291() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7fa3aab79a07f353d8a5864fffd745ed0741b1c1c658530c345fd90711dcc08deb3c5f1bc9bca6421a5741449c4644a7385bf4c6f925b852ef613ca478b064705be65822f1431b8648b14bf9014a2ee70eed748a6e263950d7cb76058041a961e468360c0a3aca9d522628169233e9a4b8e04e2a46b231bd72c3c91630d6f621214d402ff819a08a541f5384afe3e9736c4873197ccb7feaa90a610a2a45d2bb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_292() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("eb72d563c9f6a09e31c691922ef42840793c02840cf1bff08010e5c5a07d389c94e564b9837cf52c27f0e72225efecafd9a52527124d56f87bccaadf3457e4308cbbdb7570bf67a458346cd76a1802660be5fd5e5823cf7689f40d005d6ec70652f8ae39eecac18380c4496be8b982889859c05d254b6d50f2871eb433c3a6f4e3a40224cfb24228e300cf95d8fdf93d89c90eccad1f6d476d63e97a950529b9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_293() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f1b5209b4e0110990377d28d75c2e22aeec7b96d2030dfd64378478f738c2aac777d50cdc5359c41c8255307823575cb50c887874f1933295b507a975afc299a513159300aa314ab12dc8e617cb549d25ad5c5caa85f08815e6b1fb0964b5a042e0e599c6d8471a621c85e0b348568a18b35f5ae7bd12e6cfb46f89b17a5a2d21114158990538ade0a76bfaf138529ea57299a2e08cc04df5d61bc3fd0fc0a99").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_294() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0f0c86247af4a5f200d83a66e7b973b0339f9d7a8576cb86148f2e09fd7e1b57c1c0117e0fe377396442a54308089f1cd1d57273274d3f984d6f902716d8c38ddcd83312741be7504352c01e48a32ca8f0c2068e53e985a1504e185d0f5348303d060fe87d7a7d1531f266f04068dafe625dbe6549c1d6bebc67ad24f8cea299a987172d5a1f77834eeb73b066b2006fda46d2262bf73a52eaa34a8c661bb94d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_295() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("99d74f6e80dd074ccb0dfa79cad44bb118ca282adaf8e5376cbe9202f765226575bc66bd6bec5e5b8e44242802435539c046ff189174cf2836a993ff67e511b075ec05cf0d4be689b751ea87d3173287420cec3c7469e4a3ae8861ef2d6d0ee46b1c38d352a1abcbf5649904ca431494dc915c3879bdb16b32e0f2480f5f806ec69d2d40dde44707793009dac9e20beaae1f52dce4248161aafb8edd93b2f57b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_296() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a9066a2327810f3fb3d1fda8791431633f24225b10de776e6553115aaa25a138c1659cad5f112da2aeb726cd8caeec19e90a90c02ab38ef2106041dae7a4e051daa02e799d8c346066b1ac3603ea849847d46d62666ffaa47e63f649f7a35de8f69ed0db1b8c7e6a714a24f901504d98b3edaa6e12906a28c46217c79501e642d5750829c599c032bd270dcf441367f34fdb28fe58178c302583fe1dc317c144").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_297() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("902db0c5ee678e7830f6faa932a2c7a9156755409c1bf36aaa06e39132e37ac49f209c8b7d8ac6d0715db58bb6ef821fda6ea46634b5325f32424a237c17c8c9231457756405b2dc7e586c60373c2491c4583802712ba41df0a2cd403835009ca8d4e38e90faa487c400c9d41e57d8864546c6d092d1345950062df4e4d9c61de6ececc385edb70b1f21e3d9ac16cd5a5b6189c59c89acbe55fce1148b477b5e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_298() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("35673c3e7bf482263fe007f228aa31be18bdddaa2d44648f146b0d0f00c8544f78bd9552d2071fa02cb3047a13a6aad6e311a33d587f8322cfc40dcc37fca0858756678171ed4343abce67a1ea821e587584a2829bc5cfbde24a2c72e7c2f52c12ca5abdb8c91f9c44d94fb11dfc86df5c217c7058ec7d6a2ac137af4bfc8455d89a7cbe00efbbd50121ed96053691b2dc7e4cd35b52d8d01affc0846ad05db4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_299() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("75134d2466aeb1342224cac1bef81af20a2590cc02f72b0447cf93dabf12f85c1ece88c68b6dc5ad8fa6cf7b97153a318afd41554025490070396dfa6431be950af84d9da268851a13425a43eb297e02f18219fb8c260b25eee808bfc444ee51b4c5f59fcbadc6a15e0da319418065884e0bedfbb5c83c69f2229c5a66aa60abd26f2a498d5c069965fd7db6791f8f9ba8dfc83d0cc2cec4bee86da866ec8373").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_300() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d83acdabe4dc7ba21b32fa7cabbb789410c3307c74e069834c3da5c2f65d35a44f43d79f516e554d8420ad43f4fbbbc3c6457be1fd5a3ee7b958d8dbf0da1235aa5d899e2f2938c36703fa35e38a58e70077c420d296b846aa948ab0dc0e8cd3d690c41ad488814185d0b082c2347327e7abdceca0d260b21f5f2e3a710b5fb01bb2be5a6e379779f760d61176d61e24f9ebfcabeda1ebc5109f57f9acde48cf").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_301() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("54eea3c6c4d7d96c94d923fee50424b7ff85ec54e5df76ef8cdf24dae5c54fed3ec6133d1e24671344477e627e224a9d306d1c4309963aee86f6d50eba4dfc39cc9fe9c8b041486e5102dd9b71ed74764b65474691a6067b48125d6a343c3a552ab8354d8c73a030afa2f9e4572a38cca38e0caff3ce01038e838648007eac8160ea5f0a2093c97999b95f905bd3a1b9e41ffc8d9732c428d8f4b41ae2302c5f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_302() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("840b82a4678fdf3cf92140cf0dc95eb8bdc1e295343b370140c1058d09e3399e595440f09ab66d7db48d2035cc2e3af9fdabf2f6a2076e023856b3737b3152ec073e8ea00d6fed09ba75d03eaa20beb5be1acaaddfcb526e31a2ae7029a75a79744ffa5fb4589578cc3bd413b1685745bef2b9afb1f7021798b3c674902e161d12588622b3465e83c5654db2bd5cca9cf2a80defe144db650c20b0913aae6c84").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_303() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1ff6a3368c608a655aceb654c5499521ab44fa9f94a1e9ecc8e224f8d1d1466c8f5ed2b32ee6a963e71fb8072d273dee06240884dc12bdf7e17c894f625ee4d8b1a6480e928e51cfd0f7d2b762d302f43fc474c8b26a9ebb527819a36d17485f04bad4e384850823574ac10ff21d064de419f8f8e9878fbbc7115c2299efd229e627afe834fac044e68ebe7ebcd71a18759ca13a20d58166e75ef7a47aa31cb2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_304() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("efc41c8098f5e5273250173642f10a2e4749769b45f1e50123fbb11703ac8b6cb790ab353c3f3c32c1075bf9654a27795d1d3d6373e9bd6aecf7ecb63b7381faabbb5c16c82d463e5bd783588cd5fd48254eafb9ce0df4ec5c2558fd1a3f080ef8a877de01cf18eb93c1cad9ae471dc38a7442a5d16c0b8db32d5bf1b8d69b8b25ac26bcf26c5779e511d6527090c4ad2a4d9cbd8dd50d66b38c4420b4583b19").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_305() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("734612c3f60b85f084345e73b56a7b5f94b6a232efa5a8f14921dbebcca67c19620469f4702f5d3307e6faba188b065b6e9e20b39580221c15ad217cd7f504671237d0269041f957fae22f0c3656e747f7d82c01d55f126ef03858febc72f08fcc19628dc04f27fd133a24ac883f207c56ccbb362cfa33a354abac2df730ceb6282552aa48ec152aa2e141c27ab864fef0833297c05c0b42c4d5b4885ba96c07").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_306() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("aa3429e657d79e02c63f092c0b67aff9463c6c46e1a57aeb7d799ba4a1cd272305d599394fbf1766567d75933a929b9338db2d5acb4bd79749a541e16d1b2a984482c9d0738e13000fddc91020e34d65d44d7cbf37700efcbccdf51a9d686ee1935607f47253b6ed4c4325c47203095b52c18da2b7b8f6839e9cb58b61665a7ac4772b5cec5636bc7b47c2f473a4bdfbfe387ad9b88bf9bd9f376d3ec7c57c22").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_307() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e8a6c7a9c98ca2e0d36bcf836cff60f3afa9e94adc6e63067237d70330ef7843ead9d41d73472bcb90102daa7831b57453edb20fbc7071a8df8b3a7b2bbe29a45978c1c0a9b1d263f61011dad3bbc6657b17a05d6cf7195d5c8e5d50c71669d4cf8818cef551f66a32c5197959462e2db5639aee65f5dc0b11f7639bfc189482aac74451a317638b3d367999b486f559f1f99293885df40c7027109726271bbc").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_308() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d4dbfc190733d53ddd22f218d260367c981c4e6a5004a3dbe8f0705ee6395149c9a5324667e1b244f0f200169bdb7e0201118e81dfcb1f08a5e8ff127a13c7af8e793d5057955d538adf16d6633918fd4379270f99fc3f6bf6902598f5eb4738d2c5d8aacf5029a7100db50dcc9f1d40012613c539cf9cfa645db55f8b26cf2a16d374bca107e0449c9b777668077c862d1dee6487c6e7c67410acb5fca3310b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_309() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a57b98a408bd7bf7da2769fd89c9a96831903a66de8fe08cb68269e3ba0fc180c567a4f2cb3ee18b864a54e4a6a788d07de3de97f455d4e2e715d53af73ac29c66df085b7b4dd732ea6dd1cae77754076793f933bf7f2d9478c45385e494b7945ae55727f12018d0a722a5c2d3cfa511764d9a9c373c1febf5c4300b6e79ccf9655d1d85585ac37819cb8b5182a4b88ef9a25e809b64ef471ffecad1d79303ff").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_310() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("275734c4e0d3a32af211ee005d6dce2e3d31c023bb9b662f03f8b204033344a4fe9de4584683260c91003804486c80b45eb20606f93d4089a55affcdfab1d03ce5a8948398fb3c266ff8dd404e3d95619230570ef68335a7d1c1bc561dd0ea7c1af3566ca6ca6acd0f7e84231333aa5a52ede38f3b8a19dfde7b80ce2fe5a42d0dbf12eb10e8e9350912ccee9f3478a04c7a6578f7c34519f78b5ab43f4fc984").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_311() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ae3ef0e8e717b246df29ebacf962e5f984b80c0d42d622b92402f14e5c8c8222f904335decbe0aea1aa26d0f875bc3b48d71930bf4b2f0e78ffb927665e671f6e25acf22437fabd8eb3606add6053761198cba76506c760a2eb9e6c9426f9361409ce83834e91e865d4ae28dcc6f5c67396815815b74d601fda42425a47e9ff1182ff44b12f0b01b46db0a0e65eb8334db0fc8974efba113ddd6b52b2f5f1d9f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_312() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d8fd1c7d179b6bb4375bff27fad47a633a0228f4b28b60617e3e153d7a053748ec802c85806b96ed3c44eb72e495abb199c32bb214c1192003495d8c21d587db9313b4bf2db2f14b70c67efaf88f9e95e59cca74836be393728e17e7a3adf8116f19bb09665e5facfda0b950055fa55f8ef96dda8923082c7caa9af6c7668dbf839dc921d7838ef237c03a05c3edd41a8fcc2cbc8e1b7c3ec9babaee334873ba").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_313() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b6685ba72b66f270bd31dc5be1b1b67d17113f89663859e66c182f388ebb8164d5277c6ef25694fb71e716ef9c2fc942b5adb44e64caa9585f71aa9da20ad7a9d94667357049ae1f5ae182d440eb54b5a172b67b154df37da12bc039cd2dd8bb6d9fe2aec2b3cba70e2e8cdc9e8e7888a3215e03d6d46b8748a43af7634130bfdbb4e3f8dbe9bb035fea888396c2840aedc7147b236f67666e44c1910718dbe2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_314() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1bd074b12f6781c90a2ed0e7c0c05218319d0c7690d6c617c8e0bc778b431eb67f161dd047ba81f55c8850e41aba08f17b672779d97e1ed5ee1df4f754066e3fb90d7ef91de65f57e4783649477ebb8809cd428863bd07c8135f492cab2b0181e1937229ade1dfe064a75c644ee5ef13ad6b1f55d54694a9993c97f66ea10d0ddc27d83992fb88a0a8259e6690f7baccaf99dbd86955300bfed401034eaf85fe").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_315() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e8544be6fc2376e06ac4a893752819afbb92557a0192b47860d9c5e75f4eb7f48ba9441fc3527d96413416d3fd53020ee4a8d2dbc807a728581aedfab1acd8e5db1cef0af7accc4d8c3c5969626c0af083ae943e9e56b3f7d2899dae0b919657337c12eff7493ff2a8afe2babdf906ed11bf073ebe26b84139cd17e5e3a313ddbb95288ebe60f1a73e85f294790bd9f2077d45020e9eea30d76617071aaf4337").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_316() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3084aa57db25d08992af257dfa8e973980e1a88c577d0bf9abcbee10452b00702f877b862cc6028e81328e6136e85cb1f51d8af69a250d2c4114f4955538a0f2af4b926239557b6ee4696b01d4b1cad79ef541bc8086e19f6d06f151b53e73b4ef290ec6d83ed6098956696c45fec38ebd1bdbc2dcf97c3ad41cefefe935f81705b25691209558f8243b497e639f52a75735ddb4d7ddf9375e83003bedcbe79b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_317() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e570f79a7d4a3b6301f4bfda54184968083c2a99e9456b9d9e3d11667c0b615dfb73618076edb460d3c0f5f95504746547867a8c5af89c7e26d2ec4dd89b7d094e229e02f02d756279f83437867b1cb4330cae907c465e1746242304559854b637b87a8c19ce4726810b5583bc5064c74ff0f8bc85660ed91631fd0fe02ac3b01d9d303087526a6c229e047e1803e4a70cc13fd7717d882164ea37496260b7d4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_318() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bba5f6e76f47a87ad3cab82c12fdacf4ce3b5af33d01c0c597ec9fc7fd746a985c14868f0bd831cc2094f969ba659e21ba99915ed897b53f694998ce3aed9f43c26c0a1d0d57c0b93971320d085d7ef6d0302570570fbfb31dce1aa090987e5d43bb9ff964db10a5b39468951b808b50984e0dd434c2fcb01acafb672f02ed208c33be005a26d0f2ac8cfc4b4305a72b323bea6f0899b2bba7e071682c7a4e66").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_319() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("03cbd72f8ffdd96d282da255969d6bb99a6db9131843cf5128f0c12c03b34839e456ce813c44983fb8a1a95b3b953b088deff00575aa6d7a309e919eb682043c5f3afc69cb6d456a6da4f6741bd46df13505fcb4f5c8deddf6bd3b186ebf71d4fe3b482c10aa6517b8e532546588af5fb7762e24e25398f5cda4849abfd118f35b5aeff786cddfa01310ca3828b9ff00f092aefb6c96f3211f1a97ab707dfa41").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_320() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1dd91007439dcd09e8a8f13f76ccf800626205951ed56050520e6b5ebb7d2b0cba093d210f27d2ecb9e13457e8b7d6acf38d8eb3ab83c5de0b0d14bf7336e72a29d08fab6cbcb7ca0fcaeb871eeb0b9b8ca0e36288dd8585775837a627671240451fadb8b8a749e7dd2207e20c764d6ad7a7e969485d7e3f3468774bb5e2295579fc3ad1696dfe99fc78a675e4b8143240b33c3d10dec94d9577d648edb71747").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_321() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5c8e99b01490e9bfefb23daeabc525eb93253bcb5fb0b7aee3ef3916459b3d8dcbc50f77858e783a6b53be1db7563e95b0eda11f7123e5a579e8636f585e0e0b7b83bfe64d9f56f8703c1bc08f1ed0a540407397ac78b0b1d35d48a9041e4f709abd79b19f06dcd277319283867a4d42a4e35574a8dea29806096a25df6476c419425f08accf047376546ea745e9b6461a50e3169512f91768d104efe375af3b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_322() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f968c4772aacdf141529b91909834c32ec76d4fbba31d6c549f070cbb234acb44a8acd789ca9a20cab591d7db87a6f26486945a940637e4a34b42e9b410586c8e377a90729467d49366e4f9dd103cb837bd54e770e40666334229f82326567f001eb458261d07267a2d7f6bcc31ef147fb30a588e040b575c6b03717f9311244565201fca7bac0aee99bfa639f6d8205de1e4e60f3e9440f204c787f5f722f31").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_323() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bc82738d68247de617802bb32ded344ed738f8b6910e86e9e139ee448be501f7e5b7ba8c1701133ff38f7034ce6c958fc75bdc2a9a4edc7650638e19d2f0d683a0511d560562a62d57595c14690171a96e07378a98801e4bbba3f602aeb8e54c4c53704931ae772f3261760163d549143fda7820ccbc2e786ac5f1c22a46ee37b7e5936883f495a8f77851292dec5c1382b83184de39d0c381ef6b55cc035172").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_324() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("284eb20ae595e919964619559570528e0e2b423937962fdc49d1fe6e32b32ac2961d97d75b6c4ca9bb5eb55b864e9ef8653bba7b32c7724b4f916282f76f4bc552ef8bbe2c42ea7156506ff7fdd2dd76e2d147c6a2843037cdc59813de049c5af4400dbe80ea026f5167665c86b39d63b6b9e72d8906842eb15767929d4e160fed199fb2126cf84955b17bea4c77b5d4d99db31f5a0c1a89a74ac6faa9b6db1a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_325() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("86d1baf9fb5fd890dfb2a2a6b4b1e9417bbd0d50f14fa1e1b5fcd1b5f032077b827fa94af9fff38708944b7700873da62bd788041dec7805920d03b8d739176de59b753845e9e6a81e154872c83b3a4e85f9fe06c56d6b18b5b06ab5d72f96ebcb3b7271cdad4792ed35846114638d612b19b55c16af11a583088536b8ce2bf4681f944f086f1bf7d088be3378b08d20f2afde04f176b3b73526c19cf3b30f5b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_326() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b6b42ac728361d01b65a08da5002696a37adb6a971008af1dd461ff479565330053138803d2496dcd5fd1096a22a1f7f43e5b6aa4e99ff527de448059a50724e0ae0ab89932933b260ce0d07381ef039a465959bde73942b4827e48e02d263a2dcbfa99c0b28d6e358ea1619ed9d0c1dee2a6c52fbda00cc3ad8ffc6d84344aaaa29e479b1ec4eddb8f4db839082c6042916d23f87b2baa1ae9b564f740b0251").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_327() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("85efcd3953d286b07c4a9641e72f0318d6ef051927af96df1dfef11e4fa55804f3ca050d6ea260bb0a57970b1fbadcfd11d1beb260b40574dd4310f5074b868663fde28575e7190616ba06e483739eaa89c735bb2d1e29f1c3b1b6fbaf864ac9611b36fe6f83ac3f936fa385d92e6e1328849bdcefb7e50481319c482999e3a0d35d98d6df37250cf87c9ecc8e797c7abc084e926a884b881855e1b493c28fdd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_328() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3b0bfae2223af9be5cb52336f5f0fa4151289e870bc06bd2d8234c9b50b6268f4156fd50fe70b62549010701c0f2bd6f959f1d36597218b31323d685de7cf07971d2152c45edd351682392815ead2af79c56a11b02f6b12e1b3a7f13759a8f6b19393245b213936797778d3825c444ae7485575d44aaeefa0d842bdd0510650d6d85fd8d1c64a00a66be1d8f3698b28af137fdab0d3d495aefd61d73fce6f039").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_329() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c7714bd0281bf4996656b6b4361aca92b83e98d2b185c14ea8a31f95f731b6e980a86bec0a08f46481c4f825e11f0e76d4f60b2924752126ac5fc15685415e55c8218378a9c298a5694a3383ae43c4abb1dcdb339f5466b17e3892af3a55a6d5c52504b30e821b5af5d4b168d21d450fab80e7d300cf0a59309fbb7588e5e1fb1aee3f4a069ae660886c8deb014c22f3462a8b0d65124d8806e4c921e384dadd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_330() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b5b1851f9300f5e036ec83cae810d7d11be7c3272fc1d07ffce89abd411369df0dbf762d04cc88c0e6d52355b769f34c8939d90e17e31cafb98ab5befea9f887690b62f22a24588a97daa13ceb1f26fdfca4869e1161d4c611d3e1762c921b46b56cede2259e3f7a5ca24c1c437b3e60dff88c20518bc6af143732cded0981ec3fc82065f656c5858101f53549598c3bd5b9c6a6589cf2fd8604254c48aa3190").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_331() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1dcda6f45d0d1c440f6bd46e66ee82d818abd547974009c18c94513ca6caf1e10fe6d186c64eed5f6b1ed6933b38ef94e6a2052baed077f8f54ffa34d7970faff57140cac21b6726de8c8a87149b3e55fcde0485fe225201544e655fa9f90e8e0d8b7e112526a4ca2958a7fb8ffed926c560b0ceda84e3af2af383f6f652a18536f27d980544970e80d0b8f8da41b219d88d263a40281cefa539b8f6c0b5be7f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_332() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f7957d62d922a57e1cfa4d6a179f7aec74d5fa8192556b7fefb7079302e41a102eeca3d6a4af955185833106fe61687d5ecd0a53f24d506a80a5bf106dfe08582633388ec197bda118bec596d722c4822424e604e37c26d222154bbf4140a4e2baae25bd057205c9a335b4e5554ddad8d03a1e16b4fe5bb9f01925a905394f0de4b5148f52c19fedea22a29fab78935deda12da7acc814c9b2f80688d65a62ea").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_333() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d3efc513d9014cbfd52468fa34ac6294600b874258dcd3bc74adba287311308b0c9510a9e86c080782a9cd23daf4df17695d9da28a8af692bf030bdf5675696530e398f507c6d6db1612c69e5597c85c1684ac5fe82ad30c91b1101f5ee68e0c9c357f3f4232c7af5d6cd39a24619d7c23c62a2517c1b2ae1d53b612b2424776b7385fc8f9c498124397a51996285d1845df54e927efe572646db8f2754974f8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_334() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2a67a9c3581e6fef27515074f1a2f1bd79885f705f8ee31ab80d27e48ed9303c40ebde53027bffc7bbb6ad41d7d56582a10bb59db052cd1236dfc95bf116176bd5177c7f1980d6a8b49ddb802f630eb7ac41851c348af25238a67844413fcd9711a51a61336c35f9c150bce97162d09a6066edce77565e019c4023f4f6b054744e4cffc6055139ad86e12f339951699e76832fd8c7f9ceba6e3c79985fbf0b24").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_335() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fa8431a180300b7ef07185f12b94f72ceb1f3f82d19c2a4c3137396d9ad03b4615dd309751df8d894901dfc662a51fe4a79b7aefac67ac4eb9e0dd5d7bb7933bebae74bc8b6c40c659feaef83c0199e1c30609819269b6dfe44f4e0555d4ff844c8b5782fd30a8ed0399496af098590d1918c477ed472973304fdf71f1884c3707c91f2f32700a963e701adcec7e0328cbd5c2ff6e9d3cea4b92f532ec992912").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_336() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("086cf112e9f75e71646502980ed38185d8f53c80158296c8f2d2937e3194c683e8a4344309e7ff340dcb9b0adc45075f78bd5d9c7d3731e05439d3ea529f3b1c8a2b1aed34869b281e579c9422b17d84425eebb63b21bc410fa68c00080b99540b34972edc2c7f3e3689556d0637f0b1ced596bf85b8dfd4b816badee8eee32c51f7666f291802e8eec81f5078cc321a183d1e2afadd3b8ffb4b85cc8c739b05").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_337() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4e44f8f42d88675b589c816a19e73928adff4bc1282826e2ceaa4b20285f4f0611705891261ed45734df1ac52ba2a9349b50ed1b5cd6e760ea7f61f4ae4ef41d5a8b68675b9d0b06c0a5683ce346ec9d017164cf347ffd9fab2304534669d2596795d6799edcbb0b48feefd0a8c2e2ae1bff46c8e38a57ed2e49de526f23bb288b7b4e39c7f7e61607c0d8274f51ed7bed4e88bb2342a3049e072e903724ec80").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_338() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a9e5c428cd3f6a053253e9cddc8005e01c60d9a989be883811bbbf8344dc51b24898082cf797f244258d188c95cbaa1d115d7796415b631ec34d72a91b3fcf032ac833b7cfae6d050efc7f5a222c2caa3d59a200df05b0eaae85e2902258bd6372e3cba85176d013aea9698d2fcb5bf688fdf7a5265d88797fb4fa56b5667c4314c9974c9932781921ad397cfae57c27bfe32c1abd70bdaa6a8d804ef6dbc7a7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_339() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8e6c496fd977e811b0771ca8caeef2e63103e778b2069ec500d43a8dd6ab34418849893f41b0c725b4d98b4511025434e63a4ecb65c1a52a4c183fb9527221325fa61a3057e5a2d28077eeb8c0b559c52300854933469cbeae7b9dd61c7f67d25a65d7a7ffe78d7b1826a6bee824d90c976f8c1c5aabf507cb81bbc7e81b3556da9c5ed43f1fe0b54199332c0d662a375997c5da90f1d333a9bebee82b06226c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_340() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("11642acd097e61ebff275f6076daa9c5ff7f4d646ce787de58ccfc59b1b699e68165f898a3db3558cfd005228ab34298dd1d52d13412f98d56c1f3dd698f468bbffe3617f144067de8dfd469fe5c692a64f832ce1d77204dfb16e3407eb22d0ec2949d87ce7928fe1e9dca2b63f199eade67a9d27c421bfb16314b7a2fb4d81b705e53935849ccbc1ef5fcc0b49b30683705c299ebacd43113841a0f10827bd5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_341() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0f1e6e41e08512f6650b53ad0af669aa9524e7dc50a5f0402f34c1c93eb0af2ba2ce9da7a484a55046a404061cd3893086c972e24e1aa1f46b0e8c9f196c297428c95740c54f93a99623a90e6c10c40bbe2d80f936ad8b550b242218eafa4be6e79370cedbb521f9f9c1a72708e931d8364fcacfeeaa64ab90b013e4f9e81fd4d1c673594ad3f6f093ce6ddeac8070dcc016a3bf5cef596c3874f34dd7b20192").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_342() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1df76f81b8b129aac68fbb3299d25d5b1a6dc18dd6c17d53f822dbcbd7beed1881b835f07b4aeeaa763e6eaec4956af14a45f4223725c821f3f03353366be55ecffc98eeeab57f5c7fce9610e5220a915ad6452d7bcf581bbc425046756ca1815d9ec98b04566667c455ee501b5c236626061b2a6af37295a39d0820ee1d6cfb97686d358f5191148b5b9a56cf3166acdba40bd28c943228679c392476229781").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_343() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9e1cfe06a6f8f67c4be547d1f645c4917996e4481f0f8828acf0dde87400cbd6c2a085e52daf6a8c49204a8bb6cb245063bd94fc82c165896d8a880cfa36bd536d412eaf36fa3094dc04cedf09a67dc13c1c0fa5860dd532f75a2114c12968834afed7969a76d86f6b74ebf8dd8dd1be9c5ee481b363af1d4dd64c4bc8662872a901ffeaf1ad48e27f7bbb95ce4ed62a670f37448316c036b309880e4a82dad7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_344() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("39a38e6d7794749c931f9fe05f2456568395f7cb88bf7b4eb8e0e2e1fe0198663f228352dc8316e9a1bfb8a2fb498e92c0f1a3603cf3264fa84ab85c842dca8712899f4ab03a803e19ff802d2120496830bdfb5538904f419413d7946c279e8244cb55d953945049d81984e5b8b81a4b8d4c6f035cb1813669b0f4e4d31a6fa5b0dd00455464f85ebdb57b60ab0fda653f30d1dc35379ff2bef6e986fa3465f6").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_345() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ee7540ab9c35f5c2d82cba346cdbbcb96063a6976f599261163f5da0c7c751bf36861a05def58935fa7f8dbfd9f87f73eb4998a591eefc02cf510c0e52141fdb8928b49abca448fb8654a267c8ed8dcee7400baa16991c00bd7e2871df2907146465224f6a72c26b7256226a1c42b9bbecf2e74dc650de0dc1fa3e2bf1653f7aa4b883fd4efe328a153b36bbf1a7b2a789c804b68baa0dbcdb55192170c066a4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_346() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("edf4a936a2ac7bba9aada3f153cd6f35875d023565921dbb15c47009fb2bb9ff8512fd033ee8bc16629b887089542ac729204b66131cd5db9268331f8425dc26880dac1b2ed858b22ba8b5709b132aa354e0af2e99b5c3389ff115b4f8f6312720948fea197cb8072bb5b5226a192de6f335d8345bb67519d043b97e941264c5a64aa68ef01143d371670d3c92f00b9431d1a6e84476d20bd3dcaa2b22978221").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_347() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4c0acf5d7c3e8f7c1d77f45c935a57519f9b7a11d72a14f1c29ebddde2ad77b144ca39b6054fea50b18f149a21f3a9646da8139a87157fe8df3a9ec2f4e1f037d3e35109354f57ec698179362f2cc1c0b0c7ee5057d43707ae007ddc676fcdabb99f548e349988414a5323950f58bb7d519d1e23ee3df93b46435347dc6aa51ad6dafd780d14fa7966ebda277a229d4d302cbb81519cbd52ee815d27862fc1e7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_348() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1254cd406f6185787755391af561bbef963737e3bd7e628c0ed64b6043892c7037c8a7e4704198a68c91e526be2bd0a0a363b6a191b722b6e012225deffd3ae1d0c46fbc2ab1b4154ab9afbcfda4ae5884d46ea1ad90357c6aeddb8fba334c033b6e251d0ee70bf5f981f26eda37034cb63a3ee76853001a93af56512a1cc8bd71c11c4cee9c2f3101c77f33c6f3128c27d204474277711cf0e969c8dfc1c0b2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_349() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("530e6559fca6b4c1f2adda69ff03f4b75a3ac751aeff9f5559f3a7e27733dc4c0cadfc827b09d492fc07d348f944fbd5fc14a4bfa63635d31ede18e54d7b8a08d7d0cea6046abd1a89b2fa53db2ee3128073c003af4bfc43c6d0048c5b3b4de48fbe7793c8bb917032a079facb1816f3425511129d3ebb4c877f56e87278f850f9251706bfbae3bc8af170c027ff2457d5bf70b4443cfda4ededce13198c352d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_350() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7d5cd23476a6da1fa050d41bc21085b54436673fe9ceb1b3991926f95d3c31315f873d95961348fbc03f49ca8b21caa63d474fe2e9deca1e2e4306d3f35f6801654396e7629211f14980e7512cc0feacdfe6437e85790ca78ba2eef0462d45a081310a7ba82b52b305c5f3cb68c43be2c35de4caebf10a7a6d865fdf4877f9e6ca072ea7282171819b0ef4eddf05c95ac561693335f92ba38f4f2ae6a551dcf3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_351() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f2e7f62862f0e8bd5c94b78fc24a2aa35743224fb598b1edcf3ff8944ed9a4c355e8c79d83f759864c44335f1e7baec5e77e154ba539d3ef28c43c25963ed82b084833e1bd69da7f4871e9101efc50f0db87cfd4236862fe71b33bb38c8c0bb574a5f3dbe2adb844b7f883857c8ee02c78fcdebc14025efaa5bcda8bc137ccea1ae0ad5cb28d5b24b1206ad930190f13b929173b7ac8bb16b813316436c88595").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_352() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("efb1974ed0c2a6fa8fd0f289b6ce7363149ddeaaacd1c5a20380ecae683a4226a0764c60f82c66cd28f0a5c36ebc544fafbb2d40e62aee0ac400375fcde40348c8ba31d3793329303bf03f97e2c9d58739ad1698a1821778c489f50e6761d14faa4b46c9944d2d179b9e2382c6ada1eb1ab7b6afbfba97243a240664d30d3f2d585e15f37108ef16bdfe506a4227caac1692cc27f8bb222797791e1f536c87b9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_353() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a4ada736da39a07f8accac829c62c99a6e6eca1c7d3bfd87cc35f9ed880097a0f217148fe2bd19f8d461ea982854f31de7fc08008f6c251f168e46b8e172c487a793a2d4a7ca0e09ae87c11a0906f587cc9a536e833b6f58abc36f5bcdeffad7349bc3856567ff8af266e658d7bb89e005c5a5902b3182103f147c991030d31fc9e9e9ee6b45f36bcb8333df816a86a8f9f95ddf90c48e4cebcf3b801bdacd0f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_354() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("69da18e94609c7f7aadc844980ae824966939bf486448acb890fe091233cfd069f8a9f4fda8d8f26ccc29ef7fa30049f973ab7dab0ab2552709e34c5596ce7c639d9ad7bb5e67719411e857a95125ce73c2bde0b424bc0ef9431ceb7a96883b9389bae55691e6652f15866a93a1a593a28e5c59cb814afab72c9b252fc3def6f478645eb3a04e718012964edb6132714d4d429c17e006ce765c7d972f6c218c9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_355() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7931f258ff6b7032dc69deb878af8e3523f9d3fc242e58420964d4b6ed785d662267c506de95e0a6956f199b5aa4acd8c0e1085e392c6a73bd2dd213513ba1a9f9890928846a09ea092f0854b5602bcc35b532f1b752edda74cb5213cf707305207746abad0fc5903c85bc3bcb2a4599c3c0a9ce57a1f72722383b5e0b6c6148416dae712433566c80d5c3ed41b7498f7658eb0aa01428ce0c89017a16c64c43").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_356() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c9aea42c305d1dd170817ac883e0bc63601009c0e13a6dce53632d290511a651b675c72bd3ebe5a3c8b66316cb7c223404c45afc714af4b9612c9dcb02ba835b74876c456db77d20a46f38b88632abfbe517db3c7886400043f64b043f09bfc6066a111976111a883dec6760697dfddac251f83a57692a758802326aef4a0434e1154967432378b2e57a8dd8a6f57378ce251189bcdca8c40d312f0a7be16c76").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_357() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("486cd6753ef9af93d47441b4eaa803c9d23d9a866362d93c1dfbb349c5f704ec879b4a9d21807c42693950a4f5a532142169ada756afd52aa7afcec76c330de2f4455bf9c99d6bfecacc9da9e2669a3b074117ccf133cc710744103af87f10b151cc3ea33f4956c15dc485e4218ad05d922d50e229fb3b197e7e8ee8ea957675b6719b6b358a46e3f9b9ac955032ef84a2ae820005f2d2617648dd8bebf92d08").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_358() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6b384624fa63b83ae7f17831a7cbec7cc1d3384d74c94d2d0e50025deb7967f61b0eee44e6ff061ef03752f3fb8c0d0e40f24f13b2937cdca237673e24a090cdf5895c24d3cd715aa5bd9c294e806e5ea8a59249478ef0731c913b12ee39b1be3a99af8075b278fa1b0f42cdb9c310ea77f7c21ed42e78efee10f43790de607bbf95c97836e34a16586e88823c6f2369a82712fea5076794dd88a07be6d87526").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_359() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1aeb0e1ddab8844b99b1cdee772695858d355e7b6f4891ba2b9afd78dedd14e5cd1876cb4c21eb80b43660ab0b6012d9377b3b4004aca94f10c5c716167c532eca9dac24c06ff1913e3217ee3ff2d264dc4d67829e2a1fd9457365f7fac9eb1d3196d6e902071a7d37367e6d2863f10adf5b1193c5e508b9e88f55a0673d30bcc76d176d3a3d214f76bae3273c30a3c07e8a9224fae48028e8e7f50b0790b64b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_360() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5531eddd489f360f258d7e7cec1dda72dc8213fcbae468bae4752045b2d451fe2951e7c6d619efabf51a1206915ec8e048c6c9544964ae9071ac8adcf15109077c858135bcf4a679792807ead57be246efa114b5dcf38be8ce5e04e3c4f1c5164e924cadeaa1efdcfca0bb85a8c445e81bf9612a25d29b41d4744e1fc4b819d25fed6e76268c848ff3e4a72350af0cc32941fe3f81de97b4dc7aedc2b0a0e3ee").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_361() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5199c4ae0527a3c007be8f71b0784cfcbf05e8dbbefd028e3db8a1b5d3346d0adf4a45b169c0e224f579f3269c8229f4fbe9f1e7354a7ac50473b81ba8ac833dc0f9a83621ee74ee911919f98b24c0f162673399f5a4d07ca16ea00dd073df94b382aab233f479e635e7cbfee328dbcfb4afee8b4770c2b7ac179c341f884f85ff3a4bf19c9fc60295b517b7ce30d0e58298f57f611489b20333987ae09a3314").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_362() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5f60de70bec39e1e1560b1515b6f18cbcaeb161be8c399a5e2dfd45a6b7bcd94a91da2179318671e11baa7b8728eb79815b734e531021ba106314626943176c9a7fb728ffca6225bdb6af75e391c034266ebc0af41c55d4c99ae2e0c4ec722db98362c52fa15c3e56ee629ec1e1d9d63c47243f73a5e0e91f07314e6f9a68f1f6d7c15eb4054e6597100f7a4c9a5e048afa568f53ce51ed2561c2eba4f60a532").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_363() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c6a1b9890cd1a7e53f34f43f3acd3681c0f0d674f04a7745d336edeb6ad46f4c34b6ed434704733951dda83643d791b2738c1870a00246292e554217b31172496f01bc6441be831769ae382ef4cad8a13e799c6021a87cc0aa8a267fbf6c6b190ffd64ec92e12d9c9abf06ae3d6c0dce4cbf00a27e770f57b680fa12e877848de387b7a2003aa1bf625f053da6ed044da9a733ebc7757c0a7cd55d4081f16e58").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_364() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8b579d14e58f080d5cc218e8ebf0928af6ad81809c527e541b60c94b9c1be2253f785761ae7807f29926a1b455c4b818d148a469c91067e590aec39e20bd62b1d78f1439a83ef505f361551875c36080589058a40348e18c7ddca953ef47a09da1cabab60d233d633777780bb8027d9380600244120dbccfd168fbdd966246f78240eb52942dc8f80c3567f82fdb9cecbcf53987bb216d2ad184e94dc1f263fb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_365() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("49d4a50fd17cb1bab6206779195674800096bb6dbcbd2b5d2ca076063bf1cb58746171cd7a4148bb1baedf118878a1344203a9807c0c624a350f5e2925ecab5e848e659208b4c943d2dc4d8a2d5459d6f3bc11130ad59dd3d2e93a1422e6f815ed43e304db97c9255feeb1d228b42e45bfe4a6bacb4063977d90e4c732f1c4e811f602f849a52cdad0ca740f3d19b30c5799d1ab5021a9b0ff8bb14e4b7a8f4e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_366() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e14288cbafb3a6c8dda3a22d2d02291f2340474a4e4009dc92f27e90f958b99ff008e5fa5795efa2a1b091beede4905961abdc5ed54a1f17c38c133d434095356aada84f478b09809a586fd8425d8ccebc808062e9cd69dd9859c78ececfe5577a4683099fc6d183532520fd5391534f3123f27d99e18c90c3c23b13c50e8d78599e396cb2ae6f1cfbb5769536212d1c20ec6ad091601741d7dde82dc8934c9f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_367() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("163e47d012b571b478ac7c09eebd47314ce98eb6b5dbd4bc9f20f688685ba528c2ff8b705cab211169cca9af0788132af27177157e2c5f1c317c0d3e3af5983a4a1853d16c81edd39bd443d205f0498091912c83450e7aa7106464daf69c445c6e0867334126e9a99edf70ed756ac0b11dcf9c5b6456fd21179b88153d70a7e52cff2a13be97802ab9b7ba4c93098e3f05010bcbeb63dc94d6df628b41a24d07").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_368() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("537b3ed8aa44feed9e24db4c28f63dfbe3fce67aaf3ebb49f8e6a4e9bdecca1f3cd0cc842f72092072905c1a4feef8064964ad5ba766772e1ab7810cd0eb4d09fee24b819d439c0e86abce752220604975037f9c3c6ea5a862e9f3e4ad45cebc45c01e8f4d65c17b58d063e759847be91a49ce4e93facacb43266ed58538e9712103e2f91ff973b5f99c11cb2db227c494e329598285dac7cfb9130d68ab7fb3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_369() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0c43596062df1cf17f4922204f3eea20eb90baf78064693046e8c7e0a0efabc37d18095c751eebcf1dff71885ae1eb1a7590723e00010158bae7743ad00a479c16bc8be417aa1c6431ce6d9f1c7b1646dc330a95402001c3060528e730f58aa8ce99f3601422f959928c14239358eac40fbc457a49242d3af731ce9f369ec34ed2f02034033584d2cb5e02327051f1fa6f572b85caaff9162d5f3049e87ea8f1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_370() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("65b53ae206f8259fc2efb2d2c833b65eb7569cd0027f72f2ddce1bf876c8ad1ccad7bbf7e2eb0e9e97b52fee92518998226efb4296c25b52014c344dea20f94633268aa1ac684e439480be02531e6800afcb46da1d68ae3ac74715c2e2d7eb233b52f1a9f9f9f881f8a41c709b9f9e7c9ffa0e7a478bd7b021ced45075d46ecfafa6a5095a00e5136b5590178b0405b6363e39895d2847d4af732dae9868fd59").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_371() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("32691fb2b3064305493bd287f7c5895eed0fe3e5b39718cba9c9530f1632c7fef3792a222e3ee80af7f581ac2f545dbc3563e1f0047fb95fd1cd325b869be6fcb1f931e3b25573f1e336504ca1906a72dcb9ce0aadf24f82ae7190609c0525fa542d37b19f5e815df33dec19ef9aac39886fa1b3f5fa432aff8eb29040a6a4d02dd1dd7738cce2a77632c098726117eaf29691a51bb4fa6a7da5804f0d9e1079").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_372() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f309c2f4b2d2a06d3751e38e9a160c2162e26c98f40edf15988080d60fd520dda2d2aa6770c4f9c7e0ce70517ceb709966b2630ae9ee4ef8759f061e3772fa92bffd5657c7079fdc96cb1ba1fd60472c27774154cd3174682148d3b55e4bb13d411cfc90bbb14d945711f41c415b149b643998ab0930223056388752d9ca671ce73ceea5e77667e11d89d732a62327cf9a1bad17e4ff11c5c3dd8bd5798e8f1c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_373() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("60aa388923db329cbccbb93a3596a077fdbce6e31882b8f228852dde3dfbce7a17d1f0bc872bd0b4985712030a36a100aba32f13ed7b0284eb391fc10a5ef5bfd9d304d1b65a6a99bed95ff7f2d8640c6a4306185a47d18086b838866a5cc46cec7b62b3f7334f1ca6fcfb3ca3d6472cf239cffb902159864e004fc011377a8f5fb2cbcfe74fbe4dc928789b4988f66bc87096ffe4defea05f2d888cda621e24").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_374() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("89d6782eb9a519c39975ebda10e98b19336d515969d6dec359611c8f413204a631e8a23704bf5b60c8a83095efc467cb7cf41677269ed1926816a1aa3ff77f5217508d6ffa50d9f9545f8ab5af324cb6425ae17689dbab7d67542631a68baf4ca0a70450c380cdbdb6d58a993185f97425c5c3310a0c9dee3f3cd6d4a3cf31ae4de51a478e150cd2aae2f71cdaf08150c31002ee1c9aa9af0b10d44bcf27a7e7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_375() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e9984f25316da4bacd4e85a9687208a7932fe283d3c1636c45225b1939371497b8f3c1b1691089a834c0e20dc2640f03759e59035091067924011f0afa4aef20659b67f490694dca751c065a4e2c23bcb027cf5037448ffbcbe5e12c226cb7c6a00d532abfdc7ecabf77069808c128c62ee71ccbab2196dbb6a5b2d49e4a61d9c519082af65814de1e16e6ed633d66b799bec1c025b631b2dcd9daba5829d042").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_376() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("cd0b9667ef23986477526efd9f4788869d930c27a84ed13105b343bd476a16f78104d760cafe3eefef44accc2be13002820e23584e47dca7f018110446285183bc7fd31e31ac6f7ac4b23337dee564216439e40d26a366d5da77ebabee55b8d930444cd89035418ea0e7065d0d1c2af4e74d98000e4ccc7fa73097525f64e20cecd72cbcb17fc06d4c2d508e978d73d22d05cf30f546d470bce8e0f32608b22d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_377() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7d37352609517d4420730f4fe0c237e321e4d7052e8f21b0314ad447e3773d071b22b975b43509d4e8011e7186f37d310b3c42d08de2706fd149811ef651c85e9c3656e192de18ffbd7a0f0ea6aa6e8ef513dda03aff11b9b0cd24df29f50699960e72c21d96ca68d63ca3ff482206fd7c354772e07072ad859c2179af4c2c758ed89352809a22df259585d62e2fce772cd0c9de63c421419f8f012d867e4113").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_378() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("72f9c226619a601b0ccc9de8c95fc711438c9c18c244a5901cea8f4a332b05ad94f9b85fffbb1960f253675b6f4db36985055fff082d977d3f11f8ec57e357179b9ca0f7bb3d08bc157c56a0f2d6484dbbcdaad848d509e4375207d12447e0f7381555db509f3a5b8383ce9233e16a0f10156b94229604240f89830ee99b4fb824bed852a433ba03d3a4ebcef471c857f50b83e9c9cdb3809861380502d57f9d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_379() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("22a48526d4227fd1d7ab3894ee9fe0923c56226171d98d402290082f253b369f8db737b5ab4718e00295ec93c315082015a1f4f1ac5217985838369ca4da345ee367b48290a5adb8841dd789ecf9970cdb0a784d9075c6289cb0eaf0115bc39a7dde6ebb28262a50135594a785bc5ed2e4b2b6c2be2726a7a44ceca805e4263840b789c1777416555b6568889c2eca70e9c603817b74e2e853b715a219194356").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_380() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("34556341d6514c01e5ea11585ee162dfa6bbc5ac064c43a385fdfff5caff335c23f5cce4916328489197a64ffc27dddeb90a6d3e5f6accb7d4c7f40c07752a3a2bd0332181b46e06091f5b63df1fd2100cc5d332a9ce95cdbc4f6a21a69b950e7ca800b26b1791f4181705844d5be3e9775ffa92ff82809f778e6e86613817fecdbc227a6453f482e6080fce728e868c5ac725c3872b2229a7c1f6937f3f2b6a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_381() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("70dea2128f68165671630c0fb3f0cfb11395051183b1331d921bd038bbcb05c8bf3834fd62b796f32c31cd8e345350717c91d8c220f66108a13a1f36bbd9116d40dc0357048526de18a54ca8fb8373da595c2d68a0ce44a75a1956d7fd0478b5d93df642e47fd29756434eadbca04f272a3e2bbbe782e23fbcdcfeb675cdf306700db3790cd97ea63a9b78e38db0f17e9f849b29cd06d8dd7d02df0bf9692645").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_382() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("dd781c19c997d884bdd8ee85a7f2205171292a8d88a071e0d671e95131a0a2fb229756705c6990f47662545505800ff76409e7d6990411cc8c4d49473aeb8d6a479cd2d4e55da06d6149824ca6204df838bb47fef5a808bf48ab7a598842acb1b340a098121c76419918c3442a1af2b0d4b95ff3e8da65fdd3c483537a4f0e151eca0c1c6749c4cb9b855861b76492da237779e21465251874f4d9d7ac199be1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_383() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c0dd85fe5a797f24f7bbd844ab88b529ee5ee697fc60e9a2c4b5a13c4c8cf4d5b1352dc4f2ee8c4a53c713a834638609c718e303b442151bc2432ad57810b6de8ba8e6a1a22c747a1e558b07c1677ba6a702fd424f95c469198ca27b6cbdf3a797aea7d9116978b59c2fb28ff74544878ee958cc5038051eb44b1b72af9a3b62bc66eb5a910a522afbefdae1991e498eca2254b17ec27500b4f9fb92d1e8c846").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_384() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ee807d06a31d214f16a56454a931357b19c40602f549bebf4b96157efbbef5a44660d2398e229ef24b4bc4aef6b18b076a7ed80c81f67c9e540f51f83e3cc495ed566deef80bde1bd3cdf80a5ecf471ca5e22832b570f613f609e8f825b23f5ed054faf0e2dc13bada783293861ed14e095d006a0c698712237083c0e1d2f90053131592b0c740eb08e3e9e681f65ecd146008d59c1143a83df2babe3c519260").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_385() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bf435f354508f3ac45ad0fddcbadd9768904a805988a53d4f8d661d19d6f87e08847cdc02b46f91bf8058c4fd1c1b11f586790533113c0f85ec25533d451077b090aa8517cb61b18f5f6dc6412e0845fc0836562bbe07fe558db9a13e61bd8657812ccf147a4c95db6b592e845c59bb389ae0849be56c2c412d4e1a2d97e0366ec5246b433a6894dcf9bed06551311ea98a22cb9bd026d1890b92e92f9efc21b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_386() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5165ead4c66f5deae915aaf582782b0a25e4d6dd0da984e9dc3cae53cb651a227ade95b54caaf0f1acef132548b6d584286407c5042fd51f784ec91fffc80a578e4b5b085b0de09a291905de080725b70396b17c4dae85f3a6b586e44fbdaa9798dfa594b5240abd9bd7cb9f344b4c851c2ee06f8620c6a2f940e0f54faa5f3b2983a1fe3cd03dd1edabb7042bb1d65c89a3d320cb70c2df5323307e81d4117c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_387() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("16f2f0f3f087b231e38df06342b072e4ca5f86bd58cb811b6cb3fb8519c6719f2ae03ee129cbaa3df8fb1978b6247f9b18bddd129d77722730eccb9de5e2f26801a67b4a8fe976bf088fd5b3979b5e510c98af305b07472b698ca0214614e1be26e53209c9243f7dc2b9ee168296e40bb96a714a8b28e699fbe0d8d01192a4c72e0773e8546a62c4c75039019eabb02aca09034f8d392d5cad8c65ac53a4c555").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_388() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("094edbfb06eb1fae4a33671bd29e00e504308cf857e39859dc95a0babdb122b8a31540359e7a712022cba8c16e67898720afbed2218079bae06ba525b70a08c24e007d74c11ef10ffd990ca5235c283d7db14f400f19510eb72ad5a3bc39eda1505a5b5054df4a18fb54c65e27112f5b723cc161b4c1ae36a9ef21134314357b5de12d877e3ffa0ab6ab7e18571329c252309bb69572fc4c72c39211ee450f6f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_389() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f3619b219488c244a43d1588f495bc3a7b7d01db6821ad314aa7464a430373696aa9abc201f71e51b9dc5541029363ee19041b553f41de555c56b04d837b283f3f6b9b81c419a98822b8bf15b1958ead6233a98347bfae097d0f7a4b2048f366deecd2c4519ef9a411fce232ce2989556717ac606689840eaa1fb39e6670fb1ece95c1e4e6578407de9fb9fd91baa937837dc3c3b212a961a5795fe34b55c5be").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_390() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ec3cd6d51d664d26447151ca19c6bb46a1e5011ed8b3f0600ee37916700e209cb1118737c8bb006e224e8ffe51292c1940e4cd990afdb1014c27590172f452011407c80ae43243c87b9aef0654977163dd49a1f313172d1049f3e770254c5d20c811477ece7cd42f5a57cabee55f382556dcd1898cae4b865b7b57d36d2e366d418608f83f570f63f499b2081c751fc06249c246120264c570ec29fc3f09540a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_391() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("54aee502fea4c9f711288beaba190d213518946d13a307d648bb7a211e5dba7b7e8025424f2eda6d7939bf9e28af1e75525b1c39e5ade9788a10893230dcba557970c90d1634a488fb44d1ba1d4ed05254d11716327ae5aedd6b9dd3f6d4a8338190eebe87cad5225cd95988c6ffd4a5245d4c01c0e0264cbab40ff0ad57363d65b529c1f008717d266f67b6bc269a55438c40f660485d18e5765f17e540058e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_392() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e9da01bb3c216d3ab63020394f00821fa441cfa7bbb7d0e8c8b2e29cbe7b8ab3cfe029edb5ffed4603b1ea13ecade19595e136a26e7d03a8920715bffaa905079e93efddbebbf7df1406016899cef0c631ca764ded72acf7b5f99f026d058aef855ed3964223d2d9f28d6c84081c2bb2647be2d6fee60e44657a05f04255a84691637689c66957c931e47e544a74c62e7b28b70421d2c30d9fa905df81a6c04b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_393() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("77540bc4449a275ff66108e7698dfe75ed46eebdc718102367c4dd7475f6f654c206d30b2f768b8b04317a8092ec6226ac8c4e0336bc17bcfab9f6b249edf3504f5d940c66fc2ced75abcf5320ee0810f66318cfddc57de7ee959a81ccafa210cefcc1e1cfe725dd05b5bc75e1067e0f18cf9ea68e69c527f64f82d61ccf850d2ba8208edc077741b9e8c96988168fc5d1fb4c422820dcabc74d21f44761f14e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_394() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2d0532ed77bad9f5e42b61cb800d374984c93b7de829c7427580d0ca3fc16ffac7b7ca845791eb8c77bb4c60f745e312b0bc75f799d23ca74182ff991a6eff60ddcc32a65462a40abb081a666579fa3e84afd5deea7589f5df6458dc450834056f14a56c8979f65052a3aee14b735f3af8acebb976bd5e40f200f4ae5136351eb330f534b25ca09c32db029bf6a7c68cb0401099c1c565b32cfe7e44586496ad").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_395() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("074f7da531fad01006af4fc58e1e9e09d78aedf0f31ca342567d7e79fca21dc969f55d8089b6088d979afe0f712692b6d33d0db4f1beab0b9018b829b9af0b5e1b29646fd8be55fe35a2c177d343af10ebc36ec1d2ff25cf71d62f32299dc4721eec05f756a4e9fc2eac45fd7118190511c3047b6251b8024c7e0f4e568b2c63d7a818e8f23abb399a03e742aaeef1c2a547be424c315171331d6676bb2a06d9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_396() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b2873911f5b6bb4487ce5fbef58ec05003485870a1116a3ce896ea88b5be676280772037a0b80d3273619a39617f5d6ae1d63f1d3c131439e6a6d97aa8225ddad69b143d23f63f5a3f22894347f304b2bf83fb8d8bbede7e15b33da9f6aff7b4a1128ab2e90743befa7314f9d80cc9bcfe7993ad69c2ad5fbc7ed3323692436900c770595a54d0faef6e8d74c92b0fefd68d3385522c698518c4eed5da83ba51").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_397() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("293f65ffd2d69e3fe8f1ad1b2d67d907f6c68ca6c3c2c162fd3045e5c4fd3f827e9330764a5da918d339bbf09b461b3b197a16ac1c151040e9ecbd67d6caf69f434f1f6ed5625e1074252e96d144da360497b1540771f569bff7a19c640025c50a48437f16cc23c98082ec3ac28be70afa12e6edcf423aca14d8f06cb3035faac5295c43f24412ff3ba02d0fffda96bb422a5089c5593b453ffce27147e1a738").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_398() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b493ee232e2d7c662d04b6219b97f32fb4b9b6ccec581c49214ce0395073a4da55a0cee4e0af81bc3b77086349115911e2c8d9c6e47be2b189000e2461d3441eb3b72663ea7c2bcd57ff0bac8ce1ce71f4215e59f57128942ad33df6f6fa6a7d17dd59238f77bc34b56801ec24c451c4b02f4605f4826841fbd0d961bb5ecdb0a39cdfc3fa322ac10bc87711298908c9ed8298108c7ca1fd1c9bc77a2f27027e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_399() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ec05638bf02c3247e50603fab6e21e207de3e90afee89c0306f2f16af8e9299d4eef2b493d790fda60a7cf6e2a0a78913e4649ceee687b6ad7cc71a9ab0c455097ce00d1643185568e1db2f1513b5e1be0a23e5352ab7f82580d13e31e3eba17faf9f848bf436a932e7e216933119760b751176ec7fcf1f3b6184b2547d476edaf9eaa27d3915b8f46d7c639fec98a30c1056b310fc5f78613113537767fb760").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_400() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c5624c183ce165fb0c02db31a0532ec78bf70b4112228eaeaab3db7e2fd42a6b0ab6d62e0bb9994a1f50de6faa68aa1d4e0ebbd11382779747f6689a0e5fe08c49a2c472d8a3fae9130adee00956fe1d6feb51c697db8500b264c6b2dac039a42456a7d4ae7ee0fbf527b34d559fb64c46c83984d9345ef5a724bcc62b3f2b7f27d959960401db02d99253e74d711c76c6831696ee8412968e055ba5d1452d26").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_401() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("41f2ef7d2b48f8c1dcd361b29e37a1fd93b6128cc3fa9cf608c2eb633bd170980112acecc0f882928add5c5302d3c312afce944c9bc7c6f8f361766aebaef421b4f6093f1048fef3dbfc511a8f6a814e94d19ed26d821f43c2b246a37f794e8bb07422a68deda587e4b9f7104524f387ef9143c980441d6f3bf79a425682d9c49c64ad8402728651c00c116cf4d094f79bbac385ecb0bb6ddb6270082025726f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_402() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("23ac22ca561b99d0dfdaa1a37b4e81f466853bea8e73f04960646e5df70bd84ccd672a7b26240dbcb7596a38721451802a5a773bb0fe52100c92190584ff67d9790d1640efa8ddaf5bafdaa00829c4a55ea67c099b0115409803c0f291d5126d2d9f5c32132ea35972a71b00995418ee435bc9583dea2f622bd75a3522a31b871cad4bb8428d2652402bb500433edacfbc91a07f3a7c664bf14515b71a1fbeea").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_403() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c5ffdbd70e4e38ac5e3eaff00eda75e8b0bc9920dc6ef05555c83b4f4e1964d4768ab38ffa94bd1986d9d6d3af7fefd7eccb2aacb61a6ad9bbf9244bb8506bcccac456236277fe6bb68bc90e35653f4d75aaa9d8f188f86c039704a9f690d3812c80e9b762ce9b883fca177330daa2f8279ba1ebb45855b2f47aa7a38c6daee10f51a2ef354bac2f96d3a4b8e012bea0973f94d22b1ba50c0a5ee2947dc765e3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_404() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7bd28e3400d84132902565604fbf0364c0479723275bb2d7887e20edaa1c03259c9562bcc9ab6720fa85ccd133f380058204a53959e284f53e7fd64c880a3219b9686e3fe92eac1df341f96b87d2138a5ad2d0dce3826f73defedabd461927206c88b7b92b67b95dab4217cb9501da5c348a8af7e212c99723ef7f1daf306567b6847e37dc11d961c28451a28352da2166510f7a4981dd5faff8bdac40fc906a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_405() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d7a2f4e5d8c5f2836aa3fb36487ab7e4c9a8e91a8d76584ab512710b35afe267cfdaef30952cb4c80b067e2aaa763ed8b03536048162001907f08c4cd10457b8b5d80bc6580c26c70c3c187464cb156fe0ccb184305d4f8570e2dde40027340e2169096d8a35b4e254584318d5d669ddb30601b9a7f44f283ac95339445b650f78d85afce9f03ae27537f511d85e2ba7ae602bf695933f555bbc36f648f05c6c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_406() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6c27bcd6e5f634ef701c6bb88040a4b5fa576e49706b3a05a8695dad78b5050f551b1a8a90497d10c4c57ca73dbc1ba21be65e509390d53f230c0fc3120c73f1cf524852b7b0f6686057ad9df524f66b08c240e88eb94d9dda0a7ea4b321ce4712127f52465abc7fee15d5415fb9cc200a93489f5bedee1204e5f6374a4755761dbdc218c5d8f7c395050475ed5982169f0e5f3a814feeede0af18e306d5df88").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_407() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("74c5d0622672047e4288dd3da7036f470f357e582a3d762167a6b31ef49391739c6444a9190006e950b22c30e67a37214fcdba11bc1e34c10bc804735e56cce4f745c812b77e5b57511d22340238e868a20d07a6729a34a7a32a9c26403427b06accb17e931f211ff3f6ec6b01315fe632d777d0992370a09e244b71827ce74d4c9199d7b0ccbd5e4143c219879364b814c28df66ff8db6ded32fcef7da3eef8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_408() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("12a28c8ca6b3c0ab7fbf912b997e1e92952567a44025dbc485a5815643caea8d9a7e02c39abda9ed6e998611bb1e8104e3f10890935892b116ef4fe209817c2bb117943660fdf5bee364762ebc39b49628b3195333fdabb04d07c3fca088843bfd1bb832b52d9bf6b93fbc245d0c8352d486cadac21cee07c41eadcc4cde2686dc8e086d88b1b17cd1c12302e82efbab9f40e92b28d069db2208f2baf1d860aa").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_409() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2257cbc5246c87f5c97a04780810dde40b0f09f4058f0dce009013cb315276028ee9252e9323f327dcca35912fd3952c43679822ef4bf2d83c48465d24563ec053acaa66729c84071c2b362261e959168e1d660de89710974f76ff558fd43a25d85fe29c8d1a0558ed7953a0ce7c54de10263d3ac3e39c75df52b176a9fa2cedf2ae2856940365eb91165c31fff238cb7ffa374dfc32695ba0db1493c789fc47").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_410() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5ce9393b2b830a75a1dd836272ea305bc1ad9c70122aa2730c8d38659ab7ef8c3ebb61e527df80e868034b35b66dbb26e146fc5dde5513f031aab1d07ff4531209dd7679e481446870ae96d1abb9553271ce3b805da3b5777e34a157fd4a4c06382efd096957f4b2f147b0ed6c5d268949389b287ef97cf6b682d753cb222c03a0b63130974ad343d9f2d9b9a9dc7e8e3275ca9968e9fe1130c0fa97c42aa5e6").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_411() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0ebb31d7ffac3ae980be54c95eca86c536ce6a0365dc2d220acd375d9646121835bde2b4507d2b21d748d33ce1fe38270b77cdb6f80a182e7da4cf4893238853958c8047c84dc9c036dedcdb0e15d3cf7f6ffa48807ca2e41f11d3bfd2b70447fc6b56ba61be01402930c7a209d84ea0c5b04c09e5345fb3df48c0541e867e32f2b7fca4549b1a48b7c964832edf9d60ff55706e3bedb2f0283bbd5409cc530d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_412() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("28b9fe1e8e49827979077c0c5ebd6a80952cd6df0de7b3b5ea740ac715264640210a4ef794b7a6b6c1d04cba2ff9b60e2c1cc246e0865964efe669d6988001f4cb4b8b7c0076a11c6e54d37139a1ac50d1b6873cc16a419eebb7682638d374eb94c5cc0f36daf52e774c170abab32367ee59051499f8545a378a7362a22eb11f36c21f7b5f38a0ead582c9a09e11e9ba20a52ebce44b100a6b94e44d7af81984").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_413() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1943be598e9c6084303b824714975ef4258eaba6d3d1319654505a4bb75f8f7c52605d15518306b4600e45e3652e5c9285464826bdde5192bf6694757047c36f029fe061072f9fcb87266f5f8e0737b2fe3112c44ab26998cbe83f6e4465b4455a907f69a0db9e98ff8f2bb7694a8db5cba395cf37992d8feed56b24782b30414430602117bfb06a8dae85e7213398454591464aa619b9d2781fa173a44cf432").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_414() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bc76cb6786e403388019a1608af416acd5c87717f2bb301558a4552505e8046cdbd7570c8bd9aebaebb2c13bbdb82265c100dde4bb3dd4d3dbd460efb7aedfe43c87fa335a9ba658526cd46405a6bc71dcb7553dc73b893da528a79df6de9285efaa3046519fa02112e83926d6a4dc0d30dd830c9e26ee6f41c74b4347d33642f2bdc1502a95a02a3dfe71f6d06a6096f2579d9f50dfaf7d404231ff7923a33f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_415() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4f797e73e2fae1e3fad366c3317066f577235805de5fb0eb5bd404928a3e8c40423ec66425f0ab6cf8e81e07b351a955a1043f8706f0a9a290ad02dc5a0064776ba575d363377887a80b268b35231124f43967c729cc9cf5a1537bf089934865ca9321b71918036708aed4caf1802902826ce3b3d707f56b2f90adde5e6315cf79270ca3db0094996eaf9bad439aea86228b39f5a3263e90bcaae247422658d8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_416() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("93bcbcf95c23f68243fc0bb0b40cf41e8fcfffc4964b590d80a462f190052ea828b2b65a714bef969826032fd65782884bfccafc706c1bbdd4e52949ba051b65d8cc85e4f4ea28f10b1a765dcac0a8fb70e7d735617337a8c51077d7639ded7ef1495bfc9c096a15ea5216f99e0595dc3ef18185d385b0c13c586daa4d5a83aae8625a276da19e1fd470750868403eb9ad5b74c282d1ef23444400753fe8f921").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_417() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9fa2acb7ecfc82bc734425f5fbf3442c148f5657c779e91ff4fb9483897537be2b73ee96dcb27f582de2d97b6fa40f85e6995efcd9e9ccb0d88a81aae8ee5e9a03b49eb93c9a3670406789c0a13e84dfdaf1844b40830abc667ff60503b6a72f51fb2ed30b8364b1c6285ee065107b1fc23dc5c6545e8de97d0a7c99c67bab458ddf9645f8d2747e31e3f2a12d9dbcc5a4efc7372fc7f620ade6070296c3b6d9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_418() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e19876836173bcf08a5417e21b8f0558598e5367c44d847e117323a2c5d9a627e5f39addb0ca17dd524265db296a354beba7026913859342db23d4a35caefb31441c0ca958d09d6a30302460127eb795ca52cfcc2518fa65c21db3a70e92ec039d2e3006803044dd4c1402bc7a81902f2520a7b71002cc8526888c3e7cb8dd786e4ae3088d6ffed4bab4bf27566d1e8429a2e8edf354beca44a4e5def4bd9ac3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_419() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("12f7eeec37fd098d543249214046ee76362cc629a052979b7330e244053e33f14dac148edb513653eca39046898b2be579874a39c89690b954bacdd0428a6f594b3872874e735b7a6e482b310982a5f5959ab2f32fe26d2108aa5ce8e97a51210a337ad69c441b28171fb97a97fb7050daf70608cc4cadac37caf2ba2663974849366d5302ca0ced632d287fe8c6c2598dce152d5ad5c97dfc54741926507659").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_420() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("082ef4246e3c49fa5701f08530ef9cf3ee5cd55cf163ddb59bc6b68735f2e077d03316eb52c86944b9c1f06dfd2fd53d51f9cb8197352a6e6b83528c5e0a747b7cb223788e1e5813bd603c475da52cc836aee2ea869fb52680dbfda68ac2256cb18a8fa70247918dcde85fa2cba56668ecff90b8ae28108f0f7a5e8bc0f41e6ab65e92bdb0d5d47ace350892e1ca7fa7a038a8b6c4bd0cbc28f45ce1ce81690c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_421() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0090ecaa5063002181adf7bf36385755dd4b4dff148d9ef9d8cfbd8a764aa52696621f276898daec32d9db5ad7c642b30e867dfbfbd325570d450c49c70446efc558801baa10bf1d7f09a35c144020738745596e2e3501ad365ad9e382e1a344c9581c4a9f1e9668145eee8ba6bfc74ce169f10787e15ec340299d0ad1a5e61d9c6ae2980bc2a1e90981bbd09e38294dc316791002a47a86217324db87db0b3e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_422() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("aeef804da5e9adf5ea194a37677d5d32d4e5ffa28b794288551562f388dc6db9b61599e0298258f86c5113c6924929f09f74eeac3869f8a2699e705555fee4a06937bf6ead57863991d4a7efac59ec459d6dfe00cf288a9c3855a100bd75153c7fa7862643d02de142627d8548567659622edc525274b26d443045cbb7f82d75038da49fbb748e7697dfede047796b87b874f27ba07b5a38d8ad2597ed351cc8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_423() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("039349e99c452b855693db698e44b8f1c61c5a9f1e68c3fa5af642ae2d6719efafdd8ca004f316fa1505cb4d171dc45cee781e3a35b11918ae0a6c446952bc4ffb9378888237b33021602189a51a5a0ff64e8c1996bcd319f592901bb1b27805fccbd1431fb18a8c80ff1cb2e05bf1b69f3d1042150c888998d5403b924109854a885510fbf6485cab27cbeeb3156219e9855999afb1a14c25564dc98cab3a87").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_424() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2353dbe9af005bafd19e8329f7ea252d0d987cb60622ed0e7de0473ecd2ff3ddd0833c7f6b0aa7918a39ea3026820196d62bd2ee17a738723c6c0dc786acbc5ebbaa08bfd8c17b625678dfcdcf0a9ceae8fef687c497cf5d5cd3abe5ad7fd7923b77e2a09ce5f304091e56c7dbe4ac592d9e70493dc4daa36c7849f1b4d4cd7b7149df863b439a47a91903ed7e28c5136a04b66de245c536f3cc2626e14c93ad").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_425() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4f0c1ca2fb8574922cad5f038cfc4d461306fb24ba441c034d320eacabb16607b301b1fa7a00f56c46ee4c436a31660853bfb993b5120bc854e86140a7e2015e531d1e4a2ab4b960ecd8df12ce279f4fe00da196d35517f161285250d032b2e27384e81f072783159e2716f8e291317ef002ab6ab55c82ed06d1e8062648cf43d998fa29abc9af61fee37ae166509b894adddacd9a3e8adc7e94594078bd034c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_426() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("58cfb2d59a0c50281618deca85d5fd51f7994dfbefbf07143bdbb927dba25df0f8947f00d28aa2077d096b5a7877136fd9f0c17d0df7fe87433c8cc7438df6133f71fb1c8b39c643582cf94dab5db7305f5cafcf507ed347d0075f07fc94386bcb861d7b5696cf46e9339127a034ad8388bc4409d4526c988c1f5712901b70be5f981f4633e3aa9836a141d8ab88f950a1ebecba044fc9a8a2403840b992089b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_427() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("50edea7a796923386ca84d0e5074a16964dc321c98ca60a74822eab4c09d601396ad63396d5f1071ec4edeb3baf4efb71bd26d122b82ab584da2d749e985a60c95152c587319122bcabd7532560638092b3b48d613eb91c899dfe3e6b0686f9bc88bd63de1e81956c7d34eb4df22000c2816e58be59f8e1da3d825fb0710f4d096d0e12e7634589837b730288a75fb7906b7e1a7849361e333aae6c50103502c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_428() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4cc0e840670e9a702ad493336c99aff4dd7539aa30115342ec9b6a6b19afcc1224b13e40215f782662ef6b82ef09efa9fc4364e4da68a56b650b84c696d544c9f92f8be81566f1bf6ec9f3f22fea598863fb241919dbf5eada87ae0f46050f2e75fb2cdbad399152c3f4dc8c963dec8f6910602644a4faf43711b2de31003e0f530662f2454c8d5b1416cd651a72d57c111cf21bd622809dbc193d1aac182508").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_429() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("acd4757343b65bdb4a5f7da9e35211a0ff362aa0dfbbda9a3b7b94e0650fbc2be0f619cb541bdfbdec389ab3d8a9b3a3eb23a4cf73fa55303ebad301e4c02682eb739e0d9716aeec83f0ba66476918ba82adc5a52bc5989373502748494b045a2c8f0d3e6137576f8a2210241d5c77a5158ad449b43a87b7472e1e1399a7d6c270d9837ad544dd944251348a11bcad5e454e1ca74cc800aae110c90c55b8a841").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_430() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("611bd7fc6c26895221e262a518e273feecba9fe020e5cb7130c9e9e5bfc42497b2c0325af8499bbff3921e11c872773cb6efced5ec8c60da000999ff31531a704c739e1438d45a72c6f39fe1c7eb5598c25979abdca8639c9873c8a9279a3e452f4c888bbe591f73ce44f9db8446bbfc8775d5061157d749f86910a45f5eaf5fe7b042494b9f2d7c934e517beae51cc8ec923933f906aa74a8fe9cf5beab647e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_431() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d2dba6d7310ea5e142b50c05e36399ce1bf2f736185af8f9afb3899b1ed09db1c351a78999a3b56d02fadf0c518bc1fe88a131e5dbf32b32c32ccbe9d8611c4994183649519ca90ba0aa2410e849a0e4bdc18eca9727109320420f8a90572c9735955f6bcb428ff2ad61cbb73450fb2a33eb9343e69efb03af0a0f490d04bf0ceb6e5ae6e44527b5fc43a8b678ca604547b58ff1f859764476d022a7a603a337").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_432() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8d26a62a9d74d36015d8864a7dae88cecd0cbfae81ac2bf8ee187d281059b87ede115aa202478e9e4a0826a1584195906d03d0f40a6a5780fa734af2bd1adc41ec28dea9598774287e18f3191d21c6004abc11ab51a871cce01342a6a10a11b0e667d0706a983a5f2aa534f7d8562e3d0cecff656696bea59606cb37c64f403e85b7b337e1a3caa1075f030e0e11019e1f42093c947b4a7723f231abd0eb6f90").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_433() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5e2f6f580c15041631cfce19f3096dca96f5c5962d6bd644bbe338a6771e07af38746957f2d71211077dbc6a675740b31580aea570dfe06c47c908934a1a37f8e1877844cb44f6bb68c0a8bdfb0947359cdce895293ba1141698ec2eb8cac0d481e9def5b4d14814a9c45e69337036625d9e9acb59f86bc85312e2c953820b9d9f9104f6039272169787184a9d2644cf8b0985e6516722a5f13c083505bc6ac6").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_434() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("cf30672388832a1e79f683ae38a4e82aca3fbd5c925ad99093df7c80f402d88a45a06cfe6ed2bb9ee52c1487ad00ec42f25d31b1e87b9af3db6fb50173f582ea0c5acd22e355d6418d5ab52a4e0a926948615694afcca4d1577702af8c483c0cc2d237903f88d37521aea275fafd61634e4d9c42ef7decb6a5f62fac077ada334a32ba068cccf76283b51e8089f05d73efc3b3c22bb4bc469f1fa75cdf3af39d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_435() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9f6a1add40324ef8140477149ff47009d8b9bdd6499bdde20eee5573c3d453c34270feae3617f29b6efdb6d2ed549b1e25da6592a9b03dfe060e7b12a3a208e964aed806749b63a1eaef8a893d4dd57645d9e679ebd5631801c04f804d18e331ede6ce55925ad4255096427c7bf6a0f00cb4ac8182808b11b53633ef280a2e89f2110307fc2e6ffe65a5130e0592f81081c19ba2779778794db7b6ab5e215bfe").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_436() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d079a5039efe94f5aa90098e0878b02902a4e4a795cda54aeaa6fe5abdaed1f8e1f28b7ee3d58add4f6efadb5ee73172c9be0f6ad9dd30a79b3a48dd60ce184e23d0d2c37cd93264101ac062817346be0357ef682c05fa44d7db7f34af3c0d5fd50057e621cb06229eb3cf613d9a0041c7d9e9d5728b6980feb9775ad227ec94c52dc06ccf90eaddabc9f9b225bdd03b357c5ecf903719c77752dc7b848bec9e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_437() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("69cf33f216c2d35672ac7a3d9765dd1476505989e2c07c090b91887feacab08d07185c6d696f973ae908892954a88ea09188a3681721c212073a3efadf28c3afb0a263df832a7a66a64f1175574ee64f4f4a36a51948d2856835567a311a4e0f5afb057f2788bd2cfe2a2cfb84cdb619a37b7bb0527398a64bbaa34ba14ba9b13cb5a085ee38902c2e2eb3c060ae947445f1769c7ac02961c04be6f479814dd4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_438() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f31f9c9637f494a2036646a1ae7a217d2a94ecc70758bc1851313d073cd73637bc2e29106d8b58f8dfda80f9bc94dbd2d4524c6101f9884b4d77a80319b739f4334bc77b16c8f01e8ce896ac138852f959b58720edda51750a52650b53bb1c6a6cb298683b69037a866d0d28439dceb6b6e2a8bd045fcbcd196196135c7f69d6038453f79af8be9e4ae147b4e5b59c3ea39eac6ea1be2f71f46208c1cc4194cd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_439() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d0b9295aae3e97a90643dd0912195ff9988227a86f4d18b296ed8c27eb7205c8b762d2488082e162337ef3d9a9ae4287c321f85657cd4c8591fdb065d2a34d5bd7a0caaf61b66e0b112aa27418288321bf9263e52ed076429ab8bf11d2aaf4c43a84d1230773632a5070513ec5aef884cb6fc78cf40e90b8edd30a197a52c9dcfb1e2f278346b241b0824c699bae624cf2fb6062923a6463cc25d2424b617820").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_440() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f793e89c3b67baabd9bc8fadfadeefc0c74e3e999a456ebe98144f2669c8b908d1a65de82ad071093eabc85aa536fe367479073297f7926d7e8e1e69f869d19063b6088b5bf78f41f123e3316be28f7f1b263e52f6f26957b112d862036e5858ddaee32a2c8df8760212394faebbc07c864fb283c8b4dda40519c659aad1d808b585f47628112a9a8aa843b9cf3c2f3a6d54778e08ce293da3cf100b2fd24117").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_441() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2be0ef50622f18ce10f661d01c1594ef229baf8b0fd9b96a5b0e4659e9c81edf1b20e13d9c4de5c8542d5a9c0764f8798575fbb71fec92cbc326b1e7f9b4537483d6f0c0f8a836ff6a00d9e756dcc03cf00678226867d31f5b0f18102c214814bdc64ae39bcb88992dea243d34e80795918c79d6752efcee45ed5d145d8e44b2a85b5839fcfc07b5693411a52e646a1fc0db17dfc4d04554d214472b5238336b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_442() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e2cb17e25d81c9365a08f7d3e341cb5ce35126eec9e390c59db1abc4f4b689f7b3d1f8bc847c2a6b670400736d61e97f88d58f4f6a3134d5fdbb85fc71f63169da09ffc9eef1137c8472efaabd343b4994625a251e6985b7c8481aaf2202f3974f93c7f27293d16bca0fedd66a0f028d021a441935341e25d307f3c182df9e2af11a5c55d19fea5b15459740a92fb591a207e0b265936341b34f40e6f1fc94e3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_443() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7b33890c14aa3a38f29c0c4d4e47fb55a5641d84daea7a0675490816c3c3c47a975ce2a69e46f586387e04fa0a1c8f50fc1c0bb285da4ea6f9f733a70787840fa5ae84a1e59d32843d0a0e00bfc88c1dc92c9e80674e2e1c96e1cc406aa3a66e6aaa13d62e929160f65e02e0fd9ffa0039d1b6d760a9fe5662762247b0549c0697ab1ab88dc5ef703248172fff7f2592a4d1d63cb9a663d8c38ee03e0a534d74").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_444() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fd91d50f93ce21720c3cf83a9fd1ed5d8e64e5e6ae1c00a4b1f5c7da54ec87682a7d8eac64cc6d051168305a97a654c56d985682389bc4e4047fae5da3f90bd195e78995d8ca60e364f78f27cfff349125392073376e14c16055cac6d31cdefa059f67d4054398a172a635269fb834269967caaf4015fa96ec6fa2fd1c4bd598f3c26a9f9f6822f36f7c5ef67317a24fd63dd60eb037ea34a69be477315c7e33").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_445() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a5feaa1be44bc702e7d87ebcd54b003a8d394d3e5fcd09a1f8e3ecbbb813734eb3bd3b4f676edbc452ed90a81e34f99df17136a6d34d8f439c09ef1aa0334c9cea8d9743db22e6ac68f87de2096d2af55361f53d104042384081028218e0f4b208d4ea04a363dccd2169a74bb8856364f8e13e97455a8616597c15ba3a39c43686aca7280dca42241fc8d5efdd70439a04b01089975198bb2998b91fceb63dfb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_446() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("05589192892af36dccd067fa5aef0fd144ddb21579495d6ae0134181ee8284f15d8e5f0d9508ee083a6b095f90f25de7546354f79e5303ae1a0fee3392a90468cecd1800c716c139a25f296acf6ca9e2f601c753e2736012bbfdc48887a157671b689af1566f9037cbd02b29273f53c7d295df0f8e138293a46a22dcfd7250441a05c916249be2277c5f19b5af6e40c7064a830066119c701c7bc42580b6693a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_447() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c7ec8bf47ec6ea9eba6a1a2837fb21a2f06cc66b5119a2315bb94dba75bf68289b51f545ba05e8710a23cb31f26e67c13f47ccd8a46faeee4a1cbafd4a6babe35bc907b5755fab50b61f37beaab3e3d9526a36e02fc13476744878b439ef06bd1da8bc00d50dac607a2b7fd5797ed6f95149d6064e5c79e9dbfba6926897d620a08af559d66def81c595aafb96c4f742442f3104ad9f93d21613b8fb13b609c1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_448() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("14a707a5af6d9f16a822ea2348f59a47bf22b09462ab882c3230ac97a159bc1e65f6e06edc5bf8e63057244bd5a8c9b5f17073d909fc1af31dad6b365c93966ae87736ce9a7d86726154b2848b3c4766a03bdbe91b4c3d83ade0df35ed113f7ca1b93f1d90b6138482bd7d1935342ca13ef5cbf57ac85f0d5b31c5f1c2f73bddad2c3f7fde5af7b5208deadf1c1acf84e9c6c330c67505522571ab5315680205").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_449() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("754f8fefb96ad4149565ed4e1a8a025cd09c6e709c7411c9e4c302c52baab71e72b9d47db11998c3fa2e69c55b537e507e379de0395faa69e1422f03ed0df10db3a8913c9548d43211d84aa3adf7530a0f15841a5966f0697872c6d7f513d77fea0d42952a6eb2326e3e884549c3b511e2b64aab04ad730a583480a1748af3d94dcd1ae8c2fe9e7fa8da15a64a2ad9cee6e7930e6b0af6d630116aff500a16ed").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_450() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7fa60a31f1473cca39c2daaa1e236e11b5aa0ffd156ce304dfd7d86abfeaddcc22043533cacb323b047d4e6f837cf595048ed2e2850abe16bf9a3aafba4f62d3d0b8412c3581256c4202898b3361f409a7b3e292e0cee666edbaf9d169fc31189dd3e6f924d2a38e92b76b2278d657b81f88caa8bd6f6414e4fb3e388c94d2c3d6f958558d01fcd38671170bbf359d65a6c38c765038a78dce88183a93f363c4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_451() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("948173fd0aff885f02aed6179e827fd781b729e428429bfe0c95b47226f84a82470b6bd3d37b37dc2a577707d75d39dd05d08af48562d6592733cf7c0cab0f89a735b6882ec7d201af66e121b9d0446d7d9c89cd571dc5343ae8213007630fdf5f842b1f146b0a8037381a132386c307894527ef91fd2b026ce4ec1b15d6fcc6fa96443ef8bc725f386c09732eb240c81c78d1d279ff9854ad4c00d910ffb6de").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_452() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3f0cb91d17387c9b82466d646e4a5d3674157376f12ee5fbd2bc726354bbbcd6b204716c79b9d9b2ef6cde3aef24cc8b9ed22cea14a94673d1b52419f4a01085a780c34ff071acdb3d08bf38789893bf63aee04768df2cc14a06ece6a6b17c6aa619daa94f1bce8e12b703338ea43027eebf5c9e0f9ba4a4e5c5dc8795bafb79f80919071467a988f75c3f6f80870979858bddcbcd5120efdee478bd8d829ebd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_453() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1014e1eeb10a5d14ca8f8cd67ce24699ca97e3bfebc6c9a07e4f03a86287d9d25b883a0b70503be4ae868b2f6b1ec411eb9cb044e0fff446a68794546da9546b1e7f1abe2d88a733e68a9981391e1e31ad9523ef9bf182fc66887f3f5bc12ab7d03affc6aed6b9f2cc2f017fa84fb8cd137df18ded76b3b69f9da53113d7fc85da8c109133a930292a2880168cf37a4b6bec81c23ee2a64401e6dd821f0ba6b4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_454() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c5e7383b15ddcd80fd0c49bcf1a67e4dc720945122363fc3a23a83eaa3c7446b93f87019413a838e6778eee4214e60bd3742efb9851e8736dbcb0a05e50e896aa99b8c9675792200408cff7204ca2fe67165b32b26e00292f2d9868d981b941b16bd2013889198e49047b18e0312f959ddcabd0ab57f06f0fd70ce630c4823a7ff7161de92c6f92a8bdb80518bfe0183e9de52d8fe1a2572082b362b50ca23ab").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_455() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("052aaadf1aa921435603a77515c2dae4ef611ed6fe69ef5acc1ebe2672640446b66062b1785e98696a6212f1e68c3feab1914c55768171d53eadfbcd53d067ab894dbd657c04956fb7f5291aeadcf4989a0e11e45f98335072314cd6e5524deadeaeb19cfa2ddecb52ad93225ab1689e7fa692e030160d974576e551b19b4a280d3295501014be84098886706585e38f3b4ad40232c306b68a40c5ad44200c0c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_456() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b0e528edab220fe9c863f31dfbc3df5c1d7affd70bf9ba36374ea90d5417cfeb3b62dac9c0883f346fe9afc1d4e51d410f69a7e832ccbbe8473b5346c926863e0f510cb85f85a15bb4276257b53e795f354db01054dd7a71d4c699b9ed005837222f90498170a57bfc9271a9411ccdd54b371d03c0eee84a62da2943de6716e902a5f0a493dc5c1e2bde4486b2e7c0b8e1b4297171a462843e3ea4401cbc8d4b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_457() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a5bf46e2d1191863e47f7a35cd2b5655bb746f7b02f449cefc9d1fd54ad6be99272c144b5cf74a81cc77729f69f691e76d51983892f05dfb33a7f427f1ace77e5c7b5f6938b283274f38690b83dbcace6b19a1ccf8e5302df5ecefe5960cc77e2eb8b262be447503b9e16221466040c454e20a86add6c39b87ebe1e757be9e5765a37552825c922a6680bb80eb57b58db8243711f90135304b587d3bf77b103b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_458() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a61efd72f78af82de52aea92e9afec129a63dd49aa54c2e32e2d8eed2a29d5aeb2a495f7d28a693c22c41608feb6cfa79c82e477d69c952e24a425f2aaa115cfc53037b935595b47454deb4bd51feaa45c91ccdb062b0701c3a2babe1e96841e7203115213e48dfbab05e774de933d282c373938184d7f448268d528d6f285994c56a7dbbb2187cc93a7ea2c10d4312fb428564b40e28bb9f574696beb07f071").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_459() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("11179149ff9fb01c9e261a61a7eb58de0542854c74d6a1c7ae608cadb4cc562b07c8fd99c1eb12708cd3a3778ce228816601dc4230c1511aa29f74ce364cd2e0776feb26a75e2d9e210706d726ef3466b603fac59f5c7a3b8d71dade4f9c0c94bd10d51307540fc89aece2e69809ecb707a2f8165211209e37b3fd0c5070faa861d55ef6816d55dfba3c815b4f7c6b311f39c6c36a0a76e7762522f4ce8a5017").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_460() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("13e27b4e4d755a00bc39fdd7c550d00c6610e63adda72ac2aee7cacb5acb1a619de8ddbaad00f31af2d487e9fd95c0025fa300800dbfe4309c8d531db982c4354d033fae1412a5cf88215d45e63036ad2d85d7ebfbf07eb55c33186cd48b4bb8daf5b8691fdeea9c12ea7ba12ccf4bbb3f6a50c94b19ed3f5bb577fe827d8b91c08f35c1bf17ddb6017347574592b519bfb440f02b765983f32792c46d0e15aa").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_461() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("675483a7572d8364f650fe8e7f99504980a5a9452411d25ee0b1fc7810df6b9a9a99ff8e38b8b0b36f6d385ce3339403725f69126aedb2b3d9ea5ae585c1498f65b3eed60b5091471c43419bb0d71078228664f386f288d7deb24afab9a42d1c43da682a1a6dda3d873b57c7155a769273ef07efdfd101091608396a2fc956301e2158bd927ab58605b0920a002399d90d0233e93600c95675e6ebcbdbf522b9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_462() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d3828a7d814a8f1d6e30055e0c08a94d4c9f076e507a54008a7f279d59655d07717f35ce38c541b89442bd6cfd5ed54e94972cceab9c4304298e2955dd604e19165498589e6279c58918f90fe230e917dacc42b71adb41eb6ef1298a7c14ad1179f150c4f3e64d58143a235987ade020a11aed52e1648c328dfbe1b72e5260407362c22ec95bc37d45a2a1d84bb6d42a803b9430b8e3ed9f96dc725f92373afc").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_463() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a356a403c9bc38a5d16a47825e3feb1de7725f9caf3386b1c1cbf1273f0b8bb4c6a5c4679525bcdd74cb7c1f0b87d9a6027154941c8b402f2616ec67ef9f1917922f975f855a4a8826b689c95b4304953ded7b86947eb7414589d346bb13fe8182a96878b8ddd1e43bb06b3d923bc87dd24fd464313a0dccdbbb95cd2d6a9f83491f5c7cd086084a46f81dda42a7b8ee290e08b720186800aa1b24f9c3f072cb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_464() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5673ce66fb8e856cce9cd53173e38301fa03647cfcb7bffe74989e73d2e02e75166c24392b97f33900966863b96c60a959424ca3695dcdb0fa741ec3c385cd7b4ffe5d1d5563a6c2d5abf887db823f9f8c4630c192bb3663a3d135ae4cca4115d300b140cee19537f0f052cbb0ac7b116a6961e7c455efa2c811035c16a4f46f142090a7dac5eaf4112aa00409a0b312541cafab54ea62731a7535bef1ef0c03").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_465() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3ab9ba975633731028bd3a73d79146fb63bd04651134632b21f12431998cc4ef3227abd3c37483c5fcf91d16d8cd217ffe5b8e00e3776897de6770b090c2c532c4c3dea45788cd274111e4944de6fb2c54174847cc59ac08e4d69e4cbfc72d6af3811be9ea7e0500304ddd75472cd3679022315d01da0fce6f6c15337fa2c631f5619f13ede23288facc2fc88115bc746b3b4432abbf21cddfd96db74229d960").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_466() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6963b85ada3063aa8f5e1396e5e1e88fe1502437ca545626b6235898b2fff98b495800c9b28592f1b32f5608560e92824984fbd383cee019c6e85f14124d6c437f212da6aaa258730d01c18cddd4cc69faa5b58649ed82f91db0df304c5fa38c1fa3c735b2707f1ee98b7bc8893451177046d31e69585325ee30149c669bd049a80880f80e4a6bd661e66435a65cf53bd40f9333441ab787d30d5bf979c23986").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_467() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b8a65be43526d272397703411654b0031dca483f4cf6bd67eb845d2e24abb0fdad04109c36ac394525d4203a5884006b7c7bfb864a84e1b7b3a5a5bbb9f46c1ca67584d3ad07c44452691de2d643c27a17acefa1b7824ccada2ee8fc14eb6fe178b270e544d2fc90c055e221a323fed29fa5c7a0fd530f754b70bdb4a80941928c1cdf376bbb6b6f1c7a6cc81a43248c3af487cc08ab6c0bcf5469cf35efc6ff").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_468() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("32bd9d4cdb16d73b9d6799a656fbfce6d7e7599f4b7037a4c108f26a90bc820ee94f3407f4e342af1ef776b521254c01b0fbd02bc1fc84366108c1ab1cfae309e16b9c161ee3b0dcf6a73a50e00bc63bd8bdc3cc6fe187bb07c291ab7ea8983251ed5c048d267f466021fc0709114980e20a16f0f3a37e368d66e5843e81f0f6223d86fb32990f54fe230c1bd38077d2cd8671d83e26c6d124707b68bdba6292").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_469() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c4386728f5c67317c607d7310543c6df3f5d29af0c3624053c0557200a08cdc430a1570a7c58996699c1306808b41b03fbd8e1f685cbf4d01adb1e5c03a44871326568747d354a157c942732abc5ceac100496f4aeb2079e980370c6b5d88e97bb9035fb3c428c3c73c134d44bde406793bced8298f878d95490206333c9c7e4429f107dc4aef71e1a1bcbc9418cdb4a5ea33cfbaf277094be878996b5209d14").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_470() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("609443a5d2955bb536c5d9c848b48199adb55dc322e3d440b10655c4408c749d59d73f57909d0213c47748619ea47ce65c30fe9b87dea64fb0371e6bf01a38aecb0337a7af229e9027846c7490c1a6825251e93891f2d2a058c2f0deea902f54d49aff6c63fe9dd56c2d7f77131eadddd5db21d647577371de582846d18b631d56d4e0687d5a0b1bfc33f85db9ce5418f860e7c09dfc59ecada9d040681e852e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_471() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("985e1833ff6a733d52adf57b2ec29ffda10e418a63af09c765f8a8c90abb7a3bb4c587375e061f15f433a193fc0a008b8ea651d43f48825a713cfb7e9836af1f14995bf1c6928c6d1db847ca7884c69e5541cc884d16cddf01deae5c14d375d6bbb491471d2ac4dd99685b4680f9f4a7822d79dd5a9bc431102d6526247575c7068f214bf1bd26faef21c107355f0b3b6632f280aeb08d8218676b2488c5a4f8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_472() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("78ba4c89ae9cc6de247d937b9c6d531aeac3679932bd21f47640c5cdc71b98b87d856ae9c05cad13b635e0591e2b6881d6fa921721db1cb4adebd1775825cd6de9584f646bad1c44d566729bca644ce07ed452a803928aea8b064d2c57cb3da23e0c00f66d66b36cc82a48a16fe15f6b121572cb1a49ede6e14bfa37205bfb68ed3f7ac3735f8ec93f042f4af3b2489f4526aa075027d5b932a2636d52adb369").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_473() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d57c053a3b11e73046a490d3ce5a9cbe3fb46af0e3d2f68905e461aed699d88b1cd73cf01267efe9236ab58c3bcab009eb83d9f3c9f15c3070bf2bd4cf870e0ccac091aca4b843c929d75d30c46079213c68778f21418c2764959ebe3eee405d95fdfc25625bf31301d03a266b3f30e092f7b7ddcf2331a4e6b23fbf2996f198e81f5ad027e1d094135aec80efa6b3ceca6de1a37d0ff54f5aeadc1a549a8e3a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_474() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9515a88c59ba6c94dabb4a3284427480a67c12e84e066c37bb0c98db1fedd1100a7698bca267cb0d6ed38a3ded67b26db8887bd1ebbdcbdbbed22fa3a0a725c500a7ed889a991924eac674d523849221faffad716855905521ec850a7b009686929e4ed362870e53904d87cda34a78ab04b871fc21f278266f6909f5b5c949a6924526a26418b98b62a220acd9f6d964d94ce0113278440e4fd34190dd6d2cc2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_475() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("90c5b60ef5731fc78ff0b348d14d18bb50b725beb42652f885cb2d31d00424f52fd8c8bab79a5f738f38992a099074822826e44b9f71fdcc3d8dc83da388c85eb6674979294eab82e99214f737eac4a5c43ed7189a6f37a246c0dd65a2bfb92ee0e51cdc17ba614e5659a7448d4aa691a31feb37dc49890b4f35fc8a6177ff7edc7ffec28ec00bd197282e8f4d04764f91db0bd46601ef229eff46fc5a3d580a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_476() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fd6f006a4eb6459daef08b301b1588f1e05811cfe6624d5c094457d97fba2426dc5adb2f20b4ec1b0313ed08f8fabe533e5576e9e7ebfe3ce30e80ce4cea094226c05d14938d9cf3ded6f4bc25392cfa2eacac8dcb28cdf1529f4b8587066c833744d7a67d8c0de2a773ce7f1f3baa2e2fb14108dcf62f89fcfedad9e3602aedea9a49040d78771410ed1aed6fc527b37b85934b29e78c454d107b5ce3ab20b1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_477() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0ec81f3877d4bc012598c34cf93d00df08ff5fbff814d147a42fec7d938b862206a937942d12adaf39b44c3faa88f6ef028ad0512cb549f15122802d1b8d8903ff47207365dd7b9c84838a058cdada3718798452482c431509cdc70691128037e57e3feac887bc707605861d504d222bfab0a653e3d646f1a3bac8d0325dd9037cc206cb8a5e750e69a45acb2e80e3006ecd31b2419557ee4f40a9543ec9868f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_478() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4558f6b3ea25903fb87f3b8d3b39fb7b924b52c9a57266cf55f1968172a2e9c4e801b1ff565a2548e095019b6606140000f287d422b2866417b6c858be69c10f186ec1d2ca6c6dcf6a060bc0ead785c3e1186811129986c1564a1ce96f87aa9681a028f573018dee22f937cdc4e5e955a9bab3d36312c893fa1257fcd9a8b6b9a1a4328608e62a7845b1b200baf91e05af573d9337fb937563ad5f8a46a3fffd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_479() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("33090179260386d06aa5f9fd7c385f48ac843d7640ea59b549653f82991b90e318bc8d9962d36ab393ce55d282d5bf6ab5a2ff19dc1b5b46e399c3bdc7f7dc4c50b0460a5d682057851e1f23c7102fb9772edfa884cd41193daeb4b74f93f26e922cad18f46c334968b3d234f3e095b402295ad7bbd9271413e7dfc4dc92f39e5a89c847237318a5ed1721d604c39db64fb875157a623a526ca5ddbfc2ced7fb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_480() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("32342302e4640a6cfc2a9be69d1dca71a879a515ce6b922d724e786569bd4833df0c1a270da285ca05b34e94e13a60c481168f57a4f773b785f7f98434546635e5cba0aa80b2d6bf0fe3b7319d98e000b864e5cb698bc257280d4a44cadabaec9302e182eb342fea3f50f13ff1069bb747f48e5d716dbd3d4fde316db6ffae9f19289c784c203ab73f85f8bf19a8ef7c05865f9730546d285002d3977658634b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_481() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8d4a25ea5256ca6b78b05fbb1c26c3bf5158ef431493ec1e74ce93341493ba8e6dfb2aef8e8c0382c278c44333d1a4138bec36bd6eea9f9c6392e8415b817ed6a568c05d5eedc50d57eb0af1bb5019a209e18eca3fe10498f26165878df126c02f907ed59bd9214f003b28e4181435b40b4a9bd97b8f0f2b2a75e0ea63b15c9bf381217c23c65d0923c0eca4915c847c963d54237bb94a31b5647756fbcd90c3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_482() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4d1d2b22eca875f60fd0059ccfdb565e203ae539ac20434a06b2cd564fa1c39a91a3e68a483d9e0b00c3860d51346509e58b3f6222fcf977e1c4c26a2af2f639705afd0c3ccb44f3f4a51677a01b7b376d2a427bf8df7dfd740f5c3fa05dcbbd323f9bdc7248345719e9607c75a91ec8b25e523677706869a0fff43a109de9749d45661f1bc6bb141d259040c57102a9c0bd65e7634efb115dccd942e226093c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_483() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("caf508f713aa7378e9b71906e8d216b4b75d076b2db4925665d101a607e707e763dfe71be84f5a1ab8980d6914178733c8012ec935f31e9bb0180f5808395c6822e890ed730e7322e03b2def26603daf5ee9dfa4dccf938dd345f42ea2a921ff119aa772f35c498e731d7a3c5464b96723531899dc213d7415f2aa95e1a5a13106893ccff584f7ee051795a7395b9c8cae728636ba44f6c1a5ce4fae62ee9f39").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_484() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c16eab3d07a99904243dd4f441f42b606119b51c7af4d86fa4bed77007c4dd6304e8b9640cb39667e8ff748c10fb82ffb322df9dde93fc67110860454a8d3209371a180488459452313e32fe49f611996484ee7dc701ee3616c8083aa78cc8be0bc58dca856383d1c798cbef5c74f8ca2581cc20cb57f32a79e66fbc1a51c92f0f72de8e728b9c99366b9a650516867c50caa936aea5e3e08a6db644ddee0a3f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_485() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c1f75bbcfaad55fbb3581ecebe7ec1fafef44c7da87496f06d7c352fcdaee1574adaa63e0926f1b3c1e3ebf52fded8d07b1c5246ca6d1e7b6cfcfa607439661e11a0ce308dd919de5436021b969afa662c515c96563758327443e2a0d4b734cdb5a8ba0e15feba9990c1d1cc8c9af1e68f3074c9f68a51e3edd8a61e11096bc40c7ab4d6cf2bcf2f4765684d8480ae4d6e874c892cdef5995f06e97be489cca1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_486() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9668b1217071cd3286c55a72147115c706931afe5cc4d30d06436fa7da6c644387ea4f3dd2dbd0cdeaaf92be64957abba19e3f5c3f93f355eba54cae3fa5034ad003662f9a38716da255a811ed8ac17d3d02db60e97ee2a928116547c4a3bcb0737485362811b477e2880c1830eff37faa7247a33d0d8df851578a557ab5fc8a0404032b485d6cdb49c2028c79793ff75ebde5a70b0dc09c49c1b5e00ef1d4b4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_487() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6694f3dcddcec9d61ec0c0d96e76f90a2389d5561c443b189426ce9dd9f461e6c000f75a60d069422e9555243273b003c35460e144411bdd17f9dadc6c0648049d54748c2498ac8723788689f06048700223b3ede2ed01ff8d8ebf9a73b8914485d7bcb3d11e9c73344048f66606d4ff1421c2b925b97428de75504e20b08120707af970d2717b759142c0642786f186832444bad33fba0bc8506bccab38f95c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_488() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("27aca178769bb68eab36ba0ccc39fc7ddc188d8cf731717c8ce6b84d489a263ede418b640998e418e1fa6b3533abe7bb224a0bf9860d1c2c683ec49ad302262aaee2952c881d1e4ba8390b9035128e9e16153ba7b83155b06d98d6bc8e5944a5f8a5fb7e38cbd6ca6dd8546b2cfe85914b640ae8ad048ba8d02c3a6aefbe38d11bd2c5d96c647073d52bfb56f49af1544593a011287e21b1df6a8794e0390284").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_489() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3ae0294ac38978394c71ebd383068ed1ea98a59cf79b19a2003b3c54f18bbbd04b4365b5bf34475b6b1ce1b38d75a50002fe00af1719662b75599119f2a6faebc67eee7f99c86ca96cfab02d3815e6828e9b66ee08c647d21636350149aba4571b5d78a33fc3e4bdccf22f84984aae473900876ff3f5ba582323a3d8462f42876fa782eab14e8d3116dc1f82b58cd9df7b54044f92b932aca780afcf53e9ccb2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_490() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e9cdf6eaa74891d7c60acb7c3ba617cb5fe7f17545df8eb87aedf5ffe346a21e702bd88d28fe9b146d0c662611271fc66f0fea328caf80e4b7f434ef5e0880ad00a4de18705bc777ecafc92b9f9866fca10fd3601a1f14e17404178268866305b062df2574f2ed75bff94c3b88cafd15fdaf0d3e71881003afba2314262fd1d17a525bad415ef962d49d038fc3c56aa20c1a360ce55b9d435c388b5aa96b515c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_491() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5f99cedc2f66e61ad129000720313b9d523dd1177fe7f794255c68fa82950d8cb5a021ee5b7ab6d9de31199e3d527b7871cd489a406537a5b458f321d138f10c84b8adf9e46a7f71849a7b8451f4eb5e72c846a9ea13e788c0fb44fff51e8078dbb8efdb677c1f565fe5923294c4c4d08e9535ab672c8fcc9d24b2ebc16ad82b2d13f1b90077c8c0138b3809c5e79123929150757121736e6c28cdfb5a39c156").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_492() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c1ee5e2a9d524a0ea3ebbb66a0b912387e78c2e97a1790e274d059a3e14b7aa6f4deffc21efa43869b6e609a3267d1d694c912027c4bdf8e9d98af2c7e83870d5c878a1ea80fe1b4146a2b63457df994a3ffdd18037b59a202465bf6d23a270a6794ce3a76596035f1f1afc83e75719e4bc5396c29bc6ef27b5f191d47a2f73123c32a08f7c66ab1829adc2543e26d161bf9744d8de5638ee8ccf0cfaec21387").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_493() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b58a1c8136892c414e3d23725cb8c1561bb398040f2efae07ed3482da5c76409c76e5af5b3de27519cf336cd64c5fa3289e708a562064a2fc632685b7c7ca6da71ff9e2db7a9143510c533ab5b12c434a08f92c526329eb88dffad65a9194d8957eeed9bef46f85a57504b786e842e679f0b705f1802464faf2d4cbc948bd46087ac134ae831b9a70a38a9747a56c4dff3f4a5f6b35e0b49eeed781115516ef8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_494() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2b19e6d8d6ac38c72bb1c5bccba2b892c21d3d2042b2b30cf8deb40f6328086ff707ba3670543f0cbaff00315a604aab4be36f6facbafb869a9cd059462eac7b53978894e318eef059a79c55d649803b36ce72e02652780651ce03b5120b41f3ce97226f993ff99216aa9e03fff0eff98234ca791c9f096d20f400b666ad10a3b1a9d9207f90f17caf0a93476f0ee0e6b78f7f902f33af414bc9c2cd064d3e3a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_495() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d53c8a26849ead6eba7b9c47d2a63dfdac3d6b40bd9508f03e9efed6028f33ef79c7ffc620ee57949cb4cb61290dd08a179ff2cf7722153056ef39c4774d00f62dfa6775eb57e8c8791a46208c0735443009a5c4a4160c55ead9ed072194fdd7a7e69b3bb1cebde648ba236f72103d6da01c4d55ca5abeb1d84ad4fe440192ffbaadbdf1e45de79b4117c7d8fbdc1f52cc98b140a766807c419e48aac294c09b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_496() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("14c92f990fc7bbd5e344420b5e56d950709bedcc0e1eef6020b363e61f0ed8b915d74f65a950813d7cdbfa4e9e18f71a9d83640611eef22e6cb2326e85817efe33f2f681231bab4b98444a22860970486cdf2399132683994674d9ada00b8e2778ce61b1a33200f66ede360e186283a49a9a3a93e63ec66d5f2603cd2fd192230b422f6110db8a1d5b0a29bc0d2ca02c88c3fb94857f466ec2d817b122a55fe9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_497() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0dbd5e73f04f55cabce3262d60305bf77c2c2bf2a9a5bd161bbd2c5efd16bb41f44ccff3de48f0c6aa3c84f2135be0dadccf48ebf224281bc70aff93be86954cb919e0b7a5a466cb720e240bdcd8610ea8c13c445178f7563660e8d7fb78c6834cd4cd43fe235685856837449854888e9748657a2b6afe80680f689c928adafac16c22e8fa3f45d09b34b47c47b61617d9f03a7dc3657f9654058e26c54ade11").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_498() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("195f5859183d9461321cde30fbd4f1bc8fc79ce16f638fbc1277de416b5fc240eea07e0c9cb8009bed5b76885b408f6d53b5f668fa8c6978249c0f08fc6100a969e3e320d1bcc13c9269686cf9bbafd2ab7fafed2f58a4135ff2fb1c95843a107551d2323cf0a5e9ade162cfb6846dbabe353d907aa366592d8e2addbbdf70aeafd84df45a245d25650335c65e20560ee22b96ce56bf10be871540a45aa9b5ba").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_499() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("55f4d63dc2dc8f0fc4254af2164b45735a222027734d1bb849c86b33c20b0d893ed1a36b97a3e8486ad511ffb0baf40d6b109fda30db1b47afd1f239036ff05ffd9b49f067038b609f2e1f4f133afbf699f08512632c0ab53b29f124daa5c7ae2cfb8cbca29718a35dc30fe605d692241064c983f38f9f0630e2a2c95fb1420b0fd3e13812addb1028a27652b7a0878fc2193f523828ec95b15c741d451a4602").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_500() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f1a78a7b158f0e208b3b9d3dfb127c748fd8f2ec1f12d2ddda1dfb32c9e6f7d88449402dbbb64c4728829e7a76b89c137739d20e08830894ba12fbd75295288f8cb03b1b2c08effe9eeefaf188de825b24f7591a2ac787c499997c277d7571b5c7bcaffc3a24528c0d5124ccc9a55ce74a5228807639df1e80e3fa64adbeae5a890b1353c4af0bd57b8f1f198ad53ed359cf9f320dece4f292da36aca5570575").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_501() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8881f812ecf0f0646083d1c24833e79d50a7ea94f723f78b8f41aba17a4bc74d96b90a3543275334bdd10df37e472c00b0e338661d38333e5ee057ed73d3456737285261c6b80a5a7b44bc784d5b163243a03ccce0770d08bc93c857561c72ac339f0a4d76f52c0652a48764c769fa6b96ee9ac31d3863307a22b9dc8ee89af9d9ba996918d41e051c814f51a262a5220c12efb372d4e57ed34b52a2bad7c429").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_502() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("93c9f1ca2f0f7bffdff5dbf090a5e7ad7f3fe1816ec31c832569521ae733c3129fbfd68509bcae9d0960c1900993aa479f0c7d1b75853a655fe442e1b79c85ea6ddb4cf57ef585d5510c29c04561734c94f20f63c0d519a63466fe6f3985258e9b1c538646b0c9f1ad9107ea433bf18cc73cb82fe61e439f81e76bdd2852a3138e9d9a923d519c4842e00e1eb71fc575072764625ebc284f21a8fa318aec8dc8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_503() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("514381868d840f9b50db87f74ffdb6c822320d7126f5745300e87bae319763f2b5654524e8ec6095961b20cdc8b3dc1c33b7fbb790f6cab715116665e8e57499c214fc660126067d339289d70da31ab26a8c2f9a25c623121785b661a13bdefa956d2beb5c54daddae368311eba47d931a4247738edaef29d4ec4e1165edbbeb60811ace6c80baba02fd330141ffb0182c06b792b3bd71330b692ab588196779").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_504() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("21154673356a32a06bf5625bafa3aff59f4e0987b2b3c24862778c322a7ba7c6ef15a408b5537e4046773d0f3962a6ee5b04b2be63619ca1feef6129979cdc717313a994d3fd9a2dc9beb4e4c04ecf1d621046a48395b8c3a24ef71f520be9ad46f003fedb1c785a28a57572ac83b0c63a89305d9d931c1112ec00600a3ed8dd08a4559dff804c4603b9aac68b2fd6ce2f9699ac5e87e04ebf12814947e68bf0").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_505() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8185bf9cb55bab709fb6a2e393f72e0acf77ee6936250f68807a61b7e490b38ff331edea6ccec95fa07747e8f19c8a90fae4c6a59664299261a5503fc881b837d92e52a749a25145c1df05cb0288a6e5663008edde01b0266dff56e0078517aec5a967d076da52244cc0669f5ad064e4b4ddd593bca8fe2be388d09716cc241fdc7c1890d7dd8372404d404818bf0d18def0b8aa607e6b5480f2b25077864ad1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_506() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d77fe5e15eac9790643d15f9c90478c43027d287c63b999d9aa8b302ac836cb2d74dae994dd86420a865d7cfc580a114a76c2a65bda0b4f240ba7d064e44e097f7784da4aade445cc6ad6d020865ff74e01576136067027680511981fea80d75fc93a5478f7d1b592991485459b2941bc51a0718d1b2f6dd78bb8906a38240a6e4b473e7e3ebe404496d4e44151a74edcea2c8e2d019795240ec48dc1a5218ae").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_507() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fbda89e331a8991163e1325811c7804d377d3e8fbe625c47b04af16b6ce0a2a6c9563785e4e18226811047ce4437694a8f752090cbcab60dbc9da5fcdc72e20ef42e3ef831af08c2ffcd5f8795df20f1d2859a4e348dbef5d8e11545e2f893d453c17611e76eda27c05175bc652bca9660622a44b0319b0bebc252f541affda72e3b576df8549838e9b2a338c9f76701887e0b4bf0c41272bd0b31e567eb4a97").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_508() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("817550989eb35ed16f1326b01e52e36e3078fb683b74eda4f503a1003a8a2b7b8fe88e69c6cee4a507052dbd160f6846315cee41b18b0a369e0a8982b52ab86df9adaf8552576a790466e3cbb191d83f3d20a68ba6469e4309084651f28af05306d630030919428bc7440ce88dd7b4b385bdea4bb8ee599cb4fc7610e58b23aceae4c4fb82e5cc1eb0ab952b63bf94cc93a881b08e3e7988086bbde6c051a733").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_509() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2274586c63b651940a1c0b8bfce028415b61b2000c98c52e721e88ec52a98b620f7c57c86fff73cf9437eaaec9b4ed91a123c607accc8ba29e5e3712ad12069040c3c4a59a78cc351360e7ab193db5abcd8dd2f030fe09c86a9ef36c664716446ff46b719f5060f50a7704a23a0ad57c6fc16b33ac0e6e4e288e34a838b2f4064f1a88564766ef4ad5012ddd0b25b3bb6f8f4ab355737da3e12ebad0fd527610").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_510() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b89a619d1c323b19ef55a69ad83fe9c5631b4614de23fc6f081ca2e6a5463d2935f9afbbd618ccb2fd900bc1f3cb3dc09890ad6dd434360bf6e1852072ef5a6f8db1d267d9cddc281590ba5066a60b5d75cc358cf1376bd1d5f6023690caec31ed029568594eaca50e9703f26d37d0b3d36c903fca997c0e44a9fa9f45867dc82ee117cfd525e991f06d37862e73041de5ba969189a1e0322d6a8cfb8966c7dd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_511() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("efe994c996d29c15962b2d85780a8aa888f9eaf603cec665414468f0c181974ca4c613693dc094c62b77b488959ac1988281d63525a2faf9363dda2d5754965e2b57a8a4b2dcf35064709583ede2ffabccde2c82090fbccc4b87d30193b1b9b66d9bf64e329a4ec646a991d0b4e86179c86f8a0185b665e87a65758036fd5027172df2341373e21a81c5ab027f9e6f0a71446d962253adabdabb94e33c14a279").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_512() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c0ee0dccb20ddea198bd3c086cd2b0f48897858f202a34930eb06c9b1925b1d0b951d2fc1c35e935234934b8d4cf80cf68fc9fa7c16efbaeee7d584b64a89288300d2f21dedcb2b0afe2d5a87b0575cb308e35c3e1cbfb0965335f45615ed19a9b73919c614e6117149156a76f90d32b0a8b2683263f9ca2f29480c45aae7d59ce5cfb92bc87148477d427b6db53eaaa43792e51abf4c1c85d0c3886e37bcab9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_513() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b8dfa52ad3e7a590cd063628f171495deff2379b440049f4c3c5e9eb6e12d6b94fe6e3565f506a391421a44e4680c61b6af4b8e4fe1f7d8587a02bcbf32510dac9eed80fbe0965e9c1223c3d250af44c18aaaa7ee6ddf255f8bf48862cc7d864e83aa11311aedbba7eaf760b3abcdeb91f510efc791f584e4c1849aa04ffdad86acf0ffcf36db813d7338cb28def1f1457b4a50677a7f28878745149561e4cab").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_514() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("799b6ed018e0fa2da42124bf65c3725eaf7e977e208698ada65061210759bd4f91d800c4ddd020aef37d29233aa875a95c5d1e69ef8ad7a93dc7b0ea1c409061dc6f964ad758e12e09f363573f258e28ad4ccf625b5dcadee1251cbe19ffb9a40f3be6825a9e02ede1cfb3b18e82dea1e1c06538320a8da5ed5440a183ddea667352588e0934496468f647bf48124c0809322aab8a3fafb58223035552afba31").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_515() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f2c44e089246adab8831caa0360f6a6378241e5e022bacdb04dd86b1afb9decb8f13dd65fbfb2bb5f2dd2c8c6b402a7bf194aa361be39d33a2f026653861e8d1a18bb87050139204f4170a963bbad83d511bfc99aec6bc38d4aa5b21f03acf4a93fef1aab6410fb0f33d4600d4ccf3d582f1be3cf4143e125f644f43a13e77fcee0e1262e1c3b5cc88eecdb2b19bdd1f6cd7af9eebb46ca4e61e6f26b2c7c8aa").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_516() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d8fce9c1b9db924d4610d8530a43bf6d2185723948a83ead272fe2f72d6b315857947fa22bfa966bb3e9dcdee2bb8b8a08c85f635ca3f127fddbaba13a3674f94b85b0f21a79cfcfdf752aac5938df54a826da0865c4cb25087c4a354f0d5a6551d41da533ea2d5c6eaa485839da7865295b2a8a769369fdd9cbbc9451c79ca966ea3076deed2ac6bf0755f187bc0534d65bc25717dc4ab0fe5a21d8d6c63ff4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_517() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("68d5d952268348a7dbc2743ad278c9c498b8f8177affe1b6100453d1ec57f1b44df16c6ca06e9c66bb81d2cd1733f8a5c0ea7f79c05ab44bace2756b7421fa18bc88cf5b87f10434b49db0a0e4b8326e839246775c55cd65a50d4d0d1d683c41d23abea76a181819fd1501d3383b3f54c58a75a50408cdd3f22cf34fa850db9fb5501dbf08e5072f97b08bdd6e55b082467aefa368a8b8dc5c5d4068fd35d318").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_518() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("311eeca71143b5f558dc15af3005f0dbef3d493268db2fd85e4dc938e493351d20a4957d54465ddabf9b117f4ea4c218b40f70b37daa787ba3bb39d6705b0daaec4af39cf83f665a2600a438ceb97490a2dc1b6849afca33054ef8eec436c497aaea6a64cce8259c503a1e839c6557819839f17dfb2012b5f32662329dfae27e263267bcdbe8564cbad15c8bbd8ad7580365088ed956e8ae9478c1a25dd56ea2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_519() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("465e5bf84a858588aa5f3ac72f0e494fa225daa838b9fddf27bb8aa63d28dbe62e5168612c3cf7832a63754e331c8dcbe95ef8dbad0f1d6d79a91edc880fab6b9f03bb5c3688196bb8cf128b87ead62ce397660f30b6caf2bcf136ea5a6b122bfdedee08532e068ed944c33a93b5934f04b91094803321146f4f9afac5801dbf10b8dd7e405615b7419381d6f71f4cf0d1f270bf275a47c6f32c1648d7587c3c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_520() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ce64b9e543a65258be7fc11c963a6994c04ac06af518b6835b3144546d2ec06f0a95750ce499606aba3b01e1624066f2ceeb5920889bf930c1acc20486aab223942a11163845e46c5d7db6e61711aec5f7439a4f8479d1393b547142067c71b1ad0b2d0690660a70e2b60a588caf106024ef907492db19ae27444d9be93a474d8b6bed098ed787f25579851318072d3f72cce3119e312c4601b244dc87af6251").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_521() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e0bbc788c3d7fa78bc3bb338931b0b6075eb31b30cbe5f4a995d181c43a30f63903185acce89677b08c2f9233b606ddb6124d3bb41589b5d91f987cdd704213e82c205d78dab0e8fbf85716f16188b0321eddc279bc15facae430d89c03ee423155549d766e78857e2b8d8b1da3830117456e5cec0656c47f770e409099f511300025face02bafe450324b8c31602a2b7b7d51b2e4b7ef258bf32d5d91a218ed").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_522() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4bf3cb2df405c41911a7b6f9c5c6c16ffde43f670c0954ce1c528c04c7a168a660c0fca44e3576a20879bc17e5548e819febc0567ab30cda399393cc7ce7cdbcabfa0add167454f40a6189d907bbe05a99f443afa5f7f516326941680867a76cf8bdad3392d94bfd04577c6fded607011f449759f30de4ac0beaf45ddbb74c95a3ac615339bb9e6ab7bd6a9ed192be6b26c3fb31d55a6de036701158150ab376").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_523() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("017da01dfb0216aa620ced726b54cd24f62998b438dd41f1287aaad6e8b75944a96130c3f632e214eb6f8016e31f66a414bf799be6aea921dd03cf1bd9fb932a23c94eca4c16c7f64929575fd84726220301310663e98ddc8287c6e5af1631f74724d7bdb46518a655980609dc3a0f24379c7e3631987ab510ee412e89b2983096e0492cb926e3d8bed5608f9f99099d137a3f826fb301e05c2fcae8a6df7e08").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_524() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("cc3408a13db870b4534571dbe9a487f649cb1aac0b746421cad9a529cb19d8be79d734658f84490cbbd5e73ba1be0c60add5f40a20cfa376d8636a8871e9178ee7433df8c27c7318c974c68ab7171fd534bf84c5a99b6ea6b520a2ad9ec630fa549bdfc459a0775e8fedccef7930afc4de6a46b6f3ab6934753a57a133ac1b3292a4bf3ec7f98b61e6068172774ae8f1c257e149bd3469ca8e1557fb45150bee").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_525() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("750c427e48d7eef30cd59b4522b65f711b350cbcb538641539480944c005416bc90fe0480a6a2132b88196865913e8994c2c144aae074f93e311f4688bdcb38fbe2529e2d04b26f06279714505b6d60f46cea796a30d9a3d9d83d49345d44ef700bee4732dd4320081049e2ff024eb3cc748a7550b9628497934696e02df5ca764b48f5215afe3e6e393d559cdafcf2b3be97fd4b4a4a957a3660a210ba0736d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_526() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("582a26ecd438684899984d542c85595928a3b3b5e252a26d925991f0d19e733b27d912267a21d578546f5b6323fe06c09dd463247d14bd9d9f4df6264a8519f4a5a4e43fcdccd1af680d4831824c39c3d8c2ea3f0aa96c2fb49c64d539e16a01aec847d088477d0d26cbc28da4566c41845bad6e1eed5e86923bdd3298e20613c6bb74b63a61257ede8154690d320da3f919e293f404ab94a8d2805e1ef69a59").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_527() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5b7c759a3f306337f1e5fcf042ed6be2768acdcb12ca08f844265ef41a71522e7949297bc0f170a55966db2acb56ce335b327af81cc186d7052a4a52f665e4da8bd5d36b5e3c4e05a0d40296c7912e14f2391f3482eae247eb4e47d2a8c6f21c565d194f8e468db4c53c236c4f6255b3e930209fe5b6c58b0c341b071eea3010d6b77c332a18db37ac6da5894980f7c54cb6dae1f0f5aa2b7020fd0accee5684").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_528() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2ce4ca938b3bbc93319df6e4ff09b12a7291cc3bd8114bc004e7497182626306806cbc215f679388c4165e68dcd238ad3a3c87ccaa70ea83318815487da0285b08f196a052664c4c9ea73a041ccb81b4bf48123cc7d3b41d1cf8dda8d1eae5a9f9881f621de7d8b8a57d7ce3e02563095e2b67b1267c10466ee1e3182154571290d78e8839b82e5bc7e95178df73c8b55c70b3c232d45c79150494094ae5bbfa").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_529() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1216c4b1a2dc8834ea10b69be238ef1291c21af8e5069644d1dc18e95eb47de7363ae9d2898a14bdefb7b91ecf2f7555d2b216d53d50bc5acafebc40d4ff49aaa1af7b9c219e37acc28caa5c3ac8906767e6909a4bf37891b1f9642541cf2c9f8f1c962558ac0a2d007731f65153ac114569e289ecffea5ad76135aaf9b5ac3670ec9597f41ed75513b5a76a6be0df7c767161337067b27198b82e1d91f288f5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_530() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("63aa256d4b8d2f6f9b47a5be0fce9c0b644fa882084e724dadd58bde6dc803dd909fd4d045cf6cc2a7874de1c970e92b0feec527bc70918f62811254fa27630e75080ea8c008ebdbefb4d7f4e3a46fd31e04d93fbc23dae79ec0071fd9e7577365a8993025accc279311dea80001ba69fda36af3ca9916624a6c59ac81e027d7375f3dc45b97d8a07563696dd976a7481847adaa82d69912f853d0cfcc5d9cc4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_531() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9aa6bbdfdac9b436ebdada7113215f1b6e9d3b034ad8ab88c483195f0c33da94844cfc98c029883e7d0058fcb20342d60c030c67528e9659965a157693ea1bab1482cffa30c25b0134f0a51007ab9ac482aa6022209ccb6f5f68e10a4d8bd69d68f331ffdfb2d316279c9072ea50bb63805753a4e7785630896d2d02462ff3eba8e59003dea3b6a1de6a44a33fe987247dd11d3873e1826e372255426ca8eb08").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_532() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6762b4965dfd4854b5f29206c0ce651cf0b077e6fe42a794481a597246dceb0214c46d7d409b867db663d33140a95c43d5105a368072dbd9ed60ebe24a4b572307a0017ecb8b9abd977566b589c8a6e2b30ad7dfb98fdac89b0256e7ef826f6822f7c521d93dfe34844b5f11820385c9f9673f58c6361ce88c843e872745fb52697518a66c2d32a0fb36597ea06ae2ac9d2be198ac241350e3ae68e9f02d1341").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_533() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a2270df75fce53112473d2aeaf342ced00950132d90565501836186bf9105185f484bc23e8be84b44d35bb0338b871e3991e792fcb44ef6b63f5ce0557e12d26fcabc5aaa5198a8903e1947714b89aece60c50813232af235df9cab86b264a2daea00a94f34ebdbab86bdaf4cacaa4a84f9a56b52dd80105b25863ff156f34def91549dca4c3ce6021a60450d382e9bcf675e9001915e413adcd7b785c15f97a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_534() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d26210fe928f473c587d7eb721623235caf66965295207e6218e3ec63a9ae3dd0b41e4fa1b47dd54c9f1f44e09b580133514a572187526d4d06fb84205a79fd62d80d55b1bbb57721c8a6841b364080d8293b7e845843ce2e108a6ad3f5b2872750d7a6c6e4bddef8e2e120a38548aab0014a83208217ce0c54dffdd09fd5e537de742ca9da020c97c1ede149b34ddd28a751430561d3293ef2ddf2a62befced").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_535() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("01bf71894ff9c8e406a71f77173c499b5268a4692c4b122d8ed2885154c9b7bd9f53f0f4914579597d28d0bf7e4faf38c3d30d4f914c40700dc64b477f4bf77ea9c774cd03ecbeb6ec49ca279d4eb1921b970b4a8e91804be6bdb57b6a75a0638231e5ab484ef998f3ea0f20d311e02a11d4658bd1446b7981bb53fd3c19c51cbcb29aa12da647b78181537e55e3edf16056c68bb6032f625f43c38dc5b62f4b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_536() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4e3201dac33781173dbe50dd18caf4afe841facb69cbbc213e33320a74d97583bbb0ea92f25f0093120dffad445ce6efb15b89d3027bcbdc6db638b5c09c54e1a037df775d819b35aa9eac075c76c58ec8b9af19033dee5c707df11b6cac71cc3c2f83c0a1d51e1e34302c88c9aa933727a83b6f3988a4c6f5f439f444a55b41a34027acadc16162233e81cb780c7c5f0ed489243c6410637f942293d6a5dafe").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_537() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ff1c6a6d3dacdcd66921f2cb7982453f1ea13af9cbae29d824b8899c3f5a252fd44bcaceb8540c28b26c427da262c97deea40f3e2608360740ef8582590bfc6c69d85db5df21f06137942046c23e07315ed2ad7dcff9bf8a216346f5b004c7cbcd98e1511f3148ff8f496ee916f7a826e33d38c66b2cf64f6214866c7a4572df1bbebff22382beeae33cda337bab07ec2858217d11e05c8586ca8a47db0193fc").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_538() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2a7ea62c5522da921a1a84c7733dc715bbfa1e620fbf32662c1c232eab760310c56390a859a0443a75f5569fd6f20968c492536f1f7b8eca4164246e7827ab5233a8f5c595b3845b5d54b1a9e801723fca5b2f1c5954817eae19543bc2e92d5beb53fcce44cf7da899830060c1ef35d74787642d0c3b2ea20dd26b05dfb8dda9345efa31054e7fcd6066a743ff6ae286a4341ba590b1a7139f9b96301624caf5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_539() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2183a2abcd33a4d9be64b404700cf848aed7fa9c55886de342c417b6b19faea7650e2aac7d3326803e2f1e6eb068ade12fea0e646fa32baac8c0bca906783e22c0804bc4b4a86ca9ccff77bd17e01d3ef64269e3cd517f81d223aa72da8b0fc0dcc8ad7f6798e375084e38e18f56dbb3f222c1339d585d6d4112232609725e9008a05f5d288d5ffaa9a097ab704f3c8ef1fc1d80acc1decf67c824bc8a50f732").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_540() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("91da5120f133226b1336a61f0a7e200b29f9c59f3d217e75c72f7f319c7d92a1bd8dc351f58716a784d841997504b8a89e4bdf6eca702032b7c6efb6a30baa642d770a7e2887610dbf374db3de745f6b18b994d674ea2fde17903d18766ee7ef6ae02e3c745aaedbdcf280cf316640ceb4f1346b1e24d439f554cbb8376d5ae7b5194742121cc1d8b08e650aff38215b08e17ece096238ef379f59b3fb3ec5ab").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_541() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3ac0871416e6eff98f973b0f4fd7db0c22cee3598b9674af3fea12f555b52446915185391fd4d57a2534b6a6a1b79584dec5362d9ecee54106dd174236c724525353d66492a9e004bd1181ed60a573c87d37197ecf2b4b1d39f4452eec1b6f3313680b7e961e9e7658c759e2ba5200479c21afe8ffd5f79645bccd975380f570410dad6d7762e1116b43fe6ed4a39a11ee57f08c6cab02ffa03f61fe0921a1c0").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_542() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1f57a80f779a20096b6d58366450fe5167e7421320a2e8e8d80c22211a1ef3fd0c989546c3224b3f3baf44b12c7777066e47ed6f1eb3d7af9164f89496fc8fed757349a4b335d4e1a912cfde7a7c24864382de1fcd49af1c05ee97e740bdcffc7922c4b37c6ecbca397c105bc7a981e14e4b7d3a2093ae8eb1b86957df373d86a27325de63c6e747f47b6ed411f4bd24ba2cf1ce15e370c3539759468eb44604").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_543() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6d01b31816209d0a9d3310c724a97c19288a0a57f8a6fb8a5f0469c71fbb4bb0c240aec916bbc1cd4863a2cf31be5672c623195e560b098c634316c41d97dae5259b7303259fc840e23ff1915903f5ab2311949b8ce4b354a5446ad31b7026f262b9256f15bf49d4848cc8691747012b0f81340e3aa2f9643092b4e986be8df93ff15f9e87e4f441bf026e70af5de253ed0785cd02aebb2035ee979053f1b8af").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_544() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a8e4f8fa72b15037fc04cfac98722dd94e12bd3372db46ec2143a25e4657755767d37ccafb1db9c1b659228e435bd95b9a9c728b79d5211fc97befd8af126e7bbe35b82c99f65934b4d03b4af1604fc6e51dff1c903b87590fa4b63c50aa247d23ef61b05f356f8f007e3bce7bf05e8b4eb8a99b3ad220ff37e07c86048f4fb28893c47ae84189ad7dbf28620de3121b23f5c168b83eb2da22d1eadf010f7054").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_545() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a9df3b885e75f92a0b5a0d327f8590700edf330b392ddcd23c69a29b410c9a876e496894d89456c33cbaa6f8ce8fda11f4fca81fc080013b1f9068e89ce9d84e657e07500bf8d56d7f5d15cf7352d1861c77f86dd8c5c2f75862aa64f2407e08e7533aff6dcb13366072227c282401f38d4e9a369967f109bb276e8cca91f44045596beed2513250dbbbba6712fa3403b45381365bf64b79a69d402fa9678fde").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_546() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0f622628b639dc77ce1f72e5267f22aaefe31d08085cbdfc422aab7604c0905e1df67fc12526fe9a39ab9f235cf5ec221adfff195a291cc13b4a4b58024eff43b76cbbb7f1ee3883c87fddb74b1fd76a56554fde887ec6d1e7e7c4ff0f98f095db68bab8338b000197b8fb397abc19772360603039babd5a7d7e8bd46cf3b387d9d5a0eef16d469719a6b7637f683bc8eaa94bbd7e3a1369f0692ec9343904e2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_547() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("acf6f03f64e57b612653a80f0697f7ed112ad4d0fbe1a72217400b01413417c7a51e9a6264c2e61ac1b243e0f33a2b25ff008fb8a76a7023e67f962fa0353d442b3ad0c23350d736d489a9f84b45c8856b24b753afd2d7d43b212c01f0a75c066a2f33bda42f83fdb213be631c198162f40ce805d21aa726c42b289daacc74b25d2f4ceea3994e582aba20be367b7490dbaaed411852f13a79f3ba65648a0712").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_548() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ecaa8c46586c58286ad90147526a6fb1225a6723c9e4cae52ec5e038cf4428c0d9c34ea8eb48aae37ca39396d068e16e41be2ad8b1d00cb7389005e45ca47620a80b58e957de8bbc95d5785d8563f4e71092a1c8c97fefe7718939429f50c2da87ad2db54aa5a07a0aee79057b3e721ed704c189f45b43a827a40a2dbd5d44da09d232020bb73726ec125736fdfebed62db50fda2aaabf03a2b312638e64d67f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_549() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("881c6fd4fe6806c5edca2d65d362cff2ad656bdafdbcf23b52ef40155a437e4ca0727f37ad31c6c1aeef4f8cf8ff0547709f63fef078f7d47b0c7bd2b5cff530caafd73dcfbe6c9b9064611083509b8f1e793203c3a13a56a8c2a63d0a2b3222d7d4e176fa16bab1963dd017bf92edc28fabbc5618e2285bf1ee3a8febf8b5fbb68f6565b4cd389750de2ef65e61fcc7b57e9b9d536a50e51636aaa7b948d29a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_550() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("74953de4ec76cde441b22cd59119fbe11bdb34a59f0bc5b0cb96c3e82e249e4f0b0c579368785b3d15f65a86a031d367cce72ef5bcbd4ba66a0f252ec8fccd1fc59e8a642b5b036d847c21436d343abf7de246df975051f79ae5a0142fa5b7937d5c6c5a4159bf1a09cbb00c59f9c91e5eaf9ce3961c3ea55bfb245ad7bca6acb40c1b82ccc83a51df3adf312174b0a085d694078acf3b7ee85fa029d4213137").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_551() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9cd20293ae792a6918e17124fb981026bd5ecd28788eaa2bac25b08ea5a0c8516e4b354aa53ccac8d1fdd47fc0b1774890ebe2719943ffec737b0da5413d1ec067b18ba4b3a51e7b2baffe081b891697c1c8aa705cc888c7e7b7925765ba0093ea94a55eacd65dea183cf6326372feb07cf6cacf7f2f145018edd3c755876021db835e3aaba8c30974c5228d8bf7a79654c2857c3dc4842cfaab246052960179").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_552() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("cdb0f8a4b1046f1be84e7abce5d7671534c182818d6d74cd92f9b7d041f60adcfbc5997566dcab89ff5a9b5b2d130c44d7ed32c712c30257b86fa872e603b3e2ef809268724aaa1ecdaedf7f94f7d724d77263771e83a06d94b63eccf822deda963b33d8cd8285959ac6a037645c5083bfa6b3503ab20c9a51c2208cac9fad272e9b9f1ff75daceab6e9e7879a82eb1f44b0f2d2557841a90557c4e2803c728c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_553() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3b8960b87cea36a1930fcc553d976d66a0e7ca3d1d753bd149fbaff9d53caae4f9208bb146a99c14f6a2ba1f9b19b5fc2f3f44506462be323faabe9f744a82788fcb7a77550b8dac306d8190e671f912d24c119840c9c344a4adfd2525f33299af24a8c944503353252cc42b517bb9cee315ce7a5af0067a26f5ae3c327fe19e746b8801c0fa10f1eee5ab538fee5e6fdb0d65cec36956a824297fbad18aad6f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_554() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("11eb6d2afabe32a492773bc618c7f9cad9903a1154894b9c9cee2e23068a41bd99f3b3705f5aefa81bcd8af749d0b4fc51cc7c17da0d75373f5dca629092b6764434acddcc919c3c9b9573d55f953331f4540c1f07ecee5b6f24f55d044fc6b04c9e493977c4568a01c8bae19a316be34216aa030c4048fc2aeb492653d3c08cfdb0418e144d99bb959e9394bcedd1ad53de8fbf34859aa47c2b51df5f4f132c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_555() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9a352f1f05ba7ce06dbc119559fd29010bd3e32822429dc56f2a919a0960f41a3de28cfc72ecbc6b1e9f0c1d64033abb79c4e0e0f0b21a8b2c7e2b7f59e21fbd88418c8b7a847899011620d16649fa37459765b5fde287b5367890b1e0b0fdc6aa04baef34a847fa04c0751850a7fd596233f467e09d090274e26aba9f4836174b3df024aee7f77f3152620c87a6316178a5c0f21529bc4e0fac7c9289f15f0b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_556() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("165374faf46a4f1db1594654bec9d5fcf8a253d6c08287dac1bbe70ffc7eef40bcf15cf67f42e8465e2b40d2a9182e3e828d01ba53b2a3eee06a78c84d0add36dede6ca0e89f5966aa62723b6635691f92a2ff240d923af6963c186484a26fba1c8e902746eee9ea46d6531813efac6aa40d61ebcd408084cd1dde483e68bc9b838d7a411aed9e4cb3f08e100a2fe4b5d6760367f30797dafd9258472f2a01c8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_557() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0bed48b722d7fa457a3b52a1373991a247bbb247aae12fa462653542a5f29638e113b8dea6e2058265cc6138dc1c6ef139267d564625abf218a7d2ab3cbab2ef076380cf6a681a7a62eaa869d7fac3eb7d55665564629e158b493ee046690e2b3f5e0444bddb5a267b468f652f940f821f5735e8c2e93b9a354d49001011aca4f7a973eefba2f5ef7cd5cdcd1818ab1a33236202641b721eb6bcfdd4c77b75ee").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_558() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6f31b7c74ff1b3f13979fb2f96c218d5e5c3f7c81f4ad3a93f23ce0b9356587f9ae64aaa0fc1d8a249b3eaf8195742e3f0ee3d272ec9a0a5841d24e06109ef7d3554d2b3fcfffc1da485a6436645f88ef10cfade7a241357dc59fc20176d62e4c1be4efc75bfe7e43c23685eb367ab70173c5b7c8c087be44fd580a85c7842c9da149361850c1a7f870000feccd7c8fe6ffb1e8bd70dd136a399f8941919890e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_559() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e1532da2ec8fcb1ea99ebbd02ff683ae21497f2706bd921f2cb242291ed5683852fe09226a23dd0a76c1d24f423b34a78c52d013e4c528e7ab29575ce1b83e490397ba74af45c85d20634f3330b4f1a70a8893d02b190dce9511a1a71865ba598b08341854c9c7ec3e57b2f1bd9da5f1d065fb6202ecc3ea9a447c4d095a5e5656e869e85352d62bcba5b644662331a46a2eb5a28a653a383c97847901c1c604").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_560() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7f9506287c23bbb40fa7e5041375bb772064cef926381c9262f025b6b16888eb14620ddef3877ac71d9b88c33a0706881576b95a1a1713d9e7edd4d3aa4356dec5f1fcef620c53e54f1a45f86c5ba97ef8c53a8faaa43c8d3ac8a081750824d08e1241c9c136d07c871151acf022f341421b5593bfa209a4899879d4235bc08de8e293d224f08b5305a3f57578ba487e8eebcfc5cbbebde8263148cd76e2f555").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_561() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f866da8bca8942908ab81a462d7a196737d58cdad4f25362a9441cbde35f47856a57a19c2cea098bf6b9de947d89bd703eb16280c8db23db7b5cef11e98b986d341a7985ec7ce5ed8113566fe6a1f3b1783ebe607b6a5183263e7e5fd32d0c5ce4111d515697a318423edea62dff8ad45996bd8d8cc57c46642b17e4db277e0f2d40cbe7881f330fda8397e75e1a63e2f6c8a8a70a2dea62a5a930186393e0d8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_562() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2e02b87ce6da42c8f700f075c823865f21b7739c2ed2077a62380157ca4a98012e7bfa339f88762eae438d25944623f1a8a8eaf082205fb6f68e577977afba8ef0b6afcbd0c876ed1dca95dd703dc2559bc75de717096c39f0077c0d85a9dc71022d60dd066a8ac679709f36569cb145a9999bba2fb6355ca0b454a5be47990511029e763df0db89b4b4188b6ea9cca707698d8bbc58129d9184af12cfc1e072").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_563() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("69f6fbfa5cbf1139c91880377fb3d2fa8bb79eba1bcea6546a6561968f05524f1d1defa047492b226d5caa2ddc27549e67a5d308b7effc347cbe87e616c41d1ac33c0d2b1a06d188f57298ce2986999dc55f3353b66a8d05b099391291840330260da44e052d1973ed6577cdb4dcab86d1ae17a93607ff9efc6c2ea2936724f3468646f101e36e68ebe7803c19adb1ddc088c4cace6109cb5d0d416661ce1d80").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_564() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0adbe265a3beb7ce8305f3b1460bcd03aea31790c7a8586107d7bffdd3cf88145c2103e74db895ad6afbaf49e38b6e84fdd4be7d1087710b8c981096238d58d4b32df92148a2b3bfec65d0d254e059d47a0612a18bbf2ea8186dd1efe1a3d98cf4c5838155e65ffd9459377c8962817783fc6ffae076d5fc4072af859469f549998a23257b8f82a533669d9ea92cf82f6c787f0cd53c5cb300babe2abc381407").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_565() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f03678cc439e30a2cb2407e5a768ca40e95bfc4d7ce3fbafbc2edf4d23b16f40abab9901e7a300da61f1eca26e23958218daa3d54786078954556eefa88447bab9add461ed2e1adb00c6816cb1a210664fb9fc9ecc3ffce8a4edb9c5543f698a1bb4e092b70290fd831f0fe04fe34d3dc5c8e8a1cec6e6f8a34da9c89f4d918fd946f038d33b2dff9204bf0596b920f2dd4361e37d5cd725aa0605323ba8c1c2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_566() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("873f4813295b1a16a96e88837bf26a9552e41ad20083bb17ffb62b4ee7e621ad8d4e5411d95142f44d0149a74401e8bd9e6e1f526dd3fe365860ab8458900a6dc4082451871ae3b6782710801ec447be6c4887236b1dad2c352cd7f5a344ec38d9c3a5725571c144d561681977c23748af6742dd8b415c1cd6ec1c6a9d958cd6bef2cf3218e320a6ffec65e57639be4ae9f281a164f2165daa254ddd4c5c0654").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_567() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("60e3fa0e59e4b18143edc49444dad9c850368022f39680443935317b352cf9adc36d78a1cbbd65b57495961d862a33b3b8df2cc3d5226856c99bd265fbeb8aa4b944fc2cb08583b4ece23daa5db61225c2ef68c7e2e9cd0a8f9b29b4f88f42630035c3a681c2fb5af79e3bedaec9dda20d4c58072269a1e21c2dac5abb8192b7131e8a1f908cd26f254ceb324d44ef114515022b2c76230a88eb4c71f509be7c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_568() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("50b4d24590d8f9f6b1a962de0748268854c284fca40bd82feeabf6b945732adefcfcc73251974b6231795849ab9f6fa3aa341575a0a0a80fe6ae783eef0a72ca9db24d9f146fb19149f569d8f8159d6b56e220ce3344b7363306255ad15f759c81e4804f809a8f6339d6b45496e548f40e8bb4a0f4e5a11716a4132b14f825dd5400f8e67788e8b45edf4919d0c07a556bed31ce541ef923db6df5d79dee9270").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_569() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("eb778c4d8317c83411438f27621a00c443158a43a6d51034fb7ae1048bd9dce173008dd6328fe350c1af1d648d18ada2a970f0328cd0311898fa012d1403f77b0a441434fae5466976543f5f5a2170916beee1079b2d5629c237d5499c7a612030241ee1490629f8a80e11a1d93dfb8a7686b783a19a1ab6d731a5ca5f577f082fcd8b67202570c34aae6f5bf4dc61607f22fc2f9168d134e8bd93350c42171e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_570() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2240ae296f03eefb64dd08a0865b5c493a9f3f7d66315d74d261cc8fd47d3b4ec00fe70926231a2323392423d18de4eea5bfaa9c26f2d25ea34a91368135bc7c20bec88360491f78237cbf7c468dee783047f82a0e5ebf7d0206d414c879eef74290e1f36f61eb63ed09b2c9da3bc5254f100c90517e6210e8d8874eac503e5bce2f11bed89ae5e7ab2e405273f46d038d7698f1d73c0e04830962cc21ef4ec7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_571() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0b5a54e2f9418776715984a12e92b0a5f3c0e0458a1dc8f3fb181e1c2a25ec39549e9c5322d87e4e8ac2c4edd7ef6a248e5c11a7076942cf841d10e8ca3221c896c7cee93c8c2ae304118ad1c947829d1df625c060709c7fa61d69e158ba66215602fef100987b808cb38acb9d682c6066ff6f1dc52fa06f525df20a5e20c3d1a351da68be47c22841fc2692e91d45586c24b1d385b77c0e3e453dec610f1b71").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_572() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("19c62ed808a0fca1ed4d415d67747a6049a4ab89459be1860c6acfa445932233be8c8424642e5d53893d5f8373c59d57beb1259be308d6e360e4f938fa259b835b6a2ad94e820347192013bfb06c7c5585587917f402106ef4b29f3eb9d9622ccbdb355f251e73f7a105490fd86b1e15eac51adb773fb08d49b4d33b585a67d281dd680c37e7d623881d5478654528b11974ee0884689ee611540f1f720ec6cc").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_573() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8d5088ac581930bcd8f56fd294d2709d21089872ea611b9ccec948bce17ec19c3cb5b84c5692f7eeb754063bdc5aaec5d7a3e6253ee9da9146e1e56ac95ee0fa64f88e683f64ca3f1c9c0075d11ff4d61f67c78f16afc2a7b47825cb1cff2a105523cb45eede38dc30ab5b8e71fbe89e4373428be133d2d8e7be017ed8c72b2d52eb58302798f30b20c333934af34dba7069352a72cfe26fbd6fe424985bce9a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_574() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("314cdef710ede33cc45085c14673b08ea49f4bda121241a7e2fed841b0b37b378d1bfc7f23d4f3c4e1e5eaf5086cd123715b6d8d6511e960eb34c56359ba7461f3a4f86c24a0ddc50854278292b58887612f5308d3b80ae798f60515079b27563f70b1cb61cfff0bb69eefd7fbaacb36ca3b418ad42d2b2b449e650342160d80165cda0d4626f823af7c1415873c61d98b42eafd1ad900f35113e980beeeb7c4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_575() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5b0a9281f742caa0252fa226aa073c92d7edc098c02204d4257c9891b3c9e0879c0d9dd873174d17254c4611933fb91fff0922f6356863ea42a8b8fb7588e3602144b0116d2ba1332d738b6ba43bd16c46cb49f886a26c03edf7c414822b0aa498ffbae7a1540cb982daa9616e464e00c7ef5d5382b7d76a61082933a9a1d5dd8808b0217cb14dc2dfb5bd2de0fff98841e9ed92f95015e811e77de51dc5c96a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_576() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ce738cfeeeb802ff1ff1c4bcee7db63d8c50ae8e1b72795a48cd59ad9e9275d25e18e824f5b1a49fa218b599adfad1e728c4a2d34058eabcc31052b75ace8ac1f6308cc7aba45ffd113187225a296e60226a1e08b086abbbc6102add0ba02e36c250e0697d11988631255bddc967aacf27d95b276c9953c08d9ae0c261fe58d1390bad81f5773d73a040506a9948c7ab06d5e30e0a338e85e5a35dacbad9ee54").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_577() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ecdce133c10aa32fb4269e6196e22c7ca87e410d4c66e06acf5df364caa05f152d2aa6b65210850fa1b5d9d3c1a29f7f82eb7776b3632397b36c9324c2ea8ab9acc53046787e81c8462c0048ad7b2e7a6e83b997918dcd84ebb0db0369d274d52ff20dd22fd33b7356c9e92c473c8cb2574aedf5467adf52be55650880da53bb0e2b970104abf12eba9068e095a11872f49000c51aa8c8be5b8057a8688712d2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_578() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("48a26daf5eded5a06a2a8fb250122b886bebacde9856eb0de39a45b2ba4c19fadf7843776035c045103b42dc0a33fa1f5c1e0dad1c829594272653089c422c70c1b29013fa583fd3a2de8169a9fe15c09eed950fc5cc6ef70e733cf17c2c25c36fbe5e3fe0f2386da98ffc37333b69d229596a5e2e94cae56d800b5bc2908716c36d93ac1986753b60b512d82b76020a7d01c991d3e382ea88364aba95070aa5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_579() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("23a29a3e6f3440869806e02899771f246608c7e04b3c74f2f2c3546e303970cc5e4e1735f4bc812b9a38ce7cfb100f0c28673eff131b3cae6f5fcaf66f5619c351e3f8fd9084bedb937d052a7bf5a795efb3acc44c00fc2cf313d38362749051848f7497d495f4f4d9455584d74fcee089fa30a73a31eec3831971c2bcb6b94f6dc1fa53eca302030bc2561c8a655624eebea3ea2cdcdca1629cb149cde0567b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_580() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e5f552b61d4ce7bbaaf68c09d169b32fc41975adad81c19f6dd90cdadf1d87f7cba4ef811b2f24ba4eeb6b353e593d1b380ccf248a391e947812ce6a51306032956ba37809fadcc7057aff3e7b675234ea4330786075eee8c90092c09888acd3feadaaf40bfc00bf5dee8e011a8fc905d80d143abc98301ef3f6b9804cf2f2f6c8ba643df1988f18a0e81e5cc922e2928708afb66a6f3048d91380e03d007099").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_581() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("46b1494f4c8fb665b8f311cf0158c3d7ccef3b74ae181db5f528e6128556b7fb94165c645a463210301df37736bc5570090cd5745b711551bd70fae5e6ffaab7c10fd9a8c88f01bbc43e4f45edfc495fa57315bb590020bee61e5ce6061b2db004475c9194868c1b00d97009822aa7ec0f4c29b225aeebca82729c214ff6d5d550f30a6e7b73312cdaf3b047ffdcbf0c73605602a06a952e7cd474f0113241e6").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_582() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1a24514cd28f4e0e0f4fe58ea758d67ada15f24dc0a2262afc54a8843f465ac6761564e66172b20d5cfb0d93f2e6859d864c171ed0bb64c995972af8926ef0eb2bc06fd4143529a2e10a75b9babc2c546169e2335f3764896070e4cfdde1920638a87d41a4a9603a5f1f5c141a73393d89bf8ec5c0a49d334e1370bec1fc0f32d996bf75253bb4b41e97f3ea74dd9f94d0a940c17a99667a1b2b3caf3e1bb2e3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_583() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a0ca3124959b17dd5ac6a9289d5bffbaea5210c1de2d5146877024641c7175cf9ba8f1c954f259ab9536773a6b28a54c912d88c6531395288fc7aa3314646602e91707e6965c9aeb56aec6409b46cb130350839bd1bd1579786d5d41267ab80484835fcdc27a9a2c267000b8ec3fef638b95f62d0333099dec3287c2b52100ac9ed8fe901319e241aa0c6e966c3a640bda424c217275ea12fd3347f198f36648").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_584() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0e9647afb584a3290372c3a0068ac8e700e800ec5acfc4292774a83fa4c2a630a555f975e731c2afe67447570cbbf5835494911fb17e35adcdf97408bad47826211e776c9145830e1aeb4cdecc925b8e7b7b67681339fa94da70b3341df0d23c79a39fde98824c46647743a9ce14d7029f266b4ced2e967c443b15d053aec972ca5f279ad47b563155f2c9c0ea6b17a56dacdf30db8a2a345e976512f5fe8873").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_585() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("af4260cdca99266aaa1500b1e27f53fb6dc7f61233049da92d78213d8c7e9a58f672e921566d5cc515f43ad8008c666466840b1424619fe1829761ef74dfdceeca0aaff337fc4c32e2dfce7cdd2a3eeba746abcdd1a6f8dc5b3d86266d3776fbca3799d72712a08a1b5865d0f6a81513300b61792bddccf8928724da21e5e8cd494174491eeb2af97ea0f41a130a74ee47eb2d64fc23dfd6f40f47234697f9ad").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_586() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4cc175b14028c9079cd1e6184d452fb5168d725762fbf336c155dcf7b420179db08b50050d260da1cab7485198a1171d13f1b9a4a6e0b6a7cd8cd38ddc5f8c5d8a9bed51f161647d29334e3afaf647f21f98562ac9fd002a045c471d2b7ed77dad3979c248e5d5d47006051f6653f2d9203c666ffed4d1d0a58c5ce936ab9e7ea3e7d3f3f9f886512538141591944751d6c536d8a8b2f0a226ae130bedea8fe1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_587() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("578e955cb1b0f8863c01e2e524f9e5d756379a6ad38deb0f8991168a96c62ff53bcd1e56f338e34245b1e0ca091ae259d253e40a8f97ff792625969d6882da89a96ebc84d5979b2e873963e947d992d46faea77e82b9696d0553c862da0bc26fadec5e48181df1759dfb6508fbf6f32a17b276db0e10580b7ce687d1d8b69905da2c12afcfa8adcb259c8388969d9b0a217c8288bf6f3ccc1e5f3f3ce4197b16").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_588() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ae5181e90388344074b85a368e8d95cb1a72cea2a1a385d81a3b355345fce81d2ea223f5b71df690d0c0718c2c5fd9275759439602f1ad435d692a6ce49b53c208ec760fe591a6f7f17b89632660df4a4d72a2b8be0afd61064c6e5b380b27b4b02dd67fe7b57c7c66bd4aaaf91ac3212cd4da8a12c04f2d5310f42fb627b22b6fc1f81a4d141ff25bb99fbfeda89b341166f3756e8fc24007bafb02b27a4336").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_589() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6e4015403542c12578700986c24aac6f4caf55142abfcb62d90e2b9f6e3e33009155f7adf67fedc7e09391a5251797cb2bbea422c357d63fdf46bfff38f69666c97e1c56ec7e54ec34c7ceff3323e562a90166afab3e0d2be2573ab714bb2e21464e2e6243cdb0d1b8dd905db5e37666c5ac8e2e7f2b4bb30b4785caf4d25bc92187589ff4b200eaf110894a08494b5fca740766e22235e6b2fcb23750e655e2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_590() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("aabf44aab95951c1359437706eb299a98c9e2adb53edb66828572871d9f17858ab1e7b3e16e66d4db8fbc280e0fecd6769d2438a21e2349ae880e526b34b95ca4df8b2d62f39a3a09477082c4ab3c75c2c185301bf168b84efb76a83c1c5bf71f60974612fbea44053f4db933c82b30d236938f7bb79899d507c6f36995d1e47cb5209785e87dbe789511407ad488e1478d3ee092c9b6e131168059246d37edc").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_591() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5e820d96bb9145ab960188663fce0728e68026a09065953bcfc1997e0b7568614a77cba689271fe3e85d0dd04e2240caafb2d56d8aec680e0d89c2315935af8a7aa93088ae6261442db18bafc2fbfe365693828964698538754f1e6ed29270612296310249bd362df9358d4364112b33e1736e629af1b68b3c4730f9636b2f48ddfc376e6a8878c6e97df1a9360b7ede97a16d8a230d925c77c57da79eba6837").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_592() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("86555125c6c2e1c2c3a706a2a7fe49a5395c2e9ee7d4cd1358529492a7d8f280ed8235ae8e5b192caad26447c49555b4deb42a890d26172f1d5bf8972006675fa1f5dfa5200568d6c006d43e91993e0f35a8a8beb07c818ea6c7f8effb139ffe77aa8c811e187bf25e03101148c2f4a59e0d99f4b4e56ea04fb4b7547a49e25dc3c967c675ab2bb92c39faaa86b1d48430e0a696eb8d7568662917f5483d4c37").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_593() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5860fd0025883f790a116b492c3753ff136a6024b9052e177db63b4cc376b2b35dccfa6ccaa2b8a66de9009c73946de40ee0d9a0820f155db41d2d1397ed265b3c9bfd28a47eb947af574bb148e478426a7475a385a654b28aaee921da2cfb3b6da6af5bd9e7afd86f25e4299443a2cb4af8991142359fe9be5fb9f53421fb7ac752ea63d770627dc047c4b053785397966573bacf606878a7f0b34ce5de46a7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_594() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("035fae2a366e76f7a9ab67ff7558efce66bf563fc0fb652cf7c19940dc2aa06ed075bce491696f004214ea326c7dc5598c8da135f849208679fecbf1cb86a33b0b8f049925f9e04767f4a96b87b81f89fab43befac398d75212624f1e956a3bb298123c11f18482d38a9a2a6aec42256c0d5292955d5a9cb406cb697d537460a2756bb06b6336b35595c89f89d016323f73ec7336b977c037a75fabfc7304265").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_595() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f99b590dbe3733a5e0b6110bb0986f7b463669cd70f8f0c672e06a8c80e0225a37eccb5724eae50d6a542f0dcab6b697a8193260f8202b517ac0f3b5321072d728c3d2019d921afc016faca1aa503e88175d508cbfa9a2b65acca2082c5a2818aeb00d89166e72fee4743e7dbc8cfea506d54428b938415347a3ce98a8e4f71f10c83501c59393a5b770a728dc6759ecef1853a10d1e330f21e8ef7346bbd61e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_596() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5227a3430cc63e7fc6c2f287b3a63abed5963e8744d693e9293c92e304262f2a10dc47a1a624c157db8146a619d25110438fc7dc01fdf5c3bd1fe8956e6e88a17c9a3a976d6bffa1267a7eafa272e5b5049e924a28cc5871b6cc3d119ab29b3aafff3a144c4ef3a9418fdef53e266e289c353c9ca5e92d8de6b40df3a006a470e99b675c39a7c590095f50761b3159045587dbc8a1d5e55668c75534618a9029").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_597() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b88db3a01a10f62ddefb5046f4eb96054744e4c9e82baac8c41d1ceb6d91e2fe300c6fdb517510dcdae7bff10e758c4f10864e270e0e5cb159091f068df9d9da2f20fb3c9bd1579a90934ddcb3671252b95da7d34b248bf4c00c42abdbdbd6d23bb4c52bcc69e28284ab17dacd9549af5e6739007a23a105169a32419665cdbda7f713bc9e9e5b23a85a5924a0abebb96231f917d6f621788bf4f2894341159c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_598() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("556974301409e9ddc0fdd2545bf37eb769067542ab9625b0f554aa5c2f6fa5c08c33e03d93788f353a332384a9602e05fd0cdc040e92fa6cc1f8fdb0abe1092f380ec157886395d69952b3354c4fa6fa87f50591c116958330aa135a4c4698dd8168fae3db7c9bf236e4f958ea8cde1317db1fc2f94ec42fc147d5daf3c27af460ff7161542de0c7433cdc9c8278ba372b27b846dce830f666f7e509e847607d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_599() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("032661655c2ff25c53deb2113b7347ed30373ccf49e3722355b7692dd354a9a97b1eec230776740039f0bb6a26a29c4e4869f56b7d44cd9fcda702d8dfbdb4c54d8b79c1c351b933ac965fe98889586f54c74df4ed73fade209b3195454f58354275110908bc4751f8f01e4918c5d9c61cb3852dbab9705b684afcf4585c6c9aab568d834fd53292d3ec1e83b5ce7e012ed7d8bc809441c1d61143cf6c49bcd2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_600() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9c05d0e19ac4cbe5104b0ef6f0b1ffcbb16d542d41cc74e8403120ab79bc785fbe26a230ce963a475cdf244e8ff5606baac3a7c0c404f276043094d7dc6bb7398f995ed9e99c6e0884bade34a882e7c23716e83d1db2fb3312be98e4b3630934e711d2022609df38dc77627c90a315aea8431ef0ca3e62756002d7ae63bf6866745b50bff0bd5a79e6ccee19613346b0abb9bb2db8fdc2b09485ea7fcf16348e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_601() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("201b1f5984e36e992240c5ff915a2dd27d219fb859cb46cf52918e26f1947aba65b4f1a04ab162fabae2663b440bd5a8a470e5d8133b07bc954b0fd5a8defe8b452769b28161b653d0f674415427180d6e0890733972e2446ba2f8fb1aa116915c1f8f1cdb8adfc41ce9555889efb3d4550db10c384c55109cb37dbe59e9432b581c431dd85855ba887d4f629f7c42fb119f4aa25d46ea3995e327f366e7c103").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_602() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ed995d4d9f3a8e62b81156cf5b0b6b78aad03da3f09dce48940b82486af556e3c53959df841949aa82527ae43bcb25cbe93e3546c1634d1aa07470dc486486d91e7fd55555b5785a94f8102213ae89cbdcff798b2bb3242f71ebe7c6c224cedf508b3f7ce7a3057f68f706bc71b5875f079edfb47340479ae0364f9dd7c568465844d0e2d17fc1355a397ad117bf6b756a72470b0858266aea4ff4081bc429a9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_603() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ff5ea5a24fe8f9ffc65b54296a3ef8bf4c3c64299232dd31a3ca7813cd635d717a8d176f6aec255c3b2e953f3658e832f72873f3358edbc146affe019e83c38152b87e23d629be88034013f874f73e1066839f9efb3a6e70c0bd04e81a58d190d115f207c967c8f440e77741872e5b46fffa27e6ded9bcdebcb724c54bab46db4551da7dd6ba0bd630909863ec133dc130f895385b30bfbbf0a09aec288554ca").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_604() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e6b3d79ce5d0c859a90d47b44351af762725990e5a0c0e79f13567a37bb7c7d5eaf8c964d58cc5bc934d7f804f929f3b12e55430ebafff2c04287bdcb79c221974947f0a8850bef3fddd7319c29a49ecbd9b540a5a6170488ec78cf68f35764dab73eb6b6135dbc052d3683bdf287901c9a1da73dd5f4315f2c49209d10cea9f974cab875ec048ea2369e49c5da4ae9719b5af441d52b730b8c8c181efe46c6e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_605() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("154716021e6bb8af385f49d7f6eef7fa6ccf7631483550a7351251a6514507f99417b71edc4bba5298bb47e906908ed8e99b63996a66b34141cecb65a7a0976c63856c29b3ba1f6542031346e9f2865324b58c8fb4cebd980ce19f3304a8ee072f67d47cd07f57c31d40f31eff73d97d8c117a7e6dac883a5115a0858b73cac67bd1035e2767c580c04f43241afb93a8432acac56eb8d6d557a3d168b5b538be").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_606() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b3ec5bbd558109a0ca60ebfaa1713e198e05b93aad6883ddb28a7043267434310b61d88fb28c5df279805665ff0ba8a675aed5fd9eb6f32effeae98267176462515c9f87eba247e3f56f7445ac99214609e3a0eaa31c0e344ded6d09bb75f86b39b16cfdc8b8c43c3420564e3c55e05c9c4a8d4a8403da64450aa7a3e63c5751cb76e543762a680c4d77f2da88a797f8030eb96fa56e7f7d2c7bc578f2fa217a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_607() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3e68ab753dc7e27e24211c6bf417b93cc5510a9c0e5bbd97389a40b2a039ea2061bec853b094fc9c82979e37d2da710e3d30d4aa959ad888c10860216a4ad7865e498186691ef4d4af788fe69ff9d43de6908e9c79c97017d10c1aa68cc0ed7d74e1483a8f9b26ec1d1d999b33cf335b3d5663618ad83073ab24685dfef88a74418ebfb3c285b1d3062a9aeea05f6c43e161c309d02e76548a31446475a811d4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_608() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("44f4891576b4de78f38b57792b17a8259921939a2f03416a42047e3d9a245f31b15c65ebd48d6b6f7ecf76a717d32ec57b80ab557f1ee418ecd72e0e23f9c9185f20ad38da2632c1fb00c0a4919d9745f5279c2ed861bfbe496fb044a2a1863d5efd2c28b732cc4c24b3053391391d53f4e064a30f3362d987077e89a4d56562258f4837c5b482e318ae630cad85534736426a34458b8618aed3aa9e39610342").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_609() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("aa54dae59f2cd95eb1722c7d97f74575a14bfd3089a1d731de81a53f800b1d4111ced3c17704bf4017e7481e54c266c0d07a3f4f458660d142791460f2304431f9c441134e87e755e3f044c4e2bfd37e5959286712cda69b0a74b8996393d6c6f74d87b4faca9f8ab2fa627df8965b377917f1cd87c2c27fbe28b48dd6aca28490c5e72e1435404e58966100654060270bd429572e0360a2a2d35604c91738ee").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_610() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5d2bb34e100c9bddceaac3aa72c4f05c406bf8a4df27b9314bd5e9b599dea1b69f44190cfc80f0d4476a90d936dbfaa6a04d744ad4ea39cb02deb987f140a9a72a25438b88c65f8a2c795e3571b8112de902c3b4c14e49b8aeebfe18ce314f296a6ca1657b5e4732f761c653500c14711aa5b2ee5bc0ce89938b1bf439c426df237fb5308cebcbf7dc920658a2ebc686ef9fec8dd43bd52377c773883168dff8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_611() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ec523f6d9050d1ae49a4d5b1ec5506d8cd1bed4f88426a828f8fe5a0116dabff822af8e74c226288f57730b527dc29d6343c5c6caab5e4c37e8a10dc4cf16bc3ae3d092ac385e8c0910a4bde59f4447dfbd2eaa704b79bcf109ba4d166497ef3d761173274e13b4b435340bd4538caead47b3a1cf655d1fe8a02e7dab33397bacb27b3ae00af4b9a51140d22c6b4fb2398e7ee9ec369d3f5fd420645e7038f83").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_612() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("92daeedd5716ef219dd74053c4397ee7a8a8846fcf6c402789cb2fd9eecc6d8b58a2df0f6330f1d9299f4bea092bb0c60864b997526d8b58222f58e55fc4234a611972ef9a569de681d8198a623cfcee7b31eada7733fb5000f82f2500baf34f0fc15dfa7a07ae4a64f6449227d6e4e2a43ebad01a4085b40db6ac6841237d71e7161e4173e5105edcfcdec34e8d41b63f65273af7b207abf15c3224788ff93b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_613() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6e02fa24f95e92cd661c93e243ac0288685bdf18d61d28238716e54fd811a41da4afd167fed6b5621a8a995d9d9111c04c702cf060ce081df8a407ba81367c7e5bcfef4116e636bc7d9b3c0750090811f25c13a57d680b65f33493c7e3e74318e835792009281e928e3cce04ea58862feffcae22fed683627a80518c9b5789b93fcd2d1b8f09c7e69979f5bf2d3599234675fa95ce65db406affd7589cc8081f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_614() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("de105d97b97b3974d84af59586f0423348f7deaa0e113dfc96a5f3aae8416e6cfcda5f93cd848de9032d37fac2033585d2d9296b14b902b2dcc97e92f29d8aa47f7622c3bd60af5621dcbe1f136dd568fb6932320ca9300f2bfca0a18c8e1369c5c22f5d1f1f5844c7a7980cefafaf645cfc7f6c2d4e942dcce5b13edf6bebbd171cd6f04655e875646f489eadbe323f907ed7a8370dbfda7acc7fb88466e1d7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_615() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d5b981f432c5105b286d9ffe01796d4becd70d0b9347751e28847d499736486368fc78f8248f2acc9360444b1744bdcdcb7b696fa96978122e8b2c91aedfc092adff5606484c104914552c4f0ecc28d9981f402fdd605eed13d4fdcec8ef31d0319bf109f7fdd41ac929812250f2be0102cedb76874965489d0512fcb28422ebfa93d96a00a68a5b5caa27cdc208c589d65e19e48fe3e577b48aa9e5c46f1b42").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_616() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("732411ab1e3c3024b2ab20ea31213cce9e04bc32106869deca5de83450da4747a7ae5acc48f3e939b0e5b42fae50cd07f6994a0ad9dacae8a65bb7f9ecbce02b061eb535fb1a18f9af8a13ec4b84f384831604eb3ad83129f8252e5b1bc18fd199873e105c1e9aeeeb356949333a3ca8e418a8cea48890792efa75f31ce9c58e24977de49129ccd6fe7036a7ccf1d185aec0dba7699beee6bed0fd0c25ad0c5e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_617() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a54bd5a6108aa819a8b6488ba79c35b33176bfb6691a5b2e02d624641135f0467112a803c1697e133757179915a98e8a6be13a89a29ff84051a5ee55317e3958c167d78b6f214c74b6e90823f28533c2a69d9f9ddbcd723b3f18709edb538432b26da95569dd1970846ea380505f8a0a6ae30acd29ed3904913b9c5135efd25cad8311428e35945d303e55911a75e75e675b8fdc7417746e9543619813ce3586").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_618() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f9a491f9452a059c113e1af9a9cbf40eee527c1b216be279991ce9b5b2e490bb9ec742fad9b4530af99dc2c35ad76e185ffd87c80fab9996811bac9e02ed1ad557238ad1382e4703c387333378fd74e9f096fa7125d270f6f5e12511dfbe45473b5cf2e9f4f903c68fc6eeae4eab8e4d284e2e12eeba2a66faea930e4d8a0fba65fbc06da68a1718f7d9ee98fdb7720f5cccb518c7e371e653719ff1f9392a76").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_619() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fde98fafa61479d4d0019e234d1d55622e00591f13380bc8ea3a5ff103aef38cd9a152d1b216546ffdb438e7230b6e83132e3db7e1a06a04759986f25a29495dfc5e7264565b4fb689ef9f0a43676952f8251badeceefdd02fe962aa5f24e352b7f360afe9999ccbb8418ce870647f8038de34f8fdc07535377e51e0ca61cefe996bbf8c3d996bc4991773ccb8e6f3674ada2dd9b571149f2d13183c4eef9cfa").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_620() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b0968b561ae8f9a2758bf8d77b1def392d45f6e9de4511d788375e60c195cc0f1347e7600c5f86e8b3f640c25117349599c56508ea6eff7dd0711382c4d0a1b307aadaf0bf6473c393192ffd9d7f8175067000aaf565e2eb0ab564bfdb04dd1abf46f91d7f8637ef5e3b8da5de8bbf113c36d0ec35317e1750cfa88b336427d9e83d0caefba319518f5c246ad2fca4016c42cd32bd8652fa19cfe317df5619b5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_621() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("97034697cfe90cf677b8f02224f636e4e246d12d996b281ceeaa621eb4ba1a892743f8ce29771e82159f8f1cc67e22288d69e90fa907bc33b15cc9b264d0d58a466d0619c4781af744b2c76841ac7b12f2f5c83a25de1120c60d0ebf66081f456670262832cdd5885b0ec31384d1f9c53c481a74852232b1071d0e43e31d07ee020a2ec85b331b2600693797aec972dea3771409cac5bc20b8666eaaf8dbe320").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_622() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("44a8b16a81e73755f5f2fd2c93f0c879d6ec03b656b37a09c464d65215643aa10c94ab9839a9acafa492abed39b97bb843ed64edde05375cc3736d79c94ef0a7a28a187bf7d0dc74f8742d4eb214945fc61d4a0daef733241df2a35d37ced889fef01080bcf13242b56283b2a5c9c0192a2954c5d04949722ddb83cccccab52a148ef4bca0564e55aad97c5b18afa2139a02cb6f00f49d93db7880af13d4d294").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_623() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9b3e379685f188d2684669e858a09ae642372f9fe3ff9c680525afb8b2b5de5f9e1f3a6a2b4769ab3716442b3b2fef434577850d32ec0470c5dce66d980d8b36010440898f7280aadde33507dff98086753b6c64ca921b1328aae2617eca6d0eeda28aed5f01325efbeae910c2280818f8badb32630b4d932b2a0b717ccfe25f35865a5011add1f886729236bb408a867770830ea1cb330bf7175ecd411c875b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_624() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0cb1dfd2e8ec7d49f0b5bcd1747efc838c2b37d184fe251e700b5f81d9dd226cd89ef1837c2f8410ed3f4c2d4d8ec08770ed69b3a60e9c0c00e1d3fca7510f48bf841700bf951baec74847f17d7037dbedb45a438d72c135be668044d9edc47266cfbf348421d348633921e2b125a1305667de556de44128058101a0698ff4ed095f12336da4f684933afa4bb17886e27b9adafe903609b4db5af9702358272d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_625() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("dc484f2c8340ab889c1dbbf20bdeb1c17bc2190811d2f048cef0bcbca94cb8c98790f67c769c2258f8adbd0dac8e036667c552cc8b168aca3cdf2e248e82616e0e47c7246981535a6c433abc26cc23c979ea47b0e963ef7877d22d46dca5f8b6f4834f96aad0d485a562d6bb856ed5c869b216ee29caa35dd83e1cbfd8de6a91296654a86f396ae517399181232c830c22a413b409ff3cd65baba197fe3705a7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_626() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6f9faa473ab7114d248af2d06f3c1da2317127de7035a0d3e01454bca7d0e1b4a284c9ad0df8ba41e8b1239c0951e369f89ecf618141a52d85e8c68b6dfe7fc877c248318105eb8face82d4ee9c83c5689a9992506033806cc9edc84e547787b41c92a5dd3a61d70b15ef1886d27291044b408333bf64bfbfd669f4dca12d9d5f190fd7e84ec8f34d02c2610c7a3dee67f16cbdb5234115a8d063cf46537a9b8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_627() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b8a02df782c1453bf90bf03de14d22c7b09b3f06c1cc4efb8644b9ff5c8f6273935c6d174fad0c8fb7ddce278a60ab8f484cc7bd946a77b81070c3bfcd20274a6c3db696d05426bff71afa6fbb146865ee4158bcd9b44cadfe26fbae382ebc2287163019766cf7c5f50890c93e7dff89cfbcbb26c151138bf86585cc12837fbf36cb2751086a76218999de966fd94820865ed5c22a170fd1b490a9626ef4e022").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_628() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("29537d75e5b0dcb3e53c93607893ba8c3ffd6ffe38040c6dac21e630cf16c6ab74635c8bc360b401c9d16cc3d82a808330e3f2c132a613401fb2108c8f3f207f5d0da4e10f08ea50a5d1a1a722072c2270e3523ad70f6d8f1b897d19c91df54606730fb86860de67ced71212cd6fb77a6c96392d11eda848799374a9e9e6b48c26df36c98463231b0b70af63d7ce74e6fafd44fff5c698f0bceaf54e1d21d04c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_629() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("426f978d526976afdf2ee7e150396f07f4ca52de7f5d1e6ae9dff22a396d8109e25b8d75db929c254465893d21e781022ebf4ab2314aa468fc1ada89625eeb96d0ff00c7955a4982ddbaff8021ddf01d07e7eb704b5a64c090a8bc7d2d32d92df529a71574f2dcd0ef352179f2783eb32f9063d89869750e22c86ce26f96a45a36ddef5f44c4c3dddc573eb747201971e8d1b4be7cead9fdab46ef68d29e9238").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_630() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("197bc78b2dad452f7b303f1543cfdf2b89c109645096ec5090b012d55225643463af57616087aae185960934bd3d570123667120d7189c3eb5891ade86d24e3bb7a135b0e03da3116fcf6522d8aeffa5d769cbe01478324150a9e5a02b828cf9968f093ad3638bd635ef517521620a1fc27318d5baecd2b8dbaba119a172347688bfbf15d3f0e4502fbecd4220f868fcd9808c127736f8a36cf6a51ca5f5685c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_631() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2d242293668ea79630d354156ec89884ccb056eea01a50e48038764e745ab162a02fbccece1f406cf36add58cec1a8c29e47220a521dc5b8c331dbe2539a27189a6e78c54b128ca63a1133909b9aed7a1a3fc0414e3db760b92090e78adabefb8e1135def332dc1c295ff8a5c6db964783814c443c16a8fd6c3c3f940826137638653041591a78c664b04d71d66f7dbbcb1b18ad656d2b83ecd475126287cdbc").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_632() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5bd981f7dd544e56a609dda3c2d94e763c0cc62cdef133e116bc1913e992b50810278c9ea445dc8e7af7f841c982bb80e6280509106b4326b5c916bc047c66285b0a3fd69e22c762cc54b42ff3d55ab07d862dc11e6fbf27a97af3b5373ea95f40a3a841fcc31887a0e229d9c25dfd66d7265cd43d60c38f0732958ae1a2909d28a401044bd6915574a1eab08c0c7aee88c926b50dca9d46a43034f768a4cca0").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_633() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d5c2a3dd52ba1ea1e834f0380f4ee602dfc5064f0cecd6573981cb7ba976113623711c1af0c51c018fcbc4790770f4c61279232b746eef0f398df9ff44230f7a2ff90bb062f864e4526a0d9c050222f57c4feb467a43e5b3f7650e48bd77832a04a44edd972b3fd19108b8328dc65b312a8efcf0ef16a4ea9c9e3d013735616eafb20869bd02e6fa80c5c914b24e6f2f1e1aee524d694013a5325aa67235c7cd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_634() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("dc7ed95be82867b51d50f47149374715baa348bafcf77c4eab975284e7c41a133b1504e559e71a6ec6961915f5238314f01877fdee08ea08d3005da1bc7659327b1e41a02acab24c0fd1b075d10cb69901753e55528ea874c6491e448c5c4b60c2cedbb4e43b880cc232a96e2a3a3ce0b1b3670cf466a63aee026eb47ddc45f3f7c30315da024609a909109e697f623318dad38af321bfec6572382ba57f95c7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_635() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7c3d74cde2ee4d55d0fbe90f73636226d1420431178097aa06c14c6d97653d550db7a5c1c2b019ab28046d69a1743a9a2756d076ce66dde58fcd972e14deffba9613a403d6f1c06b9b3694dad5d61fa7c14a9cc90d583fa89e4a1870e1b2aff5c8d9f2d5f814f755395e21f5acde337983b63e498577152cb425a8b23dd812b97b7c3ca0959b29b16f3138524b7995df25525ff58521337b3be821ae55277986").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_636() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ac68ba034b6dce0b768d66378517c0865ac6ac0f1e0d7074e1d7a9cf3e41c7a89b89770b119d1002a581158314bacf336f7e8c43cf5fc0a8a82a3a286c163e0fe53d9e5bf20b44807689acd0905cac14b4404c3949be382a3247731a312220b54c66d890a9ad581fd6f764e8fc1705a6d79bbcff5f515ed266f9fcf80a1e5a3264f6e3d3f8a9486b35cdbe131f99d280d9d23ed1008c796eeec0c5958dc90fe0").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_637() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c264bda491303f0b852622773257a4817b8616af239677a2a63fd2ac8942ba323d4ae11ca6586537ade15790b8efa91931e134e2b1c6c91c226ff236f891c7c18242b2b824c91574dfb37054d5c415a73b378d6111a935267de02387a9b1ac7b8e78f027c19e562addff26f3ab2ccd29ab39fc2aecb27901b5fde6ec72f018cbd73ce9bd9c3d42438a5cc1e52cc0ddeaa39cf0e358dc7de902454e9ee489df27").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_638() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3f7b88a3826288f9b837e1f96feea61c3a38cd15a9e2f5e46a3925d54175bd4fb173c54ccc5e60d203817fd22918ef6b0280649e410ce04872889c1c5c49d2044119bd83e7caac5df4728bd16c35425d676a77848762489964b112cc9fc9cd148193cb1df7b1883235e2879c5cb5997b71d55a7e67d8c2b377f5c85c165e1e4831dd75af93eaa58bb5d05160f43dcbf9c93784ebc9d364bd16306011c23628d2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_639() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2669314df2b657b1be6472165c6dc262fe3910fceb3166e5cb8e4c67c8739cfbdb696988d9510ae3ed8109e1d5eb7dd76ac74f76d6fb154c6df64c92f54e99dd37e4b755965af734e48313a99c77e4ff38eb53015659b8a52b94c5c4ff62a1ca6778d20d7e060fcf5795b7be1b1a1a1448a0605ee6c10efe8afb4ede8b58b69a4ff511fa5a706e164095d62e44ffe18734075a9825e131f06d33174f6680f349").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_640() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("60b86b801b7004c65a41d4b3a6845d55f6a99d976a6d8050f784b9c8761ab4d25540642db88e5a87f98d05958494d094d8102603691f55bcdb5aab85a0b305be26064b4a1d8b1f767ecef01dc3657417c9017929a3a29fe25728a3921ccb42aecbc64dc95fab0ed98eeac7f431870a64d045a0fd50184a125385b363d7430c0088f2f2baec15641ca1406e31357b26d870b9cde3f126375cb3f9f4beddeea537").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_641() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5b93bfffc99fb4396ba3f6025d28056383c08334ef2d4595200b0071133694ed68962edd58b5f4f0ef276bdd96730155a2e7c6f5b9713ba5a52ddc9a6e8450f3cd1414418485e6b17ae87f7497b036ab80c3ac36f188724cf4da4869abd7daf0729263ec005092587e4eac70872b2c13ff91fa5bc4b928692fbe16674f796e8aa8777c0dae0a258d7ac6a921ced9b58d4acc2c997324f89209c2b5eb47d2c080").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_642() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9cf82c714f24f41307000691e346c9ec1f92777f0a2f249c282e530761ad3c3c86b0a7dffc86e274ece840d1ed893262b9b9bd260fd756cdedda57e514184934b4cf5085e125d6c1174367f717911eca3d51a7a7b91234727dc62a54946428f6703070750b4376f4cbd0f2c78235a1b3505d0f8eb7d02de63d188fa6fb8325d780dfe85bf9e0f3d95df4772881f3d3033b92643c824743587c9c6687b58c086e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_643() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("625b8ebf027a7ee727743afc99d3e3707513f34bfefc94d7969766b5ab87ee9039d86c4e47f306ccac2ad385b67175ec7f7365dd2d84792a27a21dc15294072dfacfed024b7c25136875be30b28aee050ce8d67d7088f6c439c85bea217f557a58dce2b8bd7f0fe2ebd6a2faa5f96b8e9ff1341bcab4ce802e7ab313c2d8267021da26e090cd09f4deadbe03f4561765515f0b96a8431cba0a1a711ea9d6f92e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_644() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("45c5ed2c14b5fa699bada6fb3c5de70e2a9fdaab0e0bc05b00dc5b7dbc7830a71149a76e478137b89006bf5f9c67f0acd352f8902f5e47b07df4c3b6eb34fadae8051277f17424bb66b2a5344feb25a80a07f176d2a3e128f88780d50d204b733ae6453662a64ccc11afefe4a28c68626e42e910b50877729b5783a89e93661a59903a84ebeaf8aaff80d720d2aa17ca3ebe2d26dfdf0d079ebc5c2027a473e5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_645() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("dd52272e6d41fd6a14cf71413c19dd0a84c31bc4f11dcf49649cf5bc1eb4df83198d88478432c40943f868f0ca243477321be699e5bbadad057715c3f1117bf463c83583ddfb6727a5e5b51e0226651bd30d644b6ecab0096e4d18deaf5224651f15d09f05eb23482c21f135840930103189011a0a08d5b5f124f8d1fd5fff8a663dd88694bcb1902dd09cf1051838b7439d05acaf6a93eb4730a860588cded5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_646() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("51d9001a396186524dc19dd5a113810d9c1785488947a7534be7de2f6feb77e8e3627bc992c0fcfbd32dbfa2d7b797dc83f9eec5e1779f4a64afca30d081e9daadf8d969a7b96d060991580db48189a385e3232c8de52cfbd71a0c5f8c14b48ab6249d46802693b8641ef82295cb9abb965b7a95b3254b2ab646486a8c0b6b2b7286488cfa31d3a7df1dd08e133865e06bb95fac3f94ae2a9f0fdae4ee0ba6fb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_647() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4d692a6fafe4b55975e4db6e8306fc49b949d1d1fed494196eb92fe3faa37837672da2f777b299788ffc969643973e6fde506dd8cdcffc2e5ab7798d3be2bb576351fc4ed8cf0c7c887f715e5fccc2c16fa501324cf9791b3983a5ada8eda3a12777c3c9b61b0920771e39460c419e60db7c02d11f1e1b78ac23fd4ba2e89fc2dea8ed2b2ae1bdf7976abb5f3cfe0b0b89895ec03d63187ee1164a883466b21f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_648() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f2851eb1764ebc2063a97a38d61c6184c247df5d745aebda73a31f6bd3340017b5f6f2a69a63ba60934a9054547c9499ea752635a0ad70d8133343d311dddbc51eefd1f478f0fb69499761140db8ea8460628ba393160d8819aeca3f03786813ace1c256a6bbd0ed38bafa64966802b0cccb8baa000c2da23671a2330006e4dd5752b3f9652e2b7b86dd5d2651a398c3d968ab8dd1599e1ceee04067f852ab14").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_649() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("02c52f0ab1b77614012ea2805afc947755dc8fa848301228ed50e044be2717d85480cf268a50ad15b0c768849eba8bd426a10aeb1fa5ed0d3c3a9525437b3b4c098603a2f8872ca69c465e76366f78aa64d174000d4885fd5daaa7959611de71c90dda91d5b0865c17285a4f725740a032c1e2798592356aabcb658e0cf417cfe131f9dc0347614e1aa544f112569b63fd0235e4e4cd6046cbc8858a96b913b8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_650() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fb86466e6ab0000ad025e5b26691a2f7e8dee241671a77b007b150e851c96c850a69521aa71fe5e0fba170f7c6955f4a6959591ca4ae00e222cbe556731c07ee5f27dd045e23532d0f69eb9e8036aee26848fdd62b7d3a6227058c57e07380d1ed569080f6558a5f10ec5288b3d12878108631b9372566a99e316b93bc9225861ac203adfe9d2cfc7059bc99d95bdecdaea7582ef7beca06185b88a54b54eebc").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_651() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e1dad46057f341da41ee1b9e46e3ab697a0a1ccc7a717ce21be02407b6ee8e848e48deeb049daf8fe11322c66c48ee041f5f4c5f039ecba0398e9c090c921754b1cb85def83dcfaf5bc7b94004af894fce50c27ce1a66f8c73d618b46de0ec3cdaf8b65e8f9bf9f29d8964137d548a2c8b3e85fba893eb2def00c25c04b3d2de8001285849d2714566581690c2b36a2f1717e588be1042e62d3bd29213ae07ff").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_652() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("138e2a29b2f50e32cf7fa13696c14bb6ff13782316c9b4255dabb13e735f99a1af1d7094314753fbebaac0e3b4780c9481cb97bbe54b357f6cbfce5b88752074eae365a322384b96f59f798bcb60af55fa0feb966187f5075c9a29d9191b5f7eda1f293dcc85880834dd77b483e59b0193ac480f40f3cbeeb9e46c01764c35b679e641407e6ad7583650a21f16b83fc7dee9ae7a16605e9b308b6e7250df0c80").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_653() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e19518e4cd2ef7844a9564856455bc7f7810c7763c530800d6270e76402087602d0d85f628eeca958282d265e807af4fc07ab5b916878d459cf3a828a7297594da50bf95e5d20c4ab552c903b95b9141a2a86694877e8211dc800e4168196e119289f64951d6d53603d0fd7daf26103ec760689e4915444690c3eebb4fd006a23786cca4269ea9cb6babf2569d8623ebb31667ca978346de809ee6fe3efc9b4e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_654() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bfbf60c618a95f026369c03d53e698ba70638a3183ebc1de17abd758198b00b2506bebf27c1d04e3344d6ba8be70bc0eba9e6189c74b8c53563b24d1820a8ec0519f082a28f66c85b2a89364c9f27edb7afc98ed9fe1f5aa15ab0334e4f838a20c5ee7d531d35bef4a1f2839624c9b07972989d0c6d268ab1cd04f56a3391ea19cc2bedbb0a66cf4aa454752cb7756a4be41d4127230dfb96d5e995e8cc91d06").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_655() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c4e206dec018e26ebfccd58954e0e49da4f96e824e3bd65b33119c3ad15140733ee1a2e4fab748e9a0416a46ee9464f2bbae2c33555f34768d28ff50254ea83f9c9377ff0fe8a455ff67faabdd0936f378ebe54c7c5b16a77d439ec5c44fffceeafe195763291fc28a2d5fb49afa1a884e61a077281fb65207f01ca80b4123280a488f4a31ce959b8c939364be5aed987d39b98608df57740a7794b8d7db1461").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_656() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0270fd9c8860237bf3eb6306f59a0fe37dac24b281161a8522076ada705c56acecf92c31ee93d184dee46acb356341eaf7bd3a3ac27f1ff860f8b8834eb2b84d20cf3506fdd0ec0d03d4a5917404bafb3cc19af3c3d8673bcbae7c5553b698efc03c700cdfd4365e11d29f7c30ebbb4cb8750030fe16db20323049c86759a29b18461c43ab1250a9f66f090fc0b2afc7059d2fd63d498cdc096039ddf9f945c6").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_657() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a9055d3651705d5086fc8b90d561a32251be21ff6bdc043e4cece010b552477705f5207ef084937648084ce8c8e3f23feafe0aa3963fe9df4999daa310e0f783965bc044a2508ffb55321baf3556c5eb7d30a59b76d444a7aa2c6545316f3912e0e256cf9b7e95bd7f3c88d12bbd6f1e927c0b9b7b39256986c7e30097773922221cd8b676da746e94147f515ff98b6211de88ebc2c83c3f3b4b078071aeda6c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_658() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("65f8e402760756e3fab4f636f1c760b22892852ae0af09c9ba50fdfc9900085a225433537fdbbef79046114959bf45480045afd0274f7d7e38e8e70e5d9d35af4534a9065fe4f43624c91ed7aac8f1e06cbadb3654f4567e46659df4e643c03b10de078759b75c51db23e4bef01c4979d462acdf3e84ef35a706cded9f778a7e2e3fb93d2fb271c069af5e3a5cbb31f7731131cee3f0dc07c5f20c18bd8f50a6").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_659() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("eb59a1b04f3d8a033d45480f302c8d91be9901feed0ea2605b0e2fecd656106f954529ff6654e9841a6efdcc5d0322536394bcd9853f111777aeb8b58f2d5137f3d72fbc28ff5b39c0043982b4642c29195e8def632d51c1e5c3a37b838a33cbf6164d8c8fdfef36b12d98144c89fb90e2d744235c05c89cf4bb7dd6d79f1b78ed3db9a3eca0c0046e329af3697e8922a1c153503529086ad05e10cded13ab4f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_660() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("900813189bf9a3ef73bee735d9de221a7031948d2413263a7e450bb616cd9dc52855a9796b5cd60dfc909c384e986dea8cef3b47147fa3de00596a06612b708c5ddaba6f44b679051680c7d8c2f7f1846dfc633fd97a292e32337df236df819b4bc92af044a91b8c73849e5aeb00410beaf208aa81b0c4167aeb9fd6dbcb3aee7d999fd49cd52bc5d27b5a7bb69bf7919077da335e91f85f07a6a02bc6a717f8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_661() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2721672573cc974d08015c15c00edac1f71d9abfe2f9dd75a61456697f9308b0a9be703023187d3f884f52049191b6cbf8eddb804a9242a21b627a2777a035fc8f45cbdf228adb8393c98fe55fd9b155f103b14d3a77e79f5c9f9184b8620f53c071c65f6d766cee727b833336aad19d5369ae993b5d361c7f8476a4820ebd607fb5ce60febca2dbb8f29b4622fc86772ce8faaae547c679fa25aceb892113c9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_662() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("799cb139e564c92e02aea7c5f13b9743f304501f334814703f53d8811aa9ff3c4b49a68f1a76da5105435537d9506e34279774e1c85ce7248e96366d65fdd0b29e2e7d3885d4ed58cdfc6d19e1fa4bfcf3cf159cc6b6f01634c2fd28886aff30a3d10277ec5b248d155f6ccd75d0ce27fd6510035c6af4e5a5a8c4b97c3726102877d0e437bac97ffcbe1d6691aaa2812f9b993d4d40d94018b7918e3d42554c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_663() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0aa835ac4dfe4067bb774c0be58f28e426ca0867cbd47a0f0f3e8cee28a8a5a35b2f595223455752326b4d58074ef4d267fa95b4d96ce84eb20fc7ed8d55e4823471e6076aba4ff265d63669bd17b743f86eb59878c814433791b05de1e5f67a5b4b8f8f8d279d15402bd1dcd7f1f9a96c9e121bce538d5def11ce742afd1c9ba312065d89b730e18569db604e8d9c0d9a67830e8e4615c0c3dd923590916e09").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_664() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("164796e709b09c48504955b521bdcd130a01fdebe5b9f76b62c68706a82aee27fbaa99d7e588e09e8acad27233687e83a926adb5b216e33416f57c67b18af315146647c0e6a03d192518275a4f23efdc3ed6106a41002e458f3d85103361eff29cfba590096add84bca8c73ceb7d87ad58de3214a3b9b77689ac66c857e4941f02e53443c13738c03648e91fd2c9e4d3b84d5088f1e9677037035bee47dd67aa").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_665() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d3253f12f7aa01d436a95b1ec674e7a86beba75c90ea1f2fb796c6461e8bec803af0cc1d5a1c8a8184d06e4ca2703ce25714944288af8d9ef302265714fd4cae07fa4450eab1d4a37bf6ff004f142e1c8e12242d7900a8fb537694751155e22a494255c0cfa4c7b85f7467486154083d4fc5af1b27a6899bfeb45291276149acc65b7ea6b31317cd8177a52d294edf04cb1b953248834c7659cca8e9ac38d394").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_666() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("54da77310ee9d048756d5c0edc27092b66c0615c7e72eee3360dfcfcf47392c9fc6c027cedf6e4a339ee3efafba18984401cca21dffe71c811134059814d9c40934b051ca1dee548f1649fa43e1d0c38ef99f9d0e031074218312512badedb2d303f61cf80ec911c6c9e0f32c555ecd25a8c61f08426ebab3c566ebfcf1cbe01b86f797aa6316639078640aa0a4f2c50cce69a90f39ce1abb9766c5fb3217b1d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_667() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e946ae7864e9bea0314dfed562b15fb60ce9c49ae694e3ccc284c1cac441e9a5c51c0588bd14d6381df6442cf1ba1b2f9442a6fb7e3dce31dac2e7fe346d28e5dc71f67176e7cec28d67bb52c5fdd35e088ee02bc1ac245175211d39ebf58f43b91b779d5ad9ed8c23bc8be6af4f71c434ad7e944c09478f13a1f400981cfd94cc4b9f9fd592541b49525cbc370cc230c98b1c0955c04b3a2a855645d0aa064e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_668() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9d145f9b43b6b6a0530c236548e5a81ba418953aa2319428ca896c8b18cefa69dbb94c0ffec2a87aedbad9ad23363b838172b7bc2b186c767197e099bf415a5141bc11a3e17d04945cc22c0bf6d71d72fd5af14669141e88f8b16fa01d3f2faf6a167630f62cca0255ebe54c77c11fa005ff8e45bd13e338c8a70ded2a1c09c18f1c90ff8e316eb52b943ab33153fc1a4ae88b762490d87f2532e0e2e33317d1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_669() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8caba1b3230d9de96ed156bc7e5ad5d9f9839ed5e4cadbaeff45c0f9691dddbd9170f9cf2087d95caec1f7ac36c46a2177aae5f7664d89ad3e217a8f97edcd1ff39aa4eea636c2ba6621e0a17a5b7a4d03137483ba4db148b1b74a7c142064cf7f2cb5d74482546f15ed8df97f7e053ad3dc3f47ae4d3aa4246988dc23cf1e46dc6f380b9e207bfe86769579f1646d29065c75b5b733ca5b2a9743bafb07765d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_670() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fdfc4a4dd419f97545fbb951f6bc52f6b6582bf3b98d7816207241b1b371df666f213466b5d3c451b43d5511a43bcbd713d49c243eb6331becc8bfdde58ef25e5ebc6755f0e436bc431a63d447d2c1dbc705fb78d183e920c0e27119e625184886586610614b23029b188db9aeb9e4f8eaecd8a87c06543fb6135f95a8e55dda9e82be50e07e8188d5d5222097db7766ea102b12093f069c2c3ae381fc19e838").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_671() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2d6a197b0c0f9c7ec2974ff71481f89f07c7143b0cded180d53177fbc120196538e80252a18acb2a9c7a8ab4129ca00595a1441f690fb3ed66bf8a05f0fe91aa9f2695b8301510bf1b32bb0ad94b1955de36826d9bed767d8d688aee61ade3f32ac0d810ff3637dcacb99e1481fe140aa30f8148ad49e099d941874e1e2ca5e39a9bb03c69596ed065d3fae4d5cebe7ea8939131fe11bbb99b31a47144b58b78").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_672() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("242c2998785ed4d90633c3cd790b490888a8b0385ae3e22ef28456333d63f7b07abba657448a0cdbe118b864a87c960fa6f1061f735ef7efb154b504782c27e80679faac08606f16e2b5ac9401e54884c70dc4b2ba6785246407edf27ebfd0b8119a518dc0f0005e7236dc686c2d6954de2f255e5fb6617066be8f501b0c07f4771dba4f9e518e5032c85b03fedaa232f2b3fb2f376b5d877fd69f131c1aef05").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_673() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("dd001b140132409027adc249c9e7d6384657d82e79010301d2979fb75c5c88578bded56ca85839f456ddab5d9b1b3bb44cf5a4137ead35eb183cb3db63dc02773d3139cdd02a4de569e49094526a9ff49e950276851b532881ecd34b9b9017b290fe0fa4afbdfc2109429a0185b78ebd5ffa60d0a6be02008870a8aeef2de2dd4ef541c342ccb68c7bb87d2740f08c7c85abd53c2d6483a7343fcb5b7386145b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_674() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bd35f209cbc2a6639a4c41b113c2116c82b62de9f3961a7dbb6df83cc8f569b772f562a09a95794e845d28e6d6a485a659ba0c5fe61cec90cd916b9a7f8fa7a44d3a8117f220131773fd98dd49626fd0bef6d936179c3a4d386172565ee81ca16ff810ddf8aae1e5769cb2b7eb69d2890c05a5a49e3c84a66d16c7550d662767c5026bdfd78880b806a6f5a3bf54b064f10cef746797925dfb08f3ede75e241b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_675() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fd841ef7349cb65ac5f6ab30a970ea106fe02da833a15e9247ad1fb495e0b3cf9a6b0c7d731af6ba95a4543dad901af0f8b4ac6c839c4d428a8b1ca04118c772779bbe4faadfce224fe1ef1b55d88e5f82214b9d04ff50835f288210b40bddedae82698ab5c24da2160d76127b4685d6f818f7ea0b37f9511dd50d641f2f205638df81acc4bffaab3dfc3d8005c326c39200d9af846b310826feb0141749c117").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_676() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("76e5ea23e91e0b80de086dd56e09abf7d9271a388558f8f70e259738944f6de00c14b30000b8cc90b2124a1d80505cae2f3627515f4f2efe7637a8aa2cbf7ca26e31a46eddf922f9ad2ef36bade1cac4bd5983608faa90ce7b4b9a3cdd445ce3b62b49ec50f81c03592252b9b62dcd5cf7156d0ffb02f1880b8354f5dc707036838f1614204873c6b19bd0bfdec36fde37a47a98918e1bb0510782c5a97187dc").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_677() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("98169b0a5accb487590c83c484a67e1578b59a1f00bd1411a8a4dcec043fb03c8a30917ab2d6d854a0a64da6ae81fdb8d62b0ca98ae51ea0b3a9b7b5f9a1ba1a2d9b76235ecfefbbfd809a42e2e424ab8380d1b2756ddf8cfacfe78f60f86e6c63688a066c5214165bfe04ba0d00ce756f9ff79b551167492fc6c6b6dcce201bff39ad4a8ba97c533af0eefbad4dd8416f7981295d9ff151fb4e0257b0b2308d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_678() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5fca546a145d494477bf3ededafc5ab37c363ecf7a56a7fd803827a3d64db5b550eb0ed90572b5fa1c7e37b850fdd565d4639745e247e07fbda471337134639c28a1294b1731eb4bc22e8d4d45936cc12a9eb6fd4bfc2d5b2215f42050c8d1cd027410b4fd7863d16ae419ad329389d7fd4b6653609e64cc2c5b0490f9f96eddcc2798668a2f26ebf3a21ec060c3af55a205a5399a28d6c841d67f44480f1abd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_679() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e48062db688e75bb37357309d8501f651331019650eb914291e07cf3f630dc81f93f83ed6697e69403bcbb562bae3ba1ae09dd3279003fcbffcbfdcf0c308961e53c23abd7b4fec4d8e840cdaf5f8b74a2c0fa227cf8f36629e8873a0470fdf8f84ba123b46100cbe5ea43c20c73d08b11a70a283114b72fddc1df5aa3aa6eea4d683d7512a7435b68da655c42d99bf92cc391c54c0a2f144945c4c373bcc60e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_680() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("01984af4d49176126a3999ef75fe4e08e1a58ce9149c54a95cf6b8c832275a8392e855fcc205c37fff73c013a56f39fc1c797c13a158a3324be0092f99825e228a334f6baba06996286f0db968a68910c30162654cb16172956d4a70108e250cd1893499ec32c8d451a64b0b0796ac40f9df2ba99d6da127876c5c093b1dc2bb5e44fb82f43de1d998e922eafad7335d08f275c3cea801f86a22ed69a8655f84").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_681() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6a1dae72cb71df71b630b95e0d027bcba268239006db8decfec86001661095e0bb64b196e574586d05bf1252d295039701b82837c7ce0e8ece904256db7a067530e443895c4a05bf1a0d443445eb3e23c9274726fc5b5ea10a9d1687fbda1fedfede1da9c64442efc1b8b9cd8ba99a48183cbc45055384d30fcefaeb927ff65f54f065e06cb43869df1a96fa1127ffa0da8b47d4ca3941cff0734c3086c3d3af").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_682() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c4a8918421a2b9e4106f39e96fa76d8dd7858e511058a97268642f2bcba64ed7e9c2a9ae8a9372aaa5427212204d6e1f455f2cfe833e8994cb86201bb6578122ee6df3cac48f875790c6d93996e8584dc9eb15a5ab90b27df5c26b306205809736c0ca0704312ca1b42bd93dd52fce4a6c124effdad961046d6aeff3b8f3cb4dbaa15065b6889bfe63cf7f73196beb325a2da533865fbb741e635514229a076b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_683() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("aaf859de4d93e0888c52743a02c1b99ab68fc01c7aa093be59ff259b0dd8622fa296bfcf9ac583fcf9ffef84b5592499532130ff706461a964ded4b6e8f3b322f201f3d549eff1a2c02de1bd271eb25d1779ee85c386eb061b2c1411b5d3de5f830eae1789f6fc47043b8a9de5a36be762fe6dfdf8cecfa85981719104f3b6a1cb67caffe299db4726e24523b4e4a34787afc5b05bdd528f659fe93ba03aa47a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_684() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("790e783a8aeb6bd4e1a15067417af674a1243e0ad68887aab3c9b98f735033b18c211b0de10aef5ea3b57d32ba11ea04bc196098675020126837e427804665dbb19150feb6e695ea5839fd19db8580821f341feb805c95b483035942f759a8d60fefe835f8c09cd878ec07e023c33dc2103d689ca90ecdd208814669c41ac6bb1ab94d2be7ff2700bb4795c8aa66df18a005ec07af18287f40cd0eca76916f9e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_685() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f635c985894a33f4dfc1989b6e32c3e335bdf96ec3171f4fe32904998eab873190307a1db25d7540dce1f63cbbc8658ed1c96b80fd33a081461079aabc7d307c2c5e43ab5c6bfd4d1d6bf248c0746e9b3662c90ae13fb5ac23c231116577e0e34eab1c5be4f98157ec1d401505932512b8a60a6353ad00b1076e9c539c665185e43ecf2fedf570517da6a408f2bdb073b464f7519391428e6ca46e0aa5ad5eee").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_686() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ff3370a7a4bd4a98efcd8b8cbcd7ac4c969346ef700f51c852a0a0f4f0b472804d76696412802acae62f544b28191966ef91237453d738aeba32b83bd93f12fb03d724aa25aa3b70518fea50af647d98a86681154d3a0fee7ab6ee689a9b2f86ed5f8df8e7ce0e54a941cff3b2b3c3cc16d79a2bfaf09431a8b7e1c08bec62fa8247cf726f5826ae44dc7c6f3f58d3ccc765696d27a017a456345ada21f4b75b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_687() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d1577f87e2c8ecbac5930b63adb26757ae799b0b84a6c1ce95cec2a9ccdb5a7bfd49cc9edda9de38686b1262e4ec59d9b3230eb76b7cfebbb6d8b5d112a50cd698118459e862e0f4e52fefbf33f920af5bf07b980828de74b924f4561653f7d001b88e8ae51bdd532caa638aa3d2550a48efddb8945bac5c6ab4f1f2eb11a95340b69835bf61f04cc000c8e085eaf8074098d58907a22f40cc32bba5ec245994").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_688() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("66175b64d94f8a530765baa661cd8c4a882b8e5ab3a987e668831514564dd6addc4ca512bcb72005a8557d8bea91a9fd1a45969dd9e61d1ecf72b8b0922eff165735fd60c5ba81ea3582f26298955b47892f3a38a09cb1ba9739220bba0078ad7867c2fa61a5a1093d3d155ad4ceccd0759082b412db8d0e18dfcc4b799e58628ded4874eac65473ebac49862394f56d7fee18581b6d7e85b06aeca8d8a2dc42").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_689() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("18cc528a81af802e0d7834005c0b355caaa9c4ae65ed648f900f73a02470cc59e397b4fafb6d2bbcd5b1e9b3b03e044599ac7194e6ac97411a4e0b92a2d44e91a4ce1d1f080d92a1065545adc0b9e20344f7c5190e53a4691abece960956c7b4ecc953af63de8811ab73afdc67d07d212a45afe38d52210972d59b8e2133446aaf2d83778d4fbec6c3d7b5cee5092a1aba56c71153d4158ad197f33c0a92f5f6").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_690() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("33562813ec63f96d9985bf217ca4d7cb0de3712dc1ba9908479991830af57d73eab98e30ba4d52fd2432650ea47b8e46190822604c62d3c574f1245b7a99f8cb336cc3da5c93e59ded3d94324edc4b6103c4134b8c3f4668aecbf6d1b5e245ad1535e2b59f517ae845ce3aec086ab0e3abe91c7a42fadd1a600f312eb564db79e0df942b3605321ac3d2cf3c02b8dd165195ffa75a64d0dcb06f96a026b12f7f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_691() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ba73476fb5b6cc375b22a29e776322e3a07ec7e16ee8a07f4010a8636033f051abc95f1fb077c0ddb3930dbe3213370c49adb3af32968b58993420a0633b3284bc0401ae0595a1e04d9b89bf04cfb7177efad92abba964b580ff333cf0fccaf3f463002f832459016fb8e936e7cb5dcf348f88930e1a88b58a8115975590e2ae0423f2c1a1d5a9b94006b7ea23988bfa918160722a655203368f6d4840009066").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_692() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("489557a0ede335b7a077e5804618210518cf59e08785c07707d87348733a3fa68fb0eaff578673281d5473cebe98cf5151ceb8037c0beb011ba725df3a7d9457bf69597037c7051e7a37d0b1e999a063ede60243d737e1bc734d453920ce7fd536c28ead3c610f5c9875f4add8ceb4257eb67ea9e038824f4310d6c019119dd209ef2fefdc3195530957692d3e33b465cf04a201701eca1ab2ef5de8b1ced05e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_693() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4fd44d2754fa380b6364428beeb730de8a6bff4a073769022192d8ea3e1ea327b4258475ded49bae22243fbd89c3fb0eda0a210e51088ab055db6f0083f086536866bc38028eb02d6495ebfb639a2a2aeeb67e1bc1a39d5f6edc2b8d70ec329bdd91a87adb19467393679d133f6fc85eb90eeb3ebe2a0b6ae25e65d5ffcd8502ec92b816c80b5a269aa83534259f58b2f8e038b8db423a6268588b11bc53e1c5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_694() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("53f68ad8cf2aadd4376a58fd70cf5ebba8d5c502081711652ccca64f4c02ce9b99a852a37820eddbe75d00aac8746347429d863d91e208410e055c20b1e909a50a58fa4cf7035a5b2ffe66c5f91d056bc04737874dc11c357e8d886a2634ccbef60fcb91ab8f1089bdac48fd63f6eed47374d80e8cbbe522dd57222f7e76c9f419794849b4cee353bd44e08c6ff999f940c15384e71bf7a5ee486ea18cb9cf89").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_695() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("183722f6cdf02606a0aeed832170beb7faad831d18dd06ec54161746fa2f44d7666c084198d97fade53f80d19204b81913c83255fa0d0bab170be93dbe7dd3059d06d66d167aead439ffcaea524f7f1c8bfb1093d8fe41fd93d5922b05a215e34e07d5cbfa2ae21bd7ceac034647c574d385047abd2031365409341578d0b9f9df612d7a44ec7885d7dd0c82c1a5a9e4236dd7968ad4fa6e97c0bee098fcab9f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_696() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d67b663afd39cc76bac45c450b6549960b4be4e886a5ed5f14030603e13a677d68c0bd388229ea2a1fa9d9ac9df21a422d61228d8e2bacbbd1a82bb63b1cb9e6dec4e6f07e3a04bfca175bf488c9b776723055c346f2aa7e4f8f6ae7eef5d396dee42b0b7948c4d2e539147a3225d72e1ecc96f7057effd17bd36f85dcea25c341e80be4517a9af4c75bc6b6f47deeeceb18e362f4f2430e968dc1882ec82f92").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_697() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6856c9707f99df16c1ac628dc275a20047b90853d044301666a28a538dcfc53524442480d3fca94e750f89eddc1dab6aa0099405ec20b07de387244e05e375bdee77525809c5589abd8f7b7f664d1f8f9fcb5637e4e1ff2683818500ab64eafab6f1c2933898b357ba63bd449692e52d33d95282bdc8f9a28265aa382863feeb0c6615b11ee63f49dcffffa6397fd3299aa0d8e5eeb0e2e5c985a125fa934ffd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_698() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("54e58a95a3b4b5e30f8cf05e99dc4cd691c23bedd89bf686f398b8db21d768cf7ae8eded149ded1b62b51942b9e9cc349ac807b7caff53bdcd69edd0ffd1ba0c37c9c90455ed34a2f61bc610cc457fc06bc95c39e012e9ec8467f3c91c8c22bc95767705b4bf2db5c82ff64f77dc4b7791a2237b772daf6b829a0bd6b32997be2e42cf748a2f522353fed215ae40c26f88d77f34f6dc128000e5adf46a4f9309").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_699() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5077cd230001982f08fb3f47017921c6a4fe4f3099faf1afae1bb3202f87362627ac7663ebd57d36e9b007a4815930788c1d92c033d81ab202ff3c0b8c476c525b7dd91f93b949091f988e9cb52e6de7601efd619c1c319ae42326f0d21ef35973fc5f5da247a039c4ed62136d06fd74c903137b290a72779268449eb05734b2fd9ca32d1801ea2627b198a906b04353d3f516308c101cad8a471bfaef4e4b42").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_700() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("04475309c75225034c67c28d57fb9676532bc2e3b03b8ea77cddc8b7055581b43fab53de7d8d9c2c7571d5f41e86c003dca8cc3311fbaeaca480205d291bf7f1e0eb2ea09277aaa11e2134da57ec80f844e518f1c099b23bd3e6c3afa7bb120f00635473663295ca01ed4bf4bc5afaa3368e99edfca80c32d3209d555ef529aea2ae2cead4703bc7d289da11719817a587b5c24b7930e0f83fdd5d97495459ea").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_701() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("73c8ab34b08d4706a84e5e8dbf3594b9651901cc96ee0d884083db0bb066c16fe8a11f7f1ec3d19d05ada088e29e54f4e0107ac81a88fb6ed4329f4d78ac8eac91ad3c88a8ac0f9d80feab993fd2f0284a3485e65a61d6d2c8af22215f7ac742f202ca6260f5ca343f730347b4fef06cb069f6353f06acad1ee25b7d59599b97820b8f267127b2cb4389874e78501cdb52b5c549c63e0b8ae2d63a1577502dfc").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_702() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("35278c71a9d7ed53c243f916a2fbf6dc4fe94d621a3b745edd5cde5cbe27a2c6c871d1f105fe3fc6b8e3f167d98139cd2fa2039732f7e0c9715acf23afbba9069eee8e313836a3b76896f1f74ed510f2f35e915b792c1773351c6decba069af3deaea9629e241f45c38161b48bba23c7285411ef9605cf74124e960566f147f972f0b55b4a14a5898f9e017e90d607a755f73e37212f6a76425a4316a07c7add").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_703() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b94e4b6160f1bb1e0048120f69ec1c8f4ce8a08fad38cc3b1ff5c1c2e8d16980aa732e6b8454f4ac5be60de3dcb7a9d92ded760c5233bfc1c96d5aa75ac7e83ceff7433f65cbcc6c28311131af10943a6fe47d795511fc511ffe5b36789b8cb13b2203802b5f9ebaf7bb1a19e26d3016859a6e2539d0cbb3cd5f5b0e365a853af54473f698efb52327f0671aa392f8a296f19eed2d28b7f32cd433c3c184f96c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_704() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("613b4fc14248cf747375599699a11504028d6f1cd4cf15553ef411138604b049873d82ae91fbdb3fff60b518189c6bc3a4aaa5033928b6f2167adf125d4a8d00d9689fb8f1944d297ebeb17201401d81dc1d3419969fa8e21027d5d169b92e06c7dfb3dcda24bd7f4afd6273d792b07a05edb76eb0db5a93b7bde567586aed9b87788628d39583ef7fdb3dc452898772f19a6877e2840c4bbba847ffe20c2e5d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_705() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1871d71812e115cc4f408d319f7b0713c55da58f498f0ec12e9228dfb7ea89446e238a3457329214363bc22d09fddb835c213c32f7db50f19b5783b7114cb99e77bbe839855556af0fb6262318526c17fef296d501e51dcd290b465b4a42036ee532fda328bc158f17017f2a33902a4d2d4f42707858c30b13060e61d73554a51b33c6b95d5e1c3f2f545501703718378e4b1060763374691a4587ebbafac3c4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_706() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("410b2d1327f637e6dd286ba52d65b4f44be55b633e25656234ac42b9e67bf62c20a3c6835fd9be1db7af0d7ad5c80463b1716cddbda9a9be883a6a290e139f2cda0b3a98dce6246532c425c54f0ec3098bd844dafa8c3169c9c77c171d49becd5312528071496e5589af4349a0fcc020dde18fc48ced7b629c5b5cb7cf6308aa9859d84d7804a2d67ca49f7d6dae5b15feaba0c3a1c54041df5f9e348aa5e984").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_707() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("573863265d96168efd168991cdde4421a6152d4c6df804557a7845d75a521b7b678fcb70534affbe6ef338c628036de29dd59b378e6cf2803e15e7ebe399f33d42b74ea005ae5dd908c82150503f61f572aa1b35f3141a893ef20f600cf69f8d4725d3108ff71cbfe8b796c539a2da78270d044f516de56cc03871b6c49d679f6b053fed10cdd16a31500b1699930b368b7e09b7942cda02c68a78a286aa2b2d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_708() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("50b4e1f6134c806814964a28c44d6c67384822561b3d5ea2e2a31c5e017f7b13ed26d93b04ec33599380215a202ed2063ffd10653e4ab50e8f09975f8f0a28ea6e29e132fdd4234dab6cf345c6a67c6014acd784eb79948de0fb22a6bb83456384806463e3ed84c1982af123db5fde5954abfdae149702e226226c6e64dc24a38bbba3062ada528790f81279740ddc829485c60cfc9c9f6c2d92f012a380664e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_709() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("36b67b205da61f6bc75670cdfc6f1ab422ab752e8fa2314c158bb29686e275d0de953031fc833159d5572db27fec89212533eaba0f3e43509c9f86b9309952106175381e42079fc1a317ea796bd5ed0dd3f727c2b69d0564787454a95ead719698e72fe0a8504d460046cdae5daf3431e40a79f4642842a9b5b5b4ba8f455dbf304564418c255879811d9e43877a77e5c7344857c466c1aaa9ebf54f17664485").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_710() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3e166478d35ab8bf31e34a69dc2f6f100015b6deafcb791c7cd268a68e75447eff3cfc78ecc4465ee7e5d1098f7ce2e741014ccec6a69b1d6cca43253fabe3f57b241bd239a283531f78d29749196d6975c4101aa10e26365a728e983df867d0035cd801969bbc42f35811b1a4b08bf39963fdab51e00eb4aa989ca98f4bc4748fcdb9b2eb3a77ab0af322797bb89eb44ee7b31840f2b8ebf371ad67f672b17c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_711() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("298361d6ffd181d9c28eac6e189d82e9f350acbb7807662a79b72fa6c75875cc1ecca69d8351bf8e8f28091d241c49e7c54bb6d308cfe897cccfcc9982d43f9ce19f170fd121c3743de9c52b5df02145e32ededa9a8463c81c85a27eea10308e6724d7c8f05c963f55bf61a6700be28e6283e7c71a4868a208bd5606750f31c8dde30c1a8bd6c40f6360a81ba04bbf328974f3534e9a6d60e2ffc9ca3d946a99").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_712() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("940d25db6219dde39afd7fc5cb54ca4fd00e7a6ea79156921e4a05228a8a2c7acd834d94a38028c26fcc9893e7a06e51d2224d986b8c0b8be17233d592c7581813c9253528da588535c103e01e0cd615ca7c72c1beb185ff0c783bb863f9b0e71e93536cf15fd34de20310386539a2afa900b7fb027349cc269abaaebd930952e7e79d77a7b19c263945f1a80a0fbac5cc330569498024e1994bbfb65122d179").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_713() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1f41c00789e98460743e4e2e076a301b43d46494c5c61bc79b2023aa23c440b847273ec94d5616ee55506abd007a0c07df9d0e1c8353c5c0f9a4a13a83e767e40dfa10e26a735c1da83a4a12de20bcd0dbee612877d05cfa434bba28b4d9042c70331f493eb785c2c6615c12c86216918f7caf1fdf6f3f1806c99568253834b524ca79aaac65b19a27c5a40e1c086c27ed4b1ac6ce488912902076dd009bd68a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_714() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9a5667fbd502c5a1dac801613b5fcfeeba5f09f43f06771303dba55fa17511bd8e6971ee4ba14e8846c588850d60daa31968c609c80b549fbf0065f5b3ccdb69b3a7df2bd5f27c1501c18c9f5cf92280a2157d4f71191f81016752c3860ad883ba1af1044ec88530e42a1e853d4c3ee86fb45198ed61da1a236808854220a2788d6b1c2149873e18ed971c73cb063e1ea42f2670178923ae53242a6aeca59d9f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_715() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fbcc92c310c34e44e2cce85739126e539401a3d2790bb46112d300aaec58f8411e124eea3238c6ca27f5a81d3ed1027ad67f44d7d03666a8c1868b53bc1cef4207fa0b686fadec3b55a34d2eaa41ec09c3b9a2707386958161a5d54022337ca9263fdc495fad5c2dc682b64e701920c50dd1fa02889b8b553b97fd577d547ae88e7a56db01aec8e3b9f4d9636dd71d875a813e98de3dd8887c73a5fe4127a899").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_716() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5dd64879b74a657dd12091463538bbedb64ea09a7167f8a0620f6ae5f727f0fabf3cf71b56ce88d9141096b248303122b34f5dcb7d40084d510dd2d60b06dc71044c11634a4ad33fe6447d7d1d4054dc9eca8abff9a60c2f6563236f83fae5546e12c9bd26c7116fe01dd75a55e27b001dd35b2b4560b911f7d89602c60e10a3d549192f47df1fbc59fc6868b7676c6f75290fd211c1fdea2f62365b914ea73e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_717() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1554183e357d83f31629c688a99f206b2e37140debabee194e6f6d1c82866a8c4f5f7e3c1dcb9652c462192721d9ba890635f9dd4e11ca6d71a504a76347cb68de801d4c970c0227c0ef1844b4a968b21a123d6a27ebbe7a7f09dbd69a3cb189ac68a615e3bc811133ac30a7ee94006e6bf9ebf195e98baee0e4c6936dc06e09924b22c44ca1977b828fbc0ad0576cbd253b3944aa873065d3b9615906f92659").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_718() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("28461e90895de2c132d0a1392f6c9ea0c587374574d26f88e7c993a264a5ecf5ae1be7b641cf10697a18005659274e1f1586c92dee7275036a89d2ef76f472069c69efcb61fa63ea7eb4c8ead2d36e8116654a646feadddbc21aed4637432b3b0f5f53f0469675fd178a67913dacee47842d603074ed116bd529a6a46ba604198e8e4c2f185c178289cd58ff1037cd1a9f37f92997534cbffadb779f018ee2b8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_719() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("04f3c091fe26f3ca4970755da57974f23f0c9e18f55a811f0cef6ebe758ddba9d7da0aa954c41c4fed34f19492dda74f46cbb98bfc1c2b789088fd551546d5b4e5c0c3e33280ce572bd995a1d3aa6e8cbd20dfbdc57a17a7bcc804bbea5f41d92ddbde01e490cd131f24b0d72e7c9b83fa05ffba1b9e9ba5cdb3f41433b2cf18f1563c2957fe794fad113aeb2ee1272745cf6012fd61c223b29773403a23f45c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_720() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("23c9d82fc9aa4315d65d2133e6850504562c6b80536f9578f9ffd535e48b6bd4c3ce61fc8c8017a7ce83c863449d6c0b8d763db3ca0df295c30e5faa1ef688fd68305d042ec27e60acbfa6c1b2458388ca854b273ff5470824262ae5d21c28b0f6a381a4fc4e664afd890590cc733eacd1a15b3cd082d866797592674e5f110d17b0e0a592497d9f16fe3834bf454fb3f51c864168b24c1475f8ba859afd1118").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_721() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0ee363d54afb6ea7d52e567bbdf0e7f7a48abc812e986d6218b24d454ed6ca6f79ed9ccba56c2e5d62260f89d96afca026e989a4c42ccbec21be2fe2c049804ecf2cb329da04421962ae3f69fbc13bd7892646a080dbd6068097dbed75905a4c40b3071b6619f8e8c36a447d8590f566e2ae7fc3c0d65f9af5313e2438af95857ac66f4a6778325f88b343f88d3733a52c5ac1a735a8c8fc853ddc7bef3ded18").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_722() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0317dd546350516dbf6e49e41e36a859526ff75c746b34e8beb7306259994245348e3fc8e0e374278c12e5b74881de3a5a1c6758c02035abc845dba79ac57aff4d0e1f64957fbee0de557cf61fa9a469f74a69e90e18ec1d48dee271074a8347ae2f74f8f7ffc9a957ecc7b8acb15bad436d81d5bf305ea1c50b2b1cddbc79c6f2734624578364f1c9e6d66734563f3d3dfa31fe8e946124c43a8c8c568e5463").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_723() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1a0b8722b744f3449d2a2057b8ac4f54109d9249cbff703aa6003ef78bcf1239424dcb0da02d93b643131c8301c4bf3cdd7b00723e150860aceb42ad6c211fb77985e651db628c9da7dfffc76dbef7c95142625a885c301aeb9f8506147ce01a77674f798bb6cdf31d83364b51fcc0bb1bf27ec53bca68398d8ea56f5ced47eb20478434fa6fb49ac25ea48a2089d5c68ee7a9fa187e8eda57dd255d6a5d662a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_724() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0127a612fc32216f25a0ec3d30209dd66f888d14d81e6a4a90580e8dd83d16364ae019eb024a30d4621566e76239632a355d4722df1b4461feefa718d19c8dc83614e5889c9577c1398a29f4d6a0c1364c173e93387164ac019de72f17197a00825866306c2ebf95e89224991642c59121661d022c04b8c850c1351e2e227d53180674c1568976750bab76849e3519479ffa338bfb438adf396a2f0095705384").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_725() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d2c1ae05e36dc1132b3f74d1ce69a7b7ee5213f780167d46e888492d77595c1b79d8f54ce45b99ee42cac7815d0dcfd548583eebfcade43fdb615cfd002dd49902d878c9aeb47eb6846aa00772336e0ec2dc732ca63aab653d423cc8e9498b8138c8aaedabd824fb277fe980d1f69a86dacac704a3224e6f187f4762bcc24e58807322c8c4aa9b30703b02f96f76824b0a6102eda1b18265faa5a995e8fd319e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_726() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a4aaa531238021c2c3e4360223d4b3ca1426561b7f76f829e7f2fecc3c7074d2d9077403bf66d46c5baeb5924955f0738634c8d1d6fd9c20461d6147899874637a467f600e0411b814d757f48ae0c318e458d9829b06a2e6a71c770022be67b031b263b3f3785192f57c56f6c35d40113882300a8d6b17636f671253ddb156cab188fb1b1ce650204d6b2dcc5fdd7a747ee5a23991fa8ecc4da88b6c0c8b86b6").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_727() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("402c5e4f3d4acfaf1dcbed80beb050c41ba26d47fec6cb3d7cc33ee6d62983b750a1b187cd33bdef15e2c5f585f5845cbea428632033c6fe05b2a187e584167231f57279c0d1e224df09ddb771100bca56d4e121748015fab084f6857c2273098f8069973e82c16727549f1c351a37de68d3eb70dc2f90917cb0bcbd99bea310f05adbc53cddd4391b44b181b95406d20926c218073848dc7432f524124b56a4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_728() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("dcaef03ede71a89cffeedde84ece0fde35c98d3898108f9e04178ea7635cc84a7046fd5c584921f2fa7d9bdd3a3963cf429b3843fec961bf075f8e34d11e119a12ea15328eff7de83f22942d031f1ec818916424af60134c5da3fb0961fa85a420e5d685e50389e43387735fec8d63f1988db3c98f2ebb45bb2a14fe37d23011307345b7da5d452faff2b4b45875af5fd18d48fb6995f8d531488d9695af4d36").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_729() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("63d4d85b3cabcfc2da16550c8de1497b4aac9a4b235c256300db2acdf07a4322f9ae25e3ed7fd71892d7def656e2583fd55a03ec83d5baa31baf30390da521ae72949ae8e8d5cff9fa67244cce863e205527269922783c2b683d2b992eb8e6943d33bdc8d5d8e243fc6d08862291eb463aec01963dad11ed3c57bdfa5787739fbd3cef769c1f86bda8b450ad290463eea3a16beb9a6fe7ccb307dcc8e6babcb7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_730() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a0a818f3f4cf4df924678877bf6c57b168c840a2113689c0021027d953ae78f27b2367b9e9031145f4266ef46a008eed027d5645f4e3375105bdce7524034a01384b6a5eb1a869015402bf6a258cac1567d4bbb9210dad461a129134712de1c1fef1a9ba0c5a17fe997c2c41866959e4ddecea4e6a90e16978875f5fa9367183d8b5b2172d303cc2a6c86190098a0fda2cce32ca2cad90f116c1399017239151").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_731() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("192dd240d1763762da7bcad87be54160ca30905d4ebbfed6c167d16e1047e7d69103170520c68c35bdafcccecd4d4151cd90882f69d88c1cdd865ec7bb9071ea3b252c176c1b9758bf645d70e8d01711a01c80282ee8c5969891778845915102287e6b466d823f0cceda5328defbd695deafdfe023e3c0c0579bd16dd35cbb7ca3d5d4a0cb6733cdfcab04a5bcfc65a3ced568ea91ac474798b189bce70985ed").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_732() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("63b4c8e656ab31487b91333608e43d1b5695dd1a02eacdbdac1c75bd9877ea9adf55c93ed88c2dd2761fe27070db5d2552cf34064cb33318dee5a1773514a62dd752257d6f2b90e97b163eae45195572e43163f37e8c5603826eac119a11103c1c69012fbaf670af6808ce2d7c0216ce1e388c1d69fdd0319618d7adefb7533489225584f692a581261f6ea029d71cac29725816f3b2c24844bb5927456864bc").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_733() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("50d579b5cd6acd36592439992ff1f75aed620c2b25dda69fa8e4aad1ae8099504896fdb0fc5790aaf4bde3b172ebbdb4d120bf0244ae3a34a9f68ebede73d8e5c7da842588f8c5418c43be67ed6b9ff1a84738c1ccc88fd458dbe7a6520ed98477e6dc35b1dfc046221dd7f9a759cb6b08dbd83cb43357279e34f2e4d7a2aabbaf6f45388ba2342cec67197d194549b02c2072f12aabe9394ca1d30868d61b9f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_734() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f0df40f4d21afe8a930f5ddd551fc861ec3da1f992f45b7ef222b4637e8b948fdbfbabf1ce88aad83a49cd3de5120984474d40590655b2455e47a0f35ac5090797fb875a790f306b0977c43b1a7e6a57573f7953649bd2868976c783a173e2d8f2de227ae169e5567fde6e345873934aa5506a7e4a9c861e50a7113cde4a932e9ad76be188e95904a3607b4a86399f53666c6f2f062b6314f2dc96fae9c5fa15").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_735() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("80228b4b99bd495c5246410fe718f7e7fdf5e0290bf0c8ed887eb10d4bb417cd13ef6e402579805b0750eb42f51604249e07e5e5a8733d63d3d24b8565711e7f51e49ae6c30275cf4051e5d0b17cadb791e0904fc6eb83c39babeaa21598a0502fd979dbd3fcc11e8663bc1df726a01acc303ac963173ecfe4f83bda985d6cee0115950d067bfe816b2404499a98eec88fe1eb4bc88b40272b2074df7dd5145e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_736() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("08fda623c9fc8053bc7bcac5cd933475400ca33557f21850ac4f185130f923b7589bfe9b9cccc7efeaf7582d9e0d58bb2da27648ed2898913732c81da0c233aed9de059f634eb89c63c7fccedc67300f00de54e429801474fa02e82765d25c9b8e5d5cb283b1edb63fe3fe634bdd31540c68a28f6c5e7fdfc5599aa6f6fbb8ed80fa6bb9a7ab1903e83b339f56042c93acd1624bf0cb7e2bbd47fc65257f269e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_737() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5c0ffb650d4e944b1c3e8e181b8867b4c64313c4a367ae4485ae883f3477f1e7e842a50a25a725195f31ecb4ec44325b63ec0b96438e27eebac2547960e9df174d64e89cd193669374ba48b929aae9a2ac43823c04fcd2e11294b87b680f33b5b01d4ade213981013271d2c69c283b3ca8e94e2054811fa060056d94c021a48e3c55a5dd0d5d072b9d38bbe6a5dcd35df009f17a143b294ac834af97dd289f32").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_738() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("91835d1793183022265a5fd2635136c47ebc056618f15b33b54d8d727c446c8b552330024943960a13b5ec8cb140a4a10c9e56947da02d235f1e8fc14f3fe14b8eadee0e257191e7492365affaaea34704b08435d933a84fd46898688583ca006ecd060bcf038941e1864d8875b34f606b70294035efdb15aca81b49161d4d484bf778f15e7bad3ee46ba1879e354dc621a8df06b19345dd3fa7b34468f62047").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_739() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("67d6aa56f0c11be7b794b0d960cd4af877152a30e40335b187ceb49e1e7e2845c539f782eef6d035a16c387545250b65f546daac31821d3f3702236838a6a9559ddba88558cf96dd3adfc9823f48a4d1bdbf63cf7e998876ee508821e7f5c63d8a041dfdb647209794ec964013257148e18ef58b36d49086ec7de3b042617d430330159e308d5a5941b8f853e0c97a26b7a472d03246b5c69b3419e81c5e2165").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_740() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("80d4281efd1752e691da0e071f5e8620b870ba2217ee2729e689294390b965cf41c5815b23f72b561f2aa4fb9ae5ae9fdf5921b67c35d2c27574ea46a973e06f44200ed97e4ffab7a1396a93cec0ca6a5237084fdd989342d217c125766023529d952d474cf601332ccecbd07bb0700d1eb7d72d9e9c3c31befde3639055d70b78eac1c5f7f9a0773efd43a73845e60347cd93fcf71f01e7c4e809ec5e586970").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_741() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("040571d62de4f9f2f9d96c7e46ef0753989fa3fa37357dbe46acfebb3a5ef9be40a1967a461864573c736e480a3f146f641f629175b924755b0108cf0ca7bd78d94cd8ae9cccbda768bb3ddd42ff7285924a30276f267dfa73a5324c6cbcb9b5fce6e59fbf970af384bbd8fd13864abf965216d173523356131ccfd8875c45152bce2342c2b3b0f259792eee0ec01db8054418522c96f3a64b14c588962fb47a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_742() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8efeec0c26c6b31bd25c885e95a95f8a50e1a92586bd4a003fc3edb84eac24e09cd2ee024d9f633d756e21bc20c80e9ca4162ad4b01d901b7170918dfa35324f4c161c607c02a4e651d37fe4426a9ab9b4d28bfcdc0ab95087f9778d925ee2405feb9c8a5ebcb06fb62e2a9751a1f51fd061772456b26a9d91c434d8533520742ad8fe6fd4a1cd516dd5576b9a3f8e30b1868f2db15a97809474f8e8b67c3f60").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_743() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3667b0d5aa3d93ac325fe4c1b0e598b5bd8fb0378250682b3437e3825e7d7a9ce8be34905785863a988222682c3067159750ea3b528a29d00e494f0657215b4add553ff4ef194db4bc8206b88dc9f392aaa153f0cabcd7738f50f42a211439443c49042ef83935829735069301339f95886f79d98b6b490a038a13f714c944b2d4912a093ddb05236c190bfb95303e60ce892ed3777a47d66cb120ef6ed864f0").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_744() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8d9f6ae7cce825d265c218c034e7607769dac5c9c3699df1dea4d043ecd7cbaf74154874e148519773eb08cb6d649f5dfa058d6db97cc959a8fd0e4bc9286ffbb46c11ac37e01e9e551e993272d92177a876ba3d918ee349594ee04337a6e4c4e3837a83409e6db758d9e54f36334da1f2a540ef6af49371e07cfd12f17e8018065925111efdc049bb26418d81fceb12033a28915ea36021b858de9ebe381d12").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_745() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("089214af7c8be352a548890b82ac3b846a8b88efd7e9c89504cc1dcb134fe78755f1248a6d9aaeeca989240ce66091dfa78af9a757d5ece7909924a0eacb769041130cc2f53cc1611159beef37fff9614ee7ef57d6ab6a0cff8bfa06a82c67ae92a68dcad4b3b226aa9df08933954485cbd482a3fa1d417b6f3e1ab9a58b3d273fe2a003aa1f33a0f6bcc5840854a743a636404e3af5e7cc174ad5a3fe61f9fc").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_746() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("eaa08e8a6cde6751b9fdf748400a4ab531d138d2bd598c65a0c53e86bdf8b41b30ff235c81895d996254fef351588bc658989fea34fb3255828b09bdb8daa7eee887bdaea1a50115550a582e8da70852db39d5b4d5aa601517a5050f888b970fa7505818686e62ab3f2cd2f70f18672100eaa149eefcfc9d39bc5116f99530f4057e4ecaecdb33b92ae557367791c823d8603d9c7bc3d403528b841561c53e6d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_747() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d8be34b01d6841a9c35fbf621ce5750753926d61b76d219bbb875f93ba4790746f4f2cabd616719b6051040d2eab065e2f4e5926e29c8a45d30745430edb6e8f0d8635d6c78793bede0e368b7f8f4f30695404ff7191afead51268cc743246fe10b68765d5fd685dd17efb0551f8bfc6a1f824164dd96e54d02be963df22dc102db224e93ba608ff3a3dc41e733ef2b6f5f223d813e86ff551b53e9b9709dfe6").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_748() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("dda797c5db1397cbc23bc0fe057ccc83f56e28e597f080b5c0c3888320a33083821178c8fe346b7b58517bfd2137ea1a985cebc7c275fd042084fdfa9331bec4cb1c633f80249d09071d15a65ae421902614d087c5d77d6e6c161b1086cb00742491ee5ac225a8cf81b5688749754c733e8a52773cfb022e7a9262918b1e93634baa17dddfbe37e4defd4da25540d9e2b2ca76acdc7d20599a1d27a67cc68635").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_749() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("25e13d8bc80f019bb94c700765456eb56d8ffd34294a6a692747d45b01d597db59cc5a34426aab9a74e1d7bd6b95c023fd8981487078790cb217d49772082f7452ddb824990f55697f4b6ee7cb74426a6ad083d31977df9ffc5b8f1889b82d9b91080763f18919d2eb8dac8f81fe0a203aeb022009632f11556b189ffa1c9f12f2b734110b6cf2b88b1cb7462a578d1004fb37a4636ceb9c25605b19e06043a2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_750() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("eb1685e2f2e59c2493c0b047d2199a60746327147c9e086052554f63f4478799a847273a528a9124e68ddf712cd555dad25a71ac62e92e65ace69622608941b38c893f3eea183932e19c980f1804fd59e45708bfd19d2dc87f99f7234c4bf8777810b5ede96c5ef8d143106fb9169858b1755a971eb15b28d1264d930d0310426acce72687febca8cd7a315b998f1f84e57ecc1fd45059e4a272b9d45177e313").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_751() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("51c608c0a90468a10f9a7c96f8de531b626a888bec115a85480dbdbd72c896d0f768f3b76c494b6be51932dddf08b82055b247d2d6f5b78e2dc22641c969c8988e9c8d487f8444654a00e4f027a02fe83f1dbf9403486f8464d3fbcc39b377d0e317e2f1401ef5a075d76bcc263e3fb317e9f26bd37bc0b83908762c8f9ba3764918e750ad657fe14d4ba03921649966745281c80854e6fee6b4fa3b22c79896").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_752() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("cfde2d034b1e980f0f9f986e3c957a3a10a2fd8aee44d218da768d18623787aea0eadf42455f3c30ad0176b98860f4f8220d674f5b4c1c1b2375a361d2230d2efb12b8e067dd03ab68359be56938d1cb4fb709dc2180334dc3170f447794e89c65a92144c2e9c7a9b2785f765e9e7f4ecad20e27e3c2a21916fa1984fe9b19f52982a651c5a830100d838117e6e717e2777007fbcc17a13e91710fb83ce46146").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_753() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("987927cc51538c61c2f33987699f875fe981a994fe60c3dfdc97c3c1b302c1fe84ff90bdc17c29f5694ab14d878fb15a950ac08bfdae89957ee05cc8516db3c7be036f9c01cbf657d501741403c99379c342e218a1cfdf88c57628b9ed9aa6f6b0aae8378e59787ea080614880d3b7f8fc06414d585dc2dfd2131dc6a63cd31396ee7ea81700a1fd3b2b7c202149c1012659c3c91a5d8eb057d030d7eb40e1aa").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_754() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7791f51d679d425f28e2e0bcb90e8ab031a899b9d373f29cf231c0bd71796dd4f1f836c624658554a191f2fa9b69ea58925fb13202c6650731aa8d305d7dc4c25ab99eca5a92a968cf24b6eff42242888d01bc0e79e5fec9723be6438b8c98d9e4a99e46e3107317c7f810b6813b2b7695ff25cd997a1ec96e298962b2aad1f6cf88a931adc5cb84ba4e49e063f89051ab35cc3bf6e004bc3813555f7a61a880").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_755() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3346aae4d9167cc9372a3d2475a500f29f890f88db7c63aab6ec6497ec1c29bf9887dbf4511a5a4e7054b3d3e97393f25fda16f1873df2007dbd2a381679e79e16a29a3db3925574fec7613e73a161fe07205679aafdc3c00ba85ef79f86b6864c3f514f468b7e668656044425b0345c06d78888f329ee587d8961315ed8bfea33fe167fe1d20c68c0be9c3898a7883ff787adb39ba7281a958d8bf26ea09275").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_756() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c1436f80544bc3e467cfae0d780387ca1914982235f4ca77f41e0ca3cedb35eae741afab4ecb6e06ca14f5f97c113e40a111887e40024bfb07242bf89c05d70a23ec40e47994916e13db121472f181b6037adcac75ef0c71fc8b0b0379652f2a88e239f645db9b97750624995401bf83506b91f703e72adb9ce63100b69c6d627bea366cfb8386163e723e92fe99663060c30a0e6a9bd12422280f52594fb662").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_757() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2987b667651256f4a1f323bd99d5efabafcfb1c8d5f9a2436ce4247b9012f66972c82777fb464610c097dea914ee555890143734d4eb70f43d3907a2aff1112c5e75722f496ef8acea90810fcd31f95b661711da8f138d596e4fee2a9e7c61f58070bbb0f0fa94aa2eb9cc036e7a0b6dd40e1733be05692c64a1ac1c679689b47a0aea112ec793bd67a675ebdde348330e3bbcbc59ffd92e6a0a4893d12bc827").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_758() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("abc17e22c7a851a713bfe6cd0186d6aac35a4187f99a19f2d5381455d966d7020458ebc39c828fbde1b2428ef7d36ee5b7647b925b75df5a0177ed0c3425c2ee2305fb6e795b391a6f6151f6652dfd65b67483ae5d35003bcca794f6b242ccf186a22adca11d22107484681c5e76791bf104d9ff4e19206f139374b176f0d9f3a5bce955e9cbc228e3c7963b92f89373992ee9d5cd6544ea16ab6ad0b2d6a071").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_759() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7521ade4749ac9b1468082821b7a0b034d80c19b1606df91b431f89c0e5e962372e888d123a62e94f59ad64603c5d706f2edb42c43f02d6f018fc5631126174fd99ca21615a9dc1dfea45d2432595b86368a2e6c5fe0b183d83272b370406db83afec58e2cf399d9f70cdc28b7a9700fd3b843df32a48c753a880520f3e808bd0ee33737a49c5dca42f6136fb6c274a1c901da21e459272b25084eda73dedd7b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_760() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("067185a820a18c97999d0657a56ad7aaa31bde26b41af94984d3fa16b6f292a18d5e752fc1abb5b0e0721135083faf8e635695f5d919e772b4641086d3476b56410e2786bd795a3c7b9604dd91175ad8b6f5609a67c5b7d670d09443ed9bbd44a1f88b08350f69d1c2d4c67c2bd76365f64f22514333d805c9fed1c16c9e35177be5e2744739fe4fb1d19a57e52b9db1813cf951ba9210cb3a8b51f9549095a1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_761() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("01fb7c95752b7fd729a1e900c648d3f8e475ddf75682b071a684fa7b142f87a7d6aa163c0ab57d847f0ea79dffb409665390fffca87e38c335b69b5b1c062839c002aebe94c851bd9c88c8761202ec7659d6a7ff565f4d210b4e41994c219fb7cefa392cfabbc33045258495a3b18b358f51963a6af588ff6135fee0e1bf1da545e7cfa5150e9c4481eca2696f4dc3607bffa5c87cc99366a15588043a77b294").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_762() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f9b1b1d39ee4e6d6a920858ff9e510c50df4cb939bc43a7ffb25b18d2b49eb345ed8b41a4876c801def4d3752549f677cd8d1ee9142c1550d97f59bc60255c2c046137efd54a71a0cea798b6b6846bd898d9d449bfd416f049a1c02fdf556be3d4759aa7a6a2e48f56a6e37d493bd46a88d5610446795844045190937e5719d7af0c59383ae1dcc6febfbe1d573544de94489f9d9d9340c7445f80744aa38af8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_763() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("33b73ffacfba19b20b2b2bf5b6628ddcc7c55dd920efb8eaaabfb51b84bb01baf3a4223bc44cc160ae2dc761aa169473b79136f737020f218982916e2a6d5fb78e3b040a0728d187812a080ba30397aaf1c62e20710899f8d02c158b078031ffa3771a08337ee8e16b0519a20ca7e521c8551fcb27cc75267003f4ddef079cad6f6015620bc109ffa614f779ac6d6d3294905a4fe2d70e9793ab091040081f5a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_764() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("eab2392e180e8895237d428b80d7c6ca477d5032f45e2e789eb39d18584792654667b5768fda2f4cb45ee5eec57029ce36b08eed6e995ed889b43500600b859f3c6957b16cd5bd9a40810a2cd26e7b751e95809c117db8d8b37466273ff1618da74403d9ae9a7826802bdf284027d8aac0256410873ffb933574daf5e0d2d05de57ee98c9dab64162a96e2516691232d89e3450c73d34f7bc2995cbaabc13713").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_765() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bdc859ca732945759ada620163c9bc05779b66578081e2f69e16e439b82a1c125779d182af8a98525c51a18a930b703cc12f95481b737a5ad65ec02926d4ccd245cef38dd2cba908163911943d7ee0feca83a2f1485d0df37d7b64926109274ca6d382caf81dd159795aaba83114e4e4e9c6a79101e0769647c0265f411dbfae80b034271fe527e3b074c7a0932c4d7ed1a226127e846b9d680623030e0e7026").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_766() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("cb89458b2cc895836db05f7e535c97952183c1e25d4a43238c89667135e1cff821a0cae518874b1fc2f6e21a5c0ec675df1613a06cba6b21c30370a1b82caafe3cc9c93d31a754a83d55f69b1f0528de7e53e2bb00b81e41bfa90d61bee500cbb8b7d56379722ad2d92af8e708ccae01c4af60cf98f9933bef047f49fd5e1392eaee7f39e72e57da4659ee7218ad5a23cb051004e1e7cd330a2163f2b64737a9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_767() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4316330e29f0f35ecbd4ed6cd230067baacf47bfb86b883af218da2455651b8779e84774eceea43aba00bed464f0fe59204aa2f9bd99f80d51cd9f067db839bfd6a17dbf9ad0f124092178c57d5e7cef2361586fa0705887721a937b50180ad1b73be2c94fe075ea9e378e24a5a6ca25d897521dab2493bc2c77375c08438e5936eb46775a8eab4c661f0c1a3a6ea545086d38f1234b5b003f3607ec9ff6dcd8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_768() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("321caeb426f15f0da310d3d2458982f3c81b35973db02535069cbc705c15736d8b01e233dd74a79791530566750b86d97796da5a9b93a66bfe7fa963d2599593ac47d0b0692077bcbe2c6e7bae9fb1b3abbee472a47f9a4e57cb39403bccefcb8ae228b497d236da13d2a9bfbe103f918a6576b590a978cfef60bc399abf8f6c75c6a28cf224a1667a86bdc5629446122ef0a0fa1b38fe57256b28a28d7c249f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_769() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("58fe25aa70754e7d8877bfb15d168338db96d64cc3ff0843d0f8a8b0e4fee465a31f556993f244c683ca08a1d0ef8d7765402b105f0c6b998a74784784fa7e213800f64b80c391132dfe410d8eed2983467b1a19fb715d7137bd7fd874c2ce9d270af8fa0a8434531e8f94b6a905a393c5cd8a6fae2b796919a678aeebfee41f0a4cf207dcc1754973386d5840834ba3375bed28f15e4f942835291322aed66a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_770() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("310b0e889b7dff9c07fce3396b400c207e5fe1d8706c6c18612208418c37618072f2c8bbfd4fcad6c4f49214bce2a904282adc7c2e1eb4d5893868809d8b0f286eb6a8a1e855b52f557b2f8b79d25250465f1225be8ae1d4cab9fcdce8a8a350d07179297a7467cd2733ac92fbd1ba6d5e804bb13250a164901ba5e8e6c1e2972c6d67fc2344cd2d1a094bd4286e501be42dede1dff219b47c72ee6b281e9161").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_771() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("43a73ef95caf24fa0822f3c49c31669994147a1fd6b9ae25b27f3dbfb99a16d173dfb0316c8091359cf47b5ec276922fa49eef867e6c6cb641b1d5242190aa77a5b5fc24944482fc6775730c45a67dae3e9883ebb1b138a7b5be0de39325f6e947d6c9f4b90e8b43546f36f71c61ba40f47bfe66bb326b8dd4f34b9641b57fd7af114ce608d751b2724e2d35f87278f5d4d1d8f14dac2ff83236fb9d05a9c900").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_772() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2747470924c9c9e7c07054144ec6997ed131ffcbcb58c8a5d290a5fddb9eab0aacfb6586d9e16d898bd0fbd6eee110768a22debeec88ed353fa60be0008490dc339c11c72b8dcba2f6522ab684ddcfa0aea9cc2a76938c0ec5c0b7adc0324ab50ac356f00d030a4893a5d2d6a7535f834ca8a0837a062b4cd99dc8a34596be9f0ac9fe8a9aaea5c8b163ce30aa54a4d4357aa3adf4126c5e15bea11c488a7e4c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_773() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c2c970e67c3ca0d2aabb4d5c9818af6ff51c35cec4807032b44688d59b741dbc18a6057053f984dd3ee90ec68f8431ee281bb9558892263e4e3a937ec9d9e3395da0365e441aa48d1fe45e181bbaa19b2412ed9176bf400e0c74dd08e816cd5bd6377402959a50d3984a3d83f2e2f34416da7d811042943fee070b53e10f8af0dac9e9dd5ca1d58a500561bc46cbe6bdfe359b1c3ebfac1ac478ee961cd2a397").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_774() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d7184bf55d5c1e663d852826ccb4d74a572850ba5013e4825fa60e8eefe6c62b6eb29ed340e3fcb94e9ad749d1f67d4f94963e665ac051bce87408165ef1e0e771eb77ddb02fe6fff5d32fb2022f04ab1d65abeaee6e095a00b42712bf64c9ca2623b7a9efccf2f1559168fd5e88ad9e425a53b2e9db455c6a0bb8dff53200264335add594ee1a7d14a89d35706e8ef101520afc6d14e1e57de3fa05688398b6").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_775() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e2349113c499be1297c915ab6f94bc7aa53e3356a7debad85e5d4a8d34e3c70c9841cf99fc460d93d6e11fedc4117441749c2fdd2e77010644d733f06eb095119cd87e8e64d1ff577ea2b60ff639966d83964b14ea69bf1b837272bcb1c454903a59cee9d696ffc315b32b12285d5fa610d4496d91e47079ffbcbf9e3f84514b330d0e8532740318439b65cacab9b4eb4e95d64fcee93ecd0a8c88e57f214bae").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_776() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ec320e824b6a2511e1aa1f1ec69965426aa8d838749238472557daf1b38f56d5ecd55b99590dfade42e97ae374b16eb725c867a8b29fbcddadae1a8ddaaa842167d232e15d845c2a5e751ce06e5a97ab1e413a7e4fbca352c0e6d60d4521a381ae355192bcfa22e5d1bbd1acd5a35cd63398230c35ca11e146684861a97fa0416cf80f289b6a2e8165691a1b2ba5ddd6b74669196ec5b5440e6fff82a518862c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_777() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e8ccdf241253456243c19922f8e1ba60dc7d08151312ed2e1f84f823e3105cba13a1107c81d382eeeba8157fb8592fbc198077da3976d00a65b5d12b2dac3375303a37b8626e6e619b7a7968d22ba5baceb8e3f2c9c4d1c553cd7cd754d801c1bfe18b6e551dba99f9b96af60f461c216a1ca07afc100e5eda31b543334654033a7f7d07f31105712b155ce499c0f8abbd04cf6edfd7ab20cba760b657348391").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_778() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3c0473a76f2a47dd7c3f047093d73eb8286a76eeaa617a74e664c721ee3bfbad3df8657b90d173e89a66450d282d14e340ac81223e167469001e5aa63aa8edb677152c4b680122db4aa1b7423b6c5d1675c54ac4121064dc829811d31e0dd470f528aeafaf326483d6dd57c6dd8fe6285780abe0cffe5998fac4819ede3346064734342506e75bebccc4f55bb0b1408a7ca826d1ea5d34fd88cb2bfa73ecaea1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_779() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5242e8493209388baabd664cb3650662bae79aeca3b8b6407a6760e330d79eb0bfe5bdf4a1c7f15ca75552c0e23e66eee3e261a54225659db4ffc07c838c4382c5fea527290d9bcd29694bf242fc9319ef9eb73ef37b35c17cdaf5ac39f4db7ed63b0b093265a0d5eff27fa96f53fbf731f651fb6da5f77008554fe9c44065ceeabb1f3470ba7c1c435405b8e921e41980217190924c482349c94e735bde7455").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_780() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9f3ebb7ba3a62ea1460fc32a5dd28c91f3ec73bf2d6aeed2f41db9e35750db7994a53daf1751deb9a5cf724188eeb26765d78b389c4797a36c49a97956ab169be978965709671ec7e9a5e1eefee5bd95e9ad3e2299001b59525a13ffe112acba13c33ef4f3b85dd5f7b425ba9f1ac0645ec6120cff9d868a6ca00429e48a9915dc32fa65935693f067c1909740cb5e0dc1ffd8861820005d955f5335c8738923").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_781() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a17aeb763d98a959bd2c62789515ba92c6f577437cefaaf6a49e89743b4c6beb876dfca476bc809fe585da827ae8bf605b6eb530b9f65e88f2d1b2dd00fbea77f6d23dc7dd194b37504b68b2bbdca2128a68d3b607c13480b246068e88ba62a6d3a5fb77b1da9ec37a6b4272071c18e649d9915ed6e49ddd9d0c0d04dcc7471725a1a29d8488b5167d9b28f3fa42941edfcc247ab86523b1bb5ad27f95cc14ad").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_782() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bcd7ead0b443fcaab8443b470385cc9148d31e4fb9ad27320c7f08f2ee33a4eece0a976e4eda3438b388bd4e47c8b4a6224c418f1d3fd6cc4e529bd4ff6d94afeb3ca33a854ff939d0bc3edf183b7f7ae44a3ecf4053ef64eadebcd9b218cec6615867ceff6721c0b6ff338de5348996cc04251e5e608cd7cc46bebb805c4b7c5c35f56a2388fdda2d8a8afad104faa3da2d1a3be7bccb7ef56a2983e695cf5b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_783() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("986118cc1dd4c469b49c41a983029100eb1fdec03c8ab340adc3294ff4ba49f2792df00a261deace83c45d35325f640700c53f4556643e2cef01fe2f4a90bfb9cc04a8ebca45dbdaeec5fb6be5fdce663993dd0e2b23a800b552fd548ca4bd7cb6d6767e971479ba93020ad830e92048a12de149f0e6e63fdb467af006e83998c9cc3288fe839e2dd385d0e5b1462ed7fac91ffc165a1b7a806932c67c30470b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_784() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("af49617a490ea6e6435433755cf6baf83a054850a81035b8bc3c82afa979c7adbbf4b0ea71ecee0004b94953cb07bc84a51708514ae209ac2354bb3a0f0d745b91de48ed347d01cd890b97dfd96967688c5cc76f3ff52b107641877179551982bb66190689aacacc295b8d9d3e2ae4446c144d5a6ac0db7cab022e24c2bf78ce0c0940187c0bf503bfca1bd2a47f959336f70623599ca7babea5777aa4afb09b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_785() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("47db73358f1fe1dc78771b5f20542fec630ded2d764553c7b3ca3b43dc9eff3cbe55747d964d403eba1a9ab23108cc418b322e2d2a971103d11285304fde31afb994e7b33eb8ce14c711ab921a08f544d1d4864282042656446eaf4e32010e5c0d3bdee80796082ef5c0f75a0bcd1510dff3b5d3f1736abcc46313a34e4475b258f967b533c569802ba2f09aae0f63308f981e7dac6871638f506692e1a180a4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_786() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7285f82ab4b668ea2e06f33a90ffdce540f73dfe8e9032202ff20511aba06572f2a310fe85f53d6f3b71f335eec3581391cf72cdd20ee6853a2e1d1a1410716e760838740cf312f09da6efdb264c39bd0f21e8613afd2899d7ebe9c02d3a88970fa79750d9675b1ad29173dd76a54c968666406d9389adfb4e7191c2bdeb0329d3ca56241385e4c40f2d2613e65aba50d05ddaa2041a0f16b7a3c4d2d0ccc082").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_787() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("11b94b1b16b5026b74caaced9b1fec5f93ee160a04effb36b456e66f1b5949c982642c204f3a28dc3dd13dde42d38032726a48303f6db69fd55d57865c05bb8241bd2dd760a819b7e599f331cb462f5f73df2f2375afd3fdcbbb79d7aecf149c28d978745394bff6f9dfead7a7a9df5fb4925f4f2cd4f2aba0c9d93d4fdb848f813bb7ebe935f5fcc72290884b1531d43566cbfe84971c84f93f1f139d1fd5f8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_788() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c3eb86367f9f3c2ad786d46f9114b773947b5ff4d9fe3130e10cd7d643d45e5c0d315329425db179f8da3680be42e9f660dc11fd04b1b4ab3d60c006284ad9ccf3b701aa5be1d07102aff23dcd0a3a83f06184b4eac9ee9c44e19b6824fab2fd32a2b4131f688476aabb5fa2e695a678768ad3f76b2145c91612175c7fd46d04ff67f84baee53134e827932b6f4c03b0cd79ecc29c5248a5964371a263175c24").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_789() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f58d131f6e21c50115cf49a2b24531a04330c0b01aef752d426fa48e931c62fe22fc3129efaa1d8080d44baaca43967463f91d19f29b8bfb23769b38f0e586c8ea51fb808215bcf8b64c1bc44bb9e5d09f3f790eaad76fb7401e3ae23d65e51668a7ef75cc17fd5e54e26c4a59deed209aabae0a7aa1cbf45a02c73becd340f4e7519786f07f6d08a2a850bf85141a9511fa2134384817439066943eae0d7cb8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_790() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b5eab3c8c51bae3d47916e5bb8f7aba379f4066d7b25688c4bf0dc15bb1c6f39ef25b67377fec55f3cd3b148ae14f6a881fa4811149c898c58c5b1ff3ea8cb5987cb33df66ee7aeead75e65011e7976b2d02e8f8be543ae17a08e50a3fe5a8f77ec31301b980761277552e6aa00cea004d18c8fdd342d153054b1d0512594d07791724cac157fa79294575d9843b40ad8e2742086d46f56c85889261ef2aa1b2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_791() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b8ead8a62b75171329ae70d13a1a33d55150d795b17f1bd3d430e940c04b534628a7d9f737f10ea7be11ba065c72ab760ffc13a3b14819c4f5bbc75abe317a6e14c5dc31ecd65955ae922e05b05123e82ea6577a6e7db713e081b2505169defd3d880416648bc14c93bec218ea255c420c4f84624048718bb09c389250e1195ce9ec0b58c40a2ef338fc2150fcfea512300667da322da2348ca48fa5e65f5a93").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_792() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2bea708de6730dda8365d81be28928b1b8a583746026ebdf1bf2702bacd81a8ce5392188c4164cbba915a271444da9cfc99e82bfca37f33aef87404b3b125c2a8b2fee543cc85ae636a448074bdc1af863e003db97b518fb71b8d0ecaec229c97c4eee17798f4ccca150f4efb3f81f142146589c4629c35a6882a2cecc69afe9de8991f92c4161df2722528d1609b9427088723e71b5592f982d2722b31c7fd3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_793() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fc50f7acac62c21cbe9792946841acbc864af9afb5219ecaf74f33c54f726cac4193b28c5208e63aceeca5803037ca4c41d4d5be2e9096ee9071040f436ad6019109ca9ae63bb1de8b0f741ad3f528899b238fafdc6ea5f994844364b77b50105a4cd29b8f1a177c0e9c41893d0d5eb371a419473afc49ffcc4b057ed2486cc320f1dc4a47ad0dfb04d612bf15705623879d88f7390353df676e18fb6b8c7f5c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_794() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("be213f60daf5e35052f8f3b50fcc9644eda1d9db15165152ff428e21d5344444b224ce5a6d412b4c10e4c61490f33dd370213dc25865c18d292a81e2045e8ba1518d14ffb04708adff106df031798970ae2430d26b5b608e4b55975c5b854e54263383cf350e369a371ea04ca94a4ce294fea3c0effe90c74760db72e364b359907a8bf20e8f2ec23d5ade408dd5ed322ccf8e4fad9dc78612abf44733f51a94").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_795() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("78e4fa90420c8f735fc56e9b2c65245ad6e37935c25df03d61d2fb08e372d84152f9dcb8de3e4d948c64d0840a4273413dfc98ef23010b8d8da63f7d6167c2e7a3a1961c811fe40cd00f5305d7e37e39d2536c39846f8adc21ad7b298df81ecc840ec9924132242af2d37a65d8963ff5d9831a28fea1e949904b270366802bfff853e430af7e1671ff4ba2c69dcef8caa9a3eb48c4776babcec47479f679b0af").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_796() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b80c0b7cacfaf6f6ca132e0d20b32136d61790e3de34e2012fd02b55e2acc7a0245d94408b3317d3ed102b8b6debfc8f9a5eca9768c1cb3052770f0957d8115cf60728809ea832ffd837cfb0b5a8dcc7ade1e331fe9cb4dd89063b2d76be31ae4372882afd94aba7eceb7fba642dd13ce8f1f736efaac94b363c42b0e94e8c57df567462d5f8fce2d254d27387533bee99eb847a188fdb1cb3cdea801f87f05e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_797() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("037340254c9844455ccef4b2c3cff30f159d2680f60e99a47e367c0328db5aa5c89b25703434c13a451634ffee6b02bbd8620fa70bf1559887b26989c39d43cce6fa07248596e18f3457dce19c2679de35ffc2f0c45b8b7fe6321feda3a01987e4827e34a5ef612e52765e8c769cde57a3e30a138dbdde5016925bef4f2221bb433df05a3a4697776246049ab0684bc3095a84101c81aa6ebf40d1268eac90e5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_798() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fb3f8795fefd6293708ef5e7d15a946d705ff9e65f6eb83c07f292e040a68807f419dea64b7b5465fa710c3dab607c693ba5ec4c5017519921af2063ab596c8c2081ffdf7b066a1ca1b418dcccd7e9c9b9efc27e3897d1605727cddcdcc5adc93586715fe06d976f3d1e775c04c3f97ea81dc9bacfafb2a84142ddffbfadb42b7b2508eb763d7bde25bda609e66bf5bac294e2d4215b74a65b4080c11d914eb5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_799() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bda3d952e56d907e656a6fdd278d95100bec3adbecc584d315bf244ec991ffddf4a3b6945770972eca882314d00e5733399038ff61050ea10528c7673e4f943416339626bbc2dbd284611cc9d16c488037157f5f74f9cd50c5aa0a415e487daa6e6ef82d82fe6ac31da283070280e97083c4a199ac27ddec9143e63e2a996b9c1ab233f834934560fdebff07ac0ad031962fc1d92953064b33f26a5c9f5e26a4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_800() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6d018c7031f70266819770eb171d4e853a0afe41c15db3df34e371c5299a1e263a8e96dc9ea25657722a7964577e1d7cf074fb4e70b456abc7b14d537b614962697487b0046682046d2c79ffd16aa1df53a20389a1b328088abba116304ae08b4c5be6398c1a07d0b6be69ef0d6360e98e440e5d1b6a916459aa2f5030dda9e0deb8bfd7f05baef0a8ec5a2a023c77d83ea5814e3fd6c64735f39d83d1e6c8f9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_801() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("27fb6b0d1e33188db01927db89aa6c38bf70104015639545cb1fd723866b9447604ab85f70e17a3bc4ae2358528abdabd8683bc42fe95f73b30034f4a1978714f3a80c909123f37b690cf2d546e13d778dbf91bdfae8033e7bba6bb25c06946f4acda451890acfc1dd828f562f21ca6b982e2a6589a2c8b2e52c8a907140f92037294dd41cf59d7e79018527bb5cbe00bd7eb8871bb881cac7608a25a0d5c5ff").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_802() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("979c9eaa1473d7193114b7d431691efeccdac7c51dbfa9207a9b236d49a7cfe351892d2384ca5f99aab8742551aed492d642f764e5217115cd7bfe87effc7bcb261c9ab9eba231e92b8281e327b94b353e5e71cfffab7fc60215d397b6013bd40db78c2daaffa91f3bd63ac7af91a9b2584691ed3f290150bf95e80d636177514cc12d36ca80b6e868fa9845bcc523a2d0c63af4f32ec6a98141308f75527c59").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_803() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("91a8fe650105f80e91b4ed57271266758e74d51547869ebe0c7d95a23337a0b610c71bfe2e34070950009102cd81d4b877f2e4d781cb007e445089578c5b48640e712d2a31d388d7fc8c0dcbe98d0a339f5bb2328d87d7718ce844c43358455230ace2de1a754b452ae44012c5b685d3fcab19a37fe1d62c9561146d3ec61d543f0cf40832d611f178905c7148c34608df84dcc2c60e9dab15e6975bcb650b04").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_804() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5cf041e99da7f95e3a2df51d21a91027b2b9d37dbc682013937c5757def1ce012cdea6429eee17735108bb71c335f7b0ce97fab9649d7a6acf0af12a93c3aa8bc130553eedb4935e7bf032952fa50baa5a1f58428ada61cd63e2720391174c2a3598b6e763791884e596e02edc041aa460140016c36ab8351cd496f0ad68b56699361311d5a312d40217aa64fa44f44852307cd75d92e5257bf0a4a6cc258401").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_805() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a2731cb5ed53dfaed72cf7fac5f84d0060b86a27fbd09966ad247015b11854c5697cd85e43cc254762c9849c83776d698311fac8f9977526a78f418de507c6c99c47a9032794968efd96d0e7dd4356cdbe999c7bfc8ca55664316f67a233c071ca86aadad485dc878966f585d8a01b9270e0cbc7eae395782c7b005492d5ebae9b2aa87d2d3df688d139e433bdf9ef3387e752288371be3cd1d033c1e83afca6").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_806() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("dc98803b1b86e4e283f0ac98f133de245eb30e242e10b44ac5eaa17ce70d2c4b56f17a33d009272adce82222d755b3aead7bae0b2840b528a8a6f7871fefde867cd969c3a75ea6e169726fa96adb6213e4283e3338ef1892280ab6869ad2aff0f555f01111d870ae629b6198a54801b833382472598cc591026c001cbf9efaaeff8fef3989c700bf90f447c8bbf3de32c0d5167205c5e8141e7a948554c29697").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_807() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7651c57d778a4661e3a23a2de1679da35bb4686e849e3b97f3357e288f92656eddab8357dff73fcace0960ab008182b7b78594828fa127828b541d82aa72db0212ce3843c9d5e96dc93876b122edef1b208abc306d6f0ae6c3945f17da936b0871e6ef4565bf3e641e0dac0d994bb8c2b7d8772a8e5d1214e27e019a70ba5581189d0cf6d8b78161a5b804bf9965c9e03f8fefb9a3b82c9ff709bb2a323fd769").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_808() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7b1b307da0e795a14d152a6e7ce89cacb64723e3e4b63f64edb9fa7bcfcb37d41218978a802b21eb415a424d01c6f4d11c40766a9eb5dab420452d91ccfb9f01b20f427c4bf7396535777284a317d83082276c26dad350b58288236c94994915e069f2fc2c39860a7f396e23b864cfaa758a2bad1e932149ab0136cdd1aa916e414bf4346f78244812e6a9f49de4c081c964a1fb8f758ff63c25a3972cc8f850").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_809() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a0500456776e14a8ee612766f97abb1a1975754e42f7fde8a08906faf4b87cc4e0ef5e84d8ed48f255386e4523ea088ce56795c927a7dd9d458723681922825a6a36e6d980a3232ba40bb3369b8f104e8e40fbffad6fba2d921fe62c3006aa583ea05382a48ced28e5f00872d9c40cdcc897cd146321b7019256bbfd24744380c1190186d042c1674318da4ff0825103fbe926475dcc78e5a3b190ab469a444c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_810() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("58890db8b587392fe5054567deddbba40abf648eb07e86597b52ca4fe36d988fcf6413f82e543b60844f21f668a71f43eb2b2d5db7ecf7b867328ea628975fe740f9f44ebde187b21a5f4be8b957169d672414a81431a12767d47136d41061ee4e084f6ca5968045b051b6a4be7c508a7cf4e430bfcdeb1cfb335ba9fe135d35e864540260e7b195b4f5ec8278275c21852c2a1d05c64a205e4b07e3e019c758").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_811() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3b430ec8be31594ef8dbcc55959a1b47cfb2d8a322e5c119248b7240f5cee17727148ecbf77665b91f6fcade0d282c34a0cb5e377f26607f80b0e5423154110bca56409595689410ccea003252f8e750f2715b32ef26ca662e3504a5ab7fb13f8236e5bcab7fdcb7e557d566524bc456325b8f5c8145c18b5964122520ae6d26b243092304621224e2eb3b748846f29bcc1ffa790443fc606a78be3ce9f82431").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_812() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c8560a83e3a7892ba30d76bc39076eccaaab90753b3594994552373de184e6ffd44668a576ce4a6ce5e1b090494d80cb9f363dfb80626903809442f15527b7f956f7aef26fc8199ccfc1d07bf994cb201721b76fa4098ca2a452bbce57ac091c62447a03fba303a85da2f77b48b759cbaa22e9dc2c34943904d3e538da9814ce99b9da1b6f4789cc1ae04d5335abf2b6bc320a8e7d5d87e185da92d5adffaaef").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_813() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e86215a8863f05149e60a913ce56326707807997eee96c72f932bfb22a9376b0419813f5ef8c92e54a935fb25b5b59cdd5cb53d29baac9769b776e3960737ce61f84f5ec5274e1a780712e38e377cd71ddd071d6586587fa99053465f027faf753aa52732509ef23df701081f4fc4b661e0f00ffa1a8097d20a6c6aa205ffc773b0c452d437c9e4dccfcc5b22413a24a184a1a31f0239524ffd925f0ae167ce5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_814() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3b4ca9ad0e72b1de0c590d08a65174a050ad743ce1b65a26ece39fd6fb3fc0af0cdc6b92661761312e595c51d44c24447016c3726583a434afee3f7044b413858e9a363fef5a6694af291750f0aa7f6069902ad108b9370d7ba185d80bcf3ab12f138f2c8bc6481800321f67fb15ecebfeac4ffb258673303941acb13d56aaa59887879eff00f76f7dc9f2d463f044e1366e51fbdb9d4822edff5a4b85f9884f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_815() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("eb15900128af4fcc649d099f5b1e698a4628dc710662b1337201a1f600e32076e79cc4ef3803810a73fa324ac7717f372d91926c497a2b53d846ac6f9616d2f0e1c5a1eb41be1dfe1b21ebe6325aaa29e6f77b05e3b896b8003e084c2afb861746ff24447539e1abe5f2efbbab637ed3edc926ecfb321b39ce86e2e2f8e757b9d74f3c1c6d39d7df286837e0a95be9051aa0fbf521084e196b81082f2cc70e9b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_816() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("09df56006e59063d4fa52e51983b04e0431c603725b141954701bfb440843dca7bed78b1a31b4be0e10c7f04f6b0e761e18d61b44de8be0a1adf81a2fd265813941de746ee3e755445bb2e2f05e1f2c368455a8c829ddedec64c3d59762760edc86f6f06922f08dff8ffb278175c20d3271ce3fb6308492ae8c050eecfd0c6faf21cc5a9c7f03a9cd4d26ff7b7cc993b98b4578da92c5717d2e4c0a3b86d7a13").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_817() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("41c39d98e529f385f2e2f4a29cfeb8f251d453f95ebcdbaaef6200a669f26b3666d9c47eadef0052a3dff51823d9e9098045f6ea8e0d1b3e533ee07515daef0819497e3d2094ddff2a4c5f27ba1c3b412ad967253a0b2fabf60e22022a0501d5fa93e539d3e817dd4090fb89be58eb202a7524b21e6d21c080bc427cd4b0b6b4d0939df433b34671b81327a73fa60f81577ec73392bff55712cfd42a2499a341").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_818() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("68ef7297af2f5642e94c0371e21dc624a981b5791c6ca6a192ac0be86a87d1993d153283043c59a47908368fc7264279d9937022a7695bd3f2dcae7c473831dc81e7da4dd1ac9273647e0098d2692427517951af2ffdd9205b7fd4112402460b1288dac70b652723e1cabb8e8192d5fa60fdc81987eb4540d2dd384456e4975a36492f146122265fd2e1783dcd233b6f7ab0675305e3d217ad6b2d397285fd50").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_819() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1ea329309231c7ea48d47dc861ef23bd397c24d1ee568fd09dc6f55cf81c541417ae064c0db467dbb09247efa1e5fcd955661c5f645be18deae19da1a7d1e9a62da1a574649391ac201102de0776f67e12e369cd8ee50c48fdcdb77e11e3e2b22fbe3b134e1e4f1520b0b2b8bacf1353b7de4499cc6c7d6ebf75f3a0f8dab845e4c3044fb302102d6ba14682130f47b1f7b424a30b06e8e290bb5357f3571c79").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_820() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4952c97629bfb38fc0f1c533628045f9376282a7473ced45dbaa54a3d7f9a77af906f637a83cebc29189342d43c0debed0ab81653c1389516e91a706351f909a87ce0fc04393f2eb7bb81b2575b19fa631a94b38f0ddceecef372fe6d06a5f9323b5d437be07e901f92ee2d05e398099a68bb9161fccda043a1bcdd5744a13bc3f4df892407f23db565dc8f248ba930695100db9d8560867a94ac17a1bd5b0bb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_821() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a2235345350b217367025fe1a48e6036bb498e1c528074a6fa77561ec5e169cbcaf0fd3a635db9e2804ebc845842da07dd559c646c48ef1319b9cf0aaf3cc424056b4c977fca0657ea2e21627d0b524753f185572fecbc7614227358697a4939ec266aaedda5587b66215b0fb317091fc615c04d8a63ab54e413211fbcb362b2368e7961814410d49eca9ab2a70c2a8dfa1638a4843883da5240132c68dfd40e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_822() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c4a2eed703bdb16dc89eeedfd0f55cfbb881a9a6b6ccec7b475c103f90683847057b4752f5a58648c5f7a24f7da38bdf0d0ee06884e07a771057c7ff0ffd1c703272b7eacfa47ab830bb4b2d8ebc54ab8eaa1efaacb4436d374baf5d13671288bc3671df7a79e6ed5b4a139b5ee3c0c5956a821b085528181492199579e4b509cff1a93ade777cf0592a4d28d1a7ad3d31483763cc5d66635dcd46ed7fb28dfa").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_823() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5ca2dbb54e605ab8f85c811f05b10f1804353e27e0881fe226b15a08d57183b6b6da8bfaa122b730aaf382032449fd288ac2f3419b4f0db47066ec33b85bc6bb0040cd9058ef2dec68372e3fc2051936c8adcf1d4999ce9fa4cfc9355a672b833a28102df76534d81efc59ae45923eaaca92056a75661d0772a0aaaacfdbe1b45bd9201ccac10ece56621fafbfebcf7e06c4c6ecf377f1c7ebafc3a52982cb90").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_824() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c5ca6885a883530f5f7037201d816132a74a2f2679270de966a4505f1db32e7bbab1ea7138f825e4fcaa49fbcfadef90da2a7e0986bbb58f8aad31e80918bacb3ced5d57d6957ff9e9b76dc3d8876a2275b7465e487bcb8e1ed5e53f9987e31df7a9b2cdc7f8724733a585a0ccea05d7fcf0f952478183f022f0d4e9fe5f382653e5524d7ded9c82f986e60ba3f94d59c176c3915365bfb7dd939ea5a6f8b421").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_825() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("16c745b3b1cf4e4f76d313ccb2fea2881a28dcdcdf53590a55930df2291ba61ed0a0a716aa923dd19f5dbcafa42de55fd1db21a10544f3686285cb6f103665869c6c3b6ea7e212382b31270c5cb1cb278fb428b39a5f5be5388d7c70244288b5dd4485c4424fbd900ff0c55261dc42b9c2b2052081b392ebfb61d659ff8d8a5ed64adf8657461ee9a04b768feaa9fb028c0bbb0b419e2a2bba5494a44b01221e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_826() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7bbb36e6791292f5c034262fa0ead7815c335e2cae8f40000a84c35cf90f1786ba00e38ec3e000576902fe5b0a6c2bee01c09eb27a843251b720852978909e9a40d9fd8605d2a9de4c103e0e97bb86b4acd5d1dc7ec5f28ce4265de79efd18624095a7aab17ee59da2ffe938a4308f20e4c4c9657f840605a9c07f92f3cdb62ff3e57a6b1bb4f82fd6dddfa042d93448943a34aa12f9eb8f9e917ca386c4d8f0").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_827() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("774e230bd22e4e9832c1169581fb908aa2b43b1ab716b85bd64955039529b371ef4a62d751f4d2dbd44475717b25c70af5704545fa376da4de390e19fdd5aafb7ecfa6cb2b36a24c11c86338fe8a11dc04d2e28d83d7e9722a5665517f77f84f1fe6d1a07a828723dc9ebff5ad5dcc1f07c97e45bf1ae7dabc7bfcbcbae0b19dc09727a4a509f30a53948eb99b1906799f7ceb5dc201bf2e270f3f71c4d94e55").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_828() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c15fe5a1cab24fa4d5b35bb25b839469d16d7ca5694abc8bc046567eb8ddd1494bd335dedaadd28bdece49200d513953ec3ccc471c1117bb32410242f194ad625b9159a43bede1f76609d491e2db020b6431f189334c5889dd2ed58198079bd3517890f31a2c0413a20f2c82f1f798b0632eee440a21413b3b33002764fb7efa721bf9f7a5971fb49d59d4be8853e0f20ee61803b1f32e3c36eba017e9f0f973").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_829() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a9fd624a32fbc34b1b660ee2099a0c728f0a19a80975676c0978aecc7662bcd3834748f0df95ddfd60c4575df85dc96d7e5511e63cdb0ee7403223d2994442d0b112c83c5f0df9360711682bca5282888894b84a553f5481bbad4e29347ed27ad18fe1ab5ca51c0c196a6bf9887ebcba44e1140ab0c4bd795afe7ad6cd648b3158b8ff5568fd69cc74f2a041a1eb77d0ba21a1dafd8dce96138792322b921cd1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_830() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("140be6f1df3b996e598cd40064191223cf97cf49b1c76f71fa5508354fdd863a935471f0749f4f334085fb539c91f00d6849c8eb2eb6f5c0e932d3897bcbf6f3496d1044496f644b332b0269979cc198e568e47743985505771e96a5c03eb12e4d3791f3ec51e7df4b2b84a52e66a16f45d730d22066a866168f5b488e0932d076f5623f8be33061abefc0e7953697ee09878331b0fab3778d18ff5669487149").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_831() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9805749e48331f523542bb75217bd0d9cbb066d3b449e5e1c53a083e1a61337f4d9cd5054c209d3d1c99aa1880967b2c8ad4b30a4bc264efa61cf13e56fa9c0cfbf233e54b4ab57982668c12d8db0fb67da31d21c128c442549dc1a667bb97c1b8d1099d9ac31fce30bd82cf92585800e5e369894738c768ca572ac45e41c8e3a8fac779dc6c200628bf4d5adc7474a2f1f6e1472da05d4b171020c8e77c835f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_832() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d817dd42716138567bcd797fdcfbb5888cbaf1a175a1d286df398c277894addf777a8ff596ff78854bd9a43677785a5395443e5ae4f04b9e2ee42db839121c70842a6f6920da2719e9512fb20b8f6748863fb3b6cd64a23bd2f2729c8918436dec6b3365f898b49af83205a61e7b0876b2986992410420164689f56a843f535797305abd0b6071ac161e69e463f8538d5cbafce5a16cdb6272417f376cd61fd2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_833() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c439dbd009b05eff6fee7a15d64ba8d61ad354d863658a68558e06c2c4978fb1908abb4ba9d8743adc82113a2d3b8451cc0157f34e2ca3ccc750d0ddc993953b7c4e844169a77f7213804853498acc7dc8d7ba09e7ba922ebf0ec7ccb22647db6c256334624b696caee1ea9f9b6d3789aeca82e32b082f0d281cd20e35a8b9e6e0e4dc4ecbf887204c5fba4abf67c498f4d8dfa75dd026407464715175d8c2c9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_834() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("65e6c2ed0b9802dd87ecd7d4a1034cd3ad5d8b91b31dfda76f00990a6704713f84e317f5beb76cd36b48621f89cb8bc780b159f6f8dfd886e0a88b37acaab49abb108b0b891ef5c297912ea2961217e112e67f5cf4b21df68d5fc27556c766b79ee12c236b1d9cd442b210d91285d398161cd67e8b2f04f30f898452e7eb4cdfc15ad40fe4eb66a08a7f92e7c1a6425995dad2ef026f01f18badc89eee4a0b85").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_835() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("abaf64cfb3f17367d89c7efc8074594a1e7aeb3e7ce9a01262af9c6551ff76558874069457a7ffa2d7c4e308cd94cf0cbef4e11ae65a55de413c14b4913ec44f86ce0609f1e8accabb1086596e4b214561eb31ef22aabbfbca2a01e0016b35cfde5aaa20546f0270c0cf711bfe1a5877091cd558087f9144236ab9a59dabf67968d2f09d6b59d20945061f23bb6e1f6eed272734d722d773fb13ec379509bb98").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_836() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("288beb258fb629b1750f0acfb9cd16e5d39e42ec3abcb33d9275e26ed72bee2cef12d7caf05b78f55cff20a564f722d545414d7fc2a2b176615e02230a24c43098cfa729e00dc2e725a48f9395737f80ce6a84acd66f5aee734cafa0f0c370e8cb51875b122b0c2f8e3af19813c268a234a68367d724440971b25e78ed60dcccb7cb424e789dafc834d924c0096db977c758f826db08cfcf1d6514b6dbb5aeaa").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_837() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3cfcca83ffee8ecbb8bab489b40e425804c655a6192a2eb8dc0d946dd63ba52f32095436603594a3bab6c7a4059f7acb0935d8e44cd07f6c202e5691a7a0772437d8717fda948c30528647c4dcffba287e9a52e99166abdd3e77af4843d7aa32156a53e5f78af6c8bc2a6f4915e1dce67d2784796c2a0652b9358beeaa75b8fa7ac07fd4ed5d3010c6f660e72018d06e752952ba9b30130b54d28e65356300ac").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_838() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b5bea0a33eb6e40a5479a8616a1f2380def9a1aae27f204d1034cae4d2daee0ad8958816d1689f587594d446d522ef58c0129ccc3a3816a1098c3e9872a527ae338d38f24da8e4bbdbbe7e0b9929889f6a63459b3067f763bee47948e050700b9a8d7d2aa512d4da9700769bc2705c8acf15b91d278aa7e2d450c80d609595c794c3f9503a3455f4d06e122fabda488e72735d683adeb25fe31eb557a34004ce").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_839() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("cbc9afb2e9d96c9478af970e17259ac8fce91c5592fc74be36b049273674ce4a096d6daa29acdc8f9de4478e6991d52308598dff58b41d7fcc2838ffa4d6f6a1c5e12926b73e9ce845fac80bf96d7205722c020899266d7af68bbb53ff5dd2185fdfae174fcbe2a4aea907142357a276b4a5c7cbea1df5531e37da7f10f20bbe06820229764dffa2eecf418aca8ffb2f2df457a7050bf6b94dc9d31a175d3a94").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_840() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2d947dfc9790c3975a016af2fc7f2d2523bd5cb2cd9edfd1e10d4c8d109567eebb7ad4758ee74a67f19bc57ec44ce4210a20b69cd2baf5dcfa0ee8eeb523f5a196d1e5ccc87c095f55e830942782e622445a2d6878921534ed854ce6ac6ca4ab60f25ee1c2d6ec7de01b0d09a8cdd4b093b445ffc7641f494275b05e71ca83799a753e37130b528241bbf803bd80ec833fdcdd0afb9308755f8dc4435a6da6fc").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_841() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5d6b2e1f67fa53f6f09c776ea470f848daacfbd96e0d8727ce862db415c01395f9cb5ef35a770429b3cc98a30b7dee993cf1fd773fc4cf10d5a100d0ae16c16f110aff9b989e1114c48878737e96034c952b95c491355f41bbabba904031af878a9c22b52ca44a4799d409140e38b3dc17834ff3adab70f3da9b5ea7596614a4f522c1eb9090658c3c92dc81c67f19168f5ae01185a5ccc2212596c4f5406850").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_842() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e70e3755fe61848e66b3089156b464b45fdde00bb0f6741e8005e60b8be0354462d50ac3e3bf84caf37674db4d90d21b0557451f6725cb8146d958eaf436a824ac5b67fba899bda37b5edec50fcb9fb16f0ef4dc2d3cb24e12542c0b61d5387492d80ba9562dbe20d6599e2b8e7bd9200010261b3eae96fc0cd507e671a4296168967b785a9679d9e12a506f53c3a220675cca6bf6b3b655284c522cabfde33b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_843() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("71288bcce2002202105bfdc60b6bcbf2ac18d2a4e692870d566ccbfcced89229be1f271b2daeb5005c1d6a3eee95485ad6b8950eca85f7245e042b27adb035a75312b74c408bf9f459c3e5d93144f7fa0ebbcdfcbbbf09e3dd3f1c6c0dc784bdff594235e075ad60113db3833ed236be962e456cbbaa96c53ed6eadf0144e7e58ef78408b4c712a15df6dcf046e41bce93d119959607853b05c56c36fb3d0323").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_844() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ccd522787dd482a0e093015e153f13ff82ab97bea121b668ce464937895fab1a50cb8cb78a62f373a8ade3a668fb7b5c09e4dc149c7dc5a1d60c6990a7698d9a98fe28e5b0f72a0d6d7be99c8db6d3a060091cf7b1134932513707b949070cfaa9092c11031a9a6f1df54f977bcf1ffc7451921323c8c839e763054b746adae8195771cea95775a0e24cb96c707a1be36691de106dad048c50224ca4b9193bcd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_845() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c9e23bbac5dd6573d3ec0b082f84c1e9fc01c01fc155d8e37388a23d121feec5acc3d817074f5e9ccb46e649d59843d0b59aacc7c56b1853e04379b0b2ae2ed2a128d7f82580ddf88f337dc0eae30a2cd085e21f724923cb1eb4f53659786c739bda8b75ca47d375e411e53311dc2af1a860a395492a833b29f7931f907472a4bae2dbd3d1d8b7012792de19d3478ff4a6e96f902732b4d5f1ff2fe2256ef642").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_846() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b704d2e6ca05a6d09843b651f6b9d9b727e91f4666dfff3e2456c6e7f3ff2482f320004b31188092e25324b28bcc848163e3115c7c0c78d146426b228b310a346300a20a22dfc98ab8c2301c84b8ec904964c4d7f7619482478bc327f2c5343cdcf4f544e23c8f324cc0f916c0f477244ab1bea8ff0b5877a5414fb0294319a866c9f0a39b7508a50f8cbaa32f9f687675f0688cb1be74d4b4e6a3f116786723").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_847() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4aeaa12f7211a56520dc5db7a71857e72c42851616514eeb54180ac4b17068cda412b3044a9808428823fac4df4674360dc9be205c622fa26a77301ca9be6212bb76cac1362cfd7e75d4d0f98284c35377b95054120186d2fd0bb39ad06abd1ff98146896743fd705ff17b80c2405f3ab2e729608d1ce2c4e0c395316da586b5660a8927ef740b79c92aa9f983995a9887c30820e69df6be2f8fa3152baad3da").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_848() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2a24c87397ea4825770019d6854ee5de0ffa3d1adc337124b071befd3ff096500594e3ffc1ad69058e4ed0fa690a29cd838a0028cd5f6208fa792ae591fbfacd0d2b28dbbb38fff03e2ec09e96fb72a6ec804242e161ecb0ac99c8b6e1df3bd828dd22be2e67ee861bed3dc334ebc6283f44c89e789c5396d4204938fae7b1654890a4b36d4066ad2e5a9213e89d8a1bf888839e830f8f4bdfba6373f15c16bb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_849() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("37640248b427ee5c842ba83a1c4a0e6a3d1b406f3a8cba5c4a90058ce39c1007145aea68d196c6b21e0712034f72d08a51997a4adf6623beb95cf6c2dbea6cd1ad4b2c1a401e06ff2e3c80e3b071d8f1b684d7000f475ad12b30999b8efbb699aceda7748fcd63aa298b8b296a3182462c66266676fc8025c48b0e8ed955d24d7da2e76763e4fdd493fcdc0609cd3d7c46ccf6287d56b9a3280e39b8d3038912").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_850() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("aae765fe1fc5f3dd517be85262d63d5623fb7fd4059a85d127145d0a3e5881b0b188bf925f250265e780d9f43841d2a585db355798f06b38455f53bf7390a806369050f3769903b6f2c78ed16dd9509c0a16cdc35cb5c6602dac91c558acb57bf36c2d0532d1ecf1b9c21030b9a3d572947e461570b2d872a196ddb696907ff76d87f6a2eb5623e60a1fe84d7f37a777ce6c16d803ce1e3d3179491ec072e491").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_851() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b5c61e2dbf7754f18adcc7e5094479dd68180764d34df1a960bb269889b2272bf60ad22890b6c7502d867f27fc759606a0fe792b983285dfbfedf87495c0e32a29a810b518a7bfffea28454a6193f22d8247a6c1b8828d25677eed13fbf1d70b94deafc366be588ca418a95bf816f4986d43d2f9acfe7a74334a18858d83e0b750bccbee4e2b240c4dc54addd5c045abf6e4d7822024b9232f31793ad630d920").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_852() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fa30b6c1b72cd813a478ed1419c43d6cf57ee5a044c21c4a95abeb0f1e70a10e58a9a7f138693aa7323fef7b06e916bae99c0fea2d8f5b580286d29035de03d3be296deacb44b5a8b451a143caf47591a9a5ef33a91718b29ebf160ab0be0a88bc4a58378b4b7816480d6a6cee53088ce211b608514ecdc1e129f8a4a746529556342cf8fcdc4093593c5c7392649844afada65689fcf64e591209b16685b755").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_853() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("db517a86a2a4c0546651944202758aa450db502096ce51a6cfb559f3f8478250d7b473148b1e10137885082894ba4ab3aadc7bf84d604b8d691a18e5cada9ca45e041e6b6c40e7ac13873f9721970b59cb8c36ddf1df5c584e2348906f06a9c4d5748276948ecbfced6076d9aa610c1336548bdf4fe9b7672c5da22cbabedfca9a2bc30f39539a356886af300c90a3a18f0993a95c5984be2e63202885d5168a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_854() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("35fa9d899638478445bc655b532e6b8707c021fef8a4da8ed5fdade4450dd30287b0cc616e04a62a1d70a5c21a3f59ca6cf563e5a2b72b0f2e90275fd2b30f6f94a9a263ddc64b8b6eff4f5aa691de2cfcb8b5825f468da6186a03d3da9d99a269f279a80e3c333c137532fb198e26b53bd82aa6a08ff3e06a0e84f3bf1856a630fadd44225707219d08a791efe03bee433266850adc88a15a864425b2438704").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_855() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("718e76ad8329f17ae7a67a31dce0f3369664252541c7ef84711bc2dbba96724ffcc4525d6c4ed92925863ca4df3b0ebbbe2b16a2b420117cc717c90c0b1988c73cda6153606c9f7d0a5569642d65d6219c604ad272df2d6ce107b39a42aa7dc9696cd9e2db182675500270be4ac3838cae5bf5083044ab4d42ad5b117dec1ea265d0afe521316def4cb03ec935a85be4797efdb9982eb075790afb72c6b0328b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_856() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("771418d87de29c73a852b4d55da1ac09f2318c18baa9794aa48d150b395f0a6bbb527100f5ab8267c015264d2e1e44cd54beb97e45c6ad7b0793d12923d0aed8cd96c20b5da1ba13754ade88842111b2dbc420059afbab2dd06905bc92b79e587874abc61496bd39ad171c27a97e9299405ded770051b04813e1ccf09cd732534f4f602f1b68378789e2eb501828f0ce72659dba850ad8898f62ac744fcc96cc").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_857() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b1e9162a68ea6e4092dc0a7ab03999f28df4798aac0fb5f7319952dcc38fda6dd63d38c23e6db6b6361ec0d671081a5396687889c359b03b0f73f5c0cc80c21a2152f67407788ba21021543cd34295f30648e782d5e94b94954d735bf4dfd3e8c4557f828bc1ef1426fd2f27854f2457a115a32dfc71e96515d47eed1e2146c8b1a8b634956b330690dc2cce3f1b4c9d998aa42fd584c3db4b82d2b8a114df6b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_858() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("751cca70e0721303527e7a7610bf9b7c9af4bbd5787092fb3e81945da1cb2ff9b17a10c97569a51d3cf401328d05ee298458222b685a32b2404300e9e55cd2cebec55851599f86f4973b053fb4fe15dd1bdc4d3d869555e24af99c7e73482656b872779c2a133abf070989f28f6209a3c7696a29270d0e20de0237108e490b8f83fc9c580b9da2037e97c3f4ffcedbdb9fe0c6d323b9d29e79f5113a11d567a4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_859() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a9d9f9c47b5e462a8bb0ccf72be183d468ee50c6ac9e06ea73fef623234b9a3daab1e2eaf929f979f1990e08e2da4e83d91a309a1f0adaf300bcb5a85eec6ecd28d722b93b1274a4247da7d93a80c89678393c6ae4c5ec6108accfe67dc2fcb8c07908fd542628bf74c63f98222d3afcb41de0077dce2ba0404efb4e084f8b0a02f5c90f8c2ff0ed4e77bd0379fe88230d270258d8de36f48b2f0432ed39105e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_860() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("956fd31ee39809654bc0679aa2ee49c6c3669e6a83aa7300f08df6afad72b9b6a1e9742e98101c3351f55cb4fb65a3b5dfaf06cd22c705109eecc58e3734d32c1402c8cece3fdb4ece4e4d7b2580a880f0c9bce1139e725b366116af576071a2370aa94bb4f71a42a45f878fda4717155ecb7679144172ea1f7ab8cdad30e395cf26e36a5777bc67e90e5d4610550134655dff4611826691538979d766215807").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_861() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3d24ec52a4c4e7bf192ad0525fac9f5e47c9e57b17c305143aa381df696f2b9f50f34097a4118e278c7c9b54aaae7b9cdeee07256d5c293554ecd4c20d122e13a92adac2cd5326c6af678559a215869b180ee90027f1721d930545ba1ecce6cb364b638c4b4a6d74709e02f57f6753e8d5158c3a67b4da83eb77aee76c14d1184fc0b03829e80705386fd9bf30c18917cc614ae4584b3d0396186eec250c5d68").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_862() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7c44752c9fe6e4d82ae86975fd92df22023fac55d8ac6a317f00b8872e2cf719c91e3f5cbb8ad1c32c665d884b80ec4eb4adcdcba6300c7ffb452eabeeebca9a81514d2be04c3d7c9eb0237f8f42a17cd85ce9251a9ee49ffb71c65fd2b11fd55c3ee4d9e43ccda093a9c98137efcae05a12d7c1ebf2a3915d9ecd23d7470864ef98ae63d9375187a239f46fa3502e9dbc9f44eacb776503a07d82c9c891aec1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_863() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e9aaac48c9e1a9c249c143ced0ee3fb10f2a96d6c65e14b828bfcc05e3bcf2dd610c3615a2fe96f1706ffe7b0265b91193687e140998e5d3812cb1000a8ddc3aafe3e56a20c82149b07a46d712fddd1c2da1d386e6bca8f507f2846764d83ab3c0874666fff58d2639073e9dcafe0e7c05d914c598d4887743c2bc3e321445f8b443b81916bce939f6041b0d32c9ed5bb7db6400290c2296418704f8471c2b8c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_864() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9c178aad491aee68d532cdf793f8ce4746e80d865a0081041770c6d0bc6ce975b13c6656071ec2f8c317bad6682965420e2c4d10464a36ad65fdebba2b19efc6f60616aaa6ffacbbda7f9ebc0e49207590269971b5c8ed4e469a6b6082553f7c08935e2614cc986e38c0623264ce80158cb38eb45d2c648092f7997bb4ace224341fa535cb52e47662bbbd2ae588d07a3a606e449ce4e29578ccac06a7ae5c01").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_865() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("426c62509a3af30fc3f719144f5d5c24f0f64b980b6047e5c8173b8d318eb8b3a821953ab564c1f798d401966f2baf8aaf8405baa713edfeb72e0c1a67e8aef3e1acbc123d82e432e3db4e88a0890e7542039759fc6b22bd3748f5aaed83443d2f8d478c8c253aa5b00af95448ec13dba5aa901fa31a4ec5a3a1be10e53fbe4c853f4b17cc1d519afca4e26298b650af8e37a57c691b6f5d35d2ecbd09529cbf").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_866() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("182e9c802d4b31ebad7b78ae917e76d680dedb98ab85811c28f7eae9c25df3f0a610c907ecc3ba55efd279c91fd8188b04325795cdbf4de7704b642ca9e973126622974739df0adcba2c9558f3a13a1d454951fb40509ac979ada3e6db637cd62b9ea8beec59c65d84c03c0799d2e6e30e1ebe7bbbf020511b7ede4f50a2de89d239ef6169d5774b0a27f9f66741cf5ca627854a159e381025a58fd70f3fa9a7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_867() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d03071218f2d7536d728a8483a842ebef2f30feb016c819d2c023cb1c9e406521d0d09dd6aec56171568486ee1935aaf907413c0c8f667224f201f4e57c0a3287ebe80e0a16689a0fab60f0841006373e3a6efc326eb1a2e6af90cdc80ea484cf14aa076abe34bce6a85ed0fdff669517cd7cdecada104699af907b10f3f32851d2611f12b09c6101ded316d0ea2d34dbbe4d7a1997f20017ddf04ed6e703a8f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_868() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1623431726814d8fc3d8ca2d7054a0847a0f4bd7b5d91b7acfd164e0db458f527b86f353456ab2e74cb30b44b45ed94b3addf5f86ee57c55abf279c48db171ceafb52a9dd6ef49f34934a90c27ba43e17e8aed8906326ac9fe61bad77a58761ccc11007c53920c6695450bb6bd1b56334d9a98042f8bd97f8abab7b617f268cd0b40a029f61faecaa6dab6747ac4fcb9cf25f0d0451c20df865806bcf775f250").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_869() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d29ef99d4335a90cb41f27e1a48a96fca93c42c89d3076e269c4d45c419b425c5591cd71c7b5c602921492c7fb58063efba567e379c3834bb4702c92ac7e11a2aebb52e760c3a3091c3cccad0fc374fea757385789b26246e9692e30867c5e50134661e9ee75d098f2ef435620fd869cd452e0f7d7afe8035ec53ea3dcf5d90f5849a5472741cb80915e9041f76212bca67bb034943a6b13c4e8799ca480e028").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_870() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("71e56dcd3c25064ad13a1d6315c2d54f558427791e8980e037941232dbcb746b5a3dea5255f7c29c53f07275988fa3af5bc2c43a988365dd0f30c3569aa10b25c2f8fd079bf5e9f3cb3dbe2c958c36e84f9a61436a7b97dd74670b294c1b17aea1f8a0f7f418d26e688ca3d6884e8f991b75230394ae6b455cb9fb7377a7b37f9f50de84cd775de94e2416e40e40a3eed8b9af5cfba76ea9773ec9fd07ab9aba").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_871() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("00f309913c30982ea7ec7dd5ccc565fbb3402590660200bc0e23c470ebf368e80e9747545ce6c69686503356f9116dc5bec1427aac096147f260f139a07e7e7e38582d4e3ca0f302f9c222734fedf5c4e4f061112f215ac91e158434ba2eec883b90d6086ef8c9fe0d4dd14d08a756e106cb07e5661028955398021b6afba0447ecadacb7117146885d69344c7c775d2dd44ed3829c340572e0ed54f09a7fcd9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_872() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b03e7647a8a6647b46ecbd917e645368298ef8fb86dcd81f9c9ad86484f8aed541e7ec476af2f7e838651f76ac673f755b1908cf70c33b369917592af3ed70db354674bba95cbc7bfbc646a84e0924a40596fb18ba8761629d0a72d73f512f63d9cd6c14ae6959c50e7167cd1aa4167619c97532b7d42b1f2a809f5a5e6e191185acb83c27ba7c3c3fac31c04ebfc6c7ee96c169f0dd3e9ca8088dd723b30786").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_873() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("58d17c4ad8678ef96f3b387f65df5497be000fa310a8d3e391a3227351d738223f562c39e07ab86aeca9957b5e65f217903bc1510a623e5e58e7c894ed92ac820f06f28b807c5b8fe31ba934155e68747f252dd459cc5853eb9c5c233fee2bfd24e1d64a8b901ab79d6ed78d360860bc75415bc73459180bc48843144adfd3145d6b90900ba70a77e066a5689e50e39e40cee8b50c6d4093c09a436165ace3e1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_874() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("960b391866678aac1422d35fcfb6b228b2f43fe9e23488bdb4bef428c17aaa7daa1e15f098015972c4efd43fc14ef55cc0b4f4d46d2e7bdd2a2b71771e736dd7443acf7dc93c2172169ddd69de9948f4160ebc86f7e502bf5c1c83d52c96cda1c79446a9ba1a438f26b40b0fc14690783de4b55f204a49d5aba679d7f0e813a9d0dad36ff94e75f64fc5242c1a4b3650bb275a9e59e91a05bf4442c04c9afe5a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_875() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e9141ed87ee3caee6ac735b0b03789082e217e497144a0ba6142c10332d94adbf770c56902e54bb8ab7271eb05ca4ea413633511fae5c660b79d5affab07c81976ec89ff33740019fab3afc1d6951ee337db80bf9d3ca50a8970cb6d3c98207f1cb053c0c5e4d604f10e987b2cab82f29353be50be5ef82ae082eeab0e2b9aa17487f77732253cb2dcd3def5873c64705b7f546b1e5985925d205df1d6aa6da4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_876() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7510aa55381c42344122c274e6f1fce994f9ac0f7b51c8e0304d8eb146259a8a39f7083d30ae9876ee2222ba0694af4cb4ac500aff4b097650db33df1de1e06f1961bb95b5020b627b3fd788cb2f23871001742d69b36f973b1337cd3bfb482703e68a179848573821c1489f1ff1b277562d8f7ebdf3c2f15c8588aeec301e4b7dd758b14dcd57e8de4dc37249cd4bc8e315594f2e9d4372e93cfda29c9a1cd7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_877() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("093fd4c7cea254a18c97559b66d22b9605eb5cd9379ef4e3a600cdb520479cd8b014595e86f531dbce6138e40729b3221360d5eafb167a36dbbb04e414f5b99ba3f16d0d1f43232aebd7ffdd4d046f90f6e26f39cb5ec6264fc05dacd972e2c5961ee6e2c988bb9055d7bb943b5e79940bdb269e312045c74626eab45ff12abb0bf9ddd9125ad47a4dfdbfa7074adb5c2209f2958a9d457e4751167d1c0d310f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_878() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4a8581bc938ff798fc4b37ad4322767a366d195912527834bc63e9bf0fe59d7c0425cda2902b6a89650fefface61f6b16607294afc3c513117b3ca6068a1d39d4147b04f20d2845fe4d52351af59b4aa908636e237e7eca49ac5cf52a07c5650a434c1f27c6ab7fe05e3d63d94306ba91e5a3ccc42f6cc24da27e636770e7def8296e0d2f2d99a6a5e412ab51072fa58c4d17f3363e2ee735a813e60c60fb581").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_879() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3ae989ad66cebbf124e34561cdda9745d9f9b1c85db0de7c21bca6a1105c21d589e3faee9eb81ecd8f9ea8549f15b0e65f7267da56f5972ebea1930d888da18b0de3a4f999d731757dc604e7f008e181d50c530ecd129ddc8a0f9637993f5d99d7afe462f3c301b5a855f321e0e98a35aa8d9d85dc93118e058f894bcacad1c55ce2b1b156400a01ec4db8a495433510ed564612709d478337e30d2fd7c48b8c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_880() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e5eca2aa0d30cbb8964a7c4240fe527d7cab1988bd0757c76ca58d4a0d716238c4e87b1eb0248c1fb14678458317a350f5ce0403bea99283f8f70495f280741f70a02ffbfaaf2b24b14ff68bc0876275a708b0db16522e5a6c226680f01e80f05b9d3688a8e3f7a1d46e043c3057ce6dd2a7da3fbbad05239872d2951fe538b0958dde001aa8c43cfef13a06a80349ed9279dbf0b4cd8386e127fc87675b5e10").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_881() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("80d5b8d6b1e898120a4d95524fa5b5d5f536a5ed499c19f0f23300dfdbf8ea8461b845601f92bce56b03b99a44d188e08f51e62d053c8a94b2ad86e54cf6937107b716aa195329ce7d8cbdfe1368ed328c28038bfb6533509e5b98bc16d7e24f5c3d6a17d8a4ce3f183033ebad06aca9ce69a56e691beff2116a84724674adaed61b7a27a66ebbf916a8d72fbeb6b0c6dbcbf32e933fdf90ab50f99de00dbe7f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_882() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("452bd2dbde6315eb642eff8f3a2a5edcbb27a5b724f10ff9c0d183176395fa34549de7ccb5d8cc70a2452bc758d88a4aa103b2233eb879c6996d17661026c15b3d3f1e2e318fb405b09f364513d8b11e8432dae02278f7fd3ed600e317f58a115542a2bb4a293b8ffb2f553112bccde64f7e58bbb9dc02a5805984a8ad853b7af31a6275ed1812680bbb2f3529f8d61e1aa4c1b716eb0a50c6b033b00a21b39f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_883() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("92944e1aee8988c812b601b21414013dd477c9cb03d5a9da828c843971738873e493dcaec4f2507e28db91c20b2892c9a4fa0e7c70ccec2de599c06bdc1054a0b19520e302d940e6f6d6afedbd80fe362521bcb22cd2855adfa5d15b5996be1e2015d72a812081ae306aabb125144b1542e12b815b7b752ac38c4a5fa94116069f03937da7771e43876267fa6018d2f70305ea77c587273ae1f97797fcc15767").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_884() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8ae4b571dbf064df2fa525ce90c693d4c61774a5b17d7d8dcc71e0c731472cbdc915d5f2e9825b728b82f22937cbe457b04b7c7939b85c96a0b39b001a9e58227a035b4162484901b2dbe25306a612bf3ada075b5d08db5f9202ac4e9d5c1456f1060cddb56d35912b799005113e0026a3d47a196955d5200d8e8de2697de3d19508171dc014c35acea5048afb0316e8d0827e2898ddb8399030c8f47024f9d0").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_885() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f3a8a7428bf7118c4b3f9ef35b56060ad5cffc02eb1f25237d029ee038d5695ddc56c764e729769944618f3537b3d669b896b1e112fb9f62c1a3b30cd8dab46afd8dad386dfbbf4469ab7b9d55c2269d8f262837f8ac79fcdb62e5f3d3478c7aed10d6bd42b05f9214c752fbbb3a9bfc4b1bf6e6748c62e25a9a5616f308e2167178973bbc5a876df1181a631737af0527089ba9a929ebad62948832564d32b9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_886() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("31676d4432f4fc7fd8572c89ee096dab8dcb7b37a3d21436cc984331954ef12aa9e3a9d6d94cf2ecae1dc393c57bafabd8a0236e7356a082713f6f2679d59dd1acbe078a54edcb88284f887f3a1c7226148c683196938709921571ecbc25e0a15501241a007389f8440a5b254fad2221a2bc258bf303c271bcfe6f3bc21dd19f4aa89cf3810abcdab746ee9fa5805bb04477e3ed94956408c631b7696c3647ae").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_887() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a2bda9f521224537a2c61cec9d7a6e6b247718a50e90009e96a0841c43f7eec65162a41c856a43abbb8527984430650d733d2a2eedec6bcbcd7bedf4eeca19381ae640be783cdc85f69f9174fd0ccce6c9b957457fa4b589a893e82da515b2697681aa03c2feac090a857f60dfd7733077cc1b5b02f4cd257caff6a1a3d39a823891a0172694403eddfb23a763d5d15c178d9757deb3f33e49f9266194ddfcea").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_888() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("20086d91d94596bd733c5a868e48fc894df3b364bd2c566b2988a6b00ee8ba5cd76c4b5b7040d6f18a51cc92b2aa19fc75df406b0ae22c2748e4a975caf95b091e18fdad237cc40ecffc7e45d06d2258dd10071842b6ab963160af1e4708b8e34c6772284a51baa27ebf4fac531d2fa30f61fe02f8a6777c23cb6e7f80906ba469ff3c956de9b2f3426f498213260a49d9d22a2204b7214cba2c8def470c68a1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_889() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a8f30c7897898bf0a8711f8c1cd907ae25ef132090437e758ae5bee334241b6a88417b9a06819f051d46e30e28d5cbb8050690f0364ead7fc95c9c3dbd6aa48b36d2b15312f2a6112b88d047c2d550e6facaa50e78e4c4f4850359748435bbb3c5bfffc85deda61cb7f876521e945f4e41cb6dec9d174c5b0f6ad5817ef017880bd5216478b6aef1277b7db6c343da9951f6202f214c83abd4979dfd774f78eb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_890() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1718c0bd93597574ad3e03f2acc4dd2a41c78faacdd243e4de6fbb739a516311d0aa2e9716a9ce6102e24b4547fdc94587bb14c3e21f1ae811f8ff866dda8e6b980b196b197de01a83b1c4782cbadde4958097a06f23aa3b42607871966070c10a5d029e8c4822e29b035968efbb1007431a8ab6df594972e5bf02915b2e07de688916e22d2b2949921449e94c9ff8af89f0cc0cdc18d4625e261105671d5f87").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_891() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("861adf90ce4fe7512d83c85490353d882ede8d0d84297c5fbffe96cf3c5b8caa2473f4187700ed4429cf7433fe03c34d0c657d6ce540c779f1437bd77143317e6a21daea0623c3592c620310c8239747711157d8d1ef26fd7a9a5aa2a8eb973f85fce8a2882177c6741622665095aee4b87cfd23f0a221bc91d69250075992336d9d38e663fada2dfcbf7c70e9fc07da7741b0d260f4066bfb82efd9a2443b03").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_892() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("42be224de6ade31f7714d1e58813b1e90e58593710da3587fbc683581c2b776a0fa8d47a1f286cfb9e7018061604987acf8eae4fc1b3f41cc3522efd4c4e48124dbedea8060508e477b3c16e1973999f5631d83ba57048d8e37673cdce7c85a506a9b954fbabe323fce58f454daecd8eb1a2f4a9c4e171619bb9f3c142e96500ec71198472b14ae1b45cee1494cfa531f2e097f9fa407a525735bb790ff73260").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_893() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a7e1b829787b4a6752b9f5ff784b66720949ecf9016dd146fea95c4176ef268da4e8bca90f373d2d9a22f8ed50f0fe2a2e377165e86e4bc0e9082132a168897313e9bd4fc46211af8ee36df3da171e6f1326ecf571cabf36c867cf335d8846ea4e2b428655663d21af09efdc804392048a7d2aaeb74a1a9b68a01835ee409d0b8d655b4957a80d000b0068fef881f6dba469700e92cadbef7cc318ed5b833a60").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_894() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("77660e40028f0c9d2d3066d2f49464d0962aed995ab73dc4a8ba3a5ba02bd7c3f2e1c15f44fb20271fd3645fc5e4792eddb5f955c95e1a9aaf02f7250fde0b67350b3b9de512576dcb4bac995762928e2bcda3736cf2bf0e6d75a64270a6f054f2fa804d0cea244ea9377a5a632207d8d82d3fd1c15dfe68f3d8f85a97273b67bdeded6d8d41da37a9ee3386a355cdcb9d3e65bf380cdd5032048faf455f1fe3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_895() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("94d6affaa544bc3fafd4bcbee242f8fedb1eb63cd4db8df8a505bd9cdd816856eab103d866999939ca588397e50342e1c01975e8628355fa4803aad7115c726b4e08c94ea64103eef5847f5698734e21d09558a292ebbec50e875bb2a2cca72d16a13c48d6dccf3b819d518663510d2e8af4ae953b6ea67da0043d734642d80a23912596780fb0990ed6cfcd257de1b19eb306d93918568eea900e857a0eac47").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_896() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("505a77246ae4fbad8f75e6881ad328566466fdb6a2e79029721bcda04c49eb86450e8cf1e37bbca5e41edc8bba76b2eda83e41cf8d2f197ebfce4462521c76a4b5c9ddabc713a76374f86b51cc840b04bc55a10432abb68764876e927b90e607620313aaf21d3006d22bd8da624477484b7fb00d6a74585dbf3442ca2dc4a6406992d0dc8b92f4e52555ab5c0d6be33fbeea145e0e5fbf9d7595ce2489509208").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_897() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3905917ce5a50bd18e99c2a4526f3b78cdbbd2d381b58a9d21ccbf975fd7642c7e3ad8b47f548b96852b735279368ce3c32f891d1fe8187171558abd0308d33e21634bc12019f6a148597262877a08b1af3fad71e1b1970bbff5fd0581393f2e9284940a1acc4a51b8c145e85637c459729767bc5f070aa70569e42315a266ea1b34537646b8b6a3afb3ef51cabbb065084445e834444c49dd4de8b1947f9eb9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_898() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("efd8632d02abde2ceb2f6eb0de2cf9a012eed87069cc4b76b8dc04abea7fbfaefb4e31dc2dc64beeeca60416c711df395183b4888da86fa3fc74111f2fac9d74b8d02296b4b5e8fe20b8f457f5b57c7a4bff39f0ac070b791e45e30fa1a6f83d31f97ea0a534c7878a19b35bd77010ea1f62a9bea039d16763dcc5b773d06bac56aed7eb00eca150ce3fdd8cbeab1ea20d69b01690964b600f4ef51effcab433").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_899() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("751e7d03ebd46d8bbb7048a32ea6e492eb34c718c901a9e61b65774bd5385b701e01b8ddbfa7de13be87a30b85ddea6898ee64674f9fd6e27edd04fa985499e305765c979f3fccff17c8c916da4206c68d6e613d32954fedf4332e48c9f289153a13cba11453f541b66ec37feb87499b2818ea744afda70e802b967b3c5451ded1c4681ffeb7b9a3439c9fd6cb3ede9608867a1b029be1b222d84688fc2d68ed").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_900() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0ce9860eb42ca550529638e4fd167fa3f17a8c22835a0cce452ec6bdf0ea38216270e659dfa729048840f33e4f54a206ce3705918010381e6c125071261bd057e81fa8d3d48a9383f73d09e1244ff2189dd833cf1cfa7988ddda8f315518cb1744fef5af875ba954a13780cb9c747440c291f5ff004671eb6ab4a1520773b1461bce0e875854987ea12eedc6e0ae5e0f6a152c834b8184ba334ba9083d052baa").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_901() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("62580870036fd4f15320344e56fec25f97e5f54e25781f1cfbcbe0dc9471973fa8c33121b500f2798f3d174b2c5e72d09d05cf56ddd2ff2564798a12b4e5a09d9cd710912f7d6ca4f1c8cc294ed07c87e89a19772c2c4b06e96a4bf15c2ddf222cf4d51e414cb0ad1681207f765007d1dc8eff4c98c6e69fcd133a01ee3e6bcb16741fe9851ec9f6ca92dc5a5cba09f8f6781695518e136874e9b5b2ce9cdf99").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_902() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("00cd5fa6fc5f9e20b9decce78b8d94675241d681f0a750ef5b41d9a8be68eefebf8429914322437bc1481747e1286aba710d4b9fcc7c936a29d551655135ee3c7c3dfbfe85c601915f263979f8f2128f7a07200ff1cb42a773a70b151cdac0e9e61a587630d969c304da6f86c9679288ec27ab206f4ec69b82ec818ad44d5b6aac207e784a7ccf4b61347d7f87d808a60ed215612b28fc329b8ad7de5b0786fc").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_903() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fe7c07661fcce6453c05cd26a470e7f65dc48f425f1d458364c127a099cf7a6bd179ace34193694acb7ef6a332b79b1bfb17192ad7da59f33a2c500a488321917154b88aeb4a9c7498e247e0d4e3b62b2313e269b18ffe73e9c8ddec4e3b22ea0bec843a71615ce2d050fc6a2bd46f0e41ce687c0f1a99d38b5e34374d7534a0679d53d1bc14d975aa6f9e486670e6a7d3969f351aafe040828e8398ed156b0b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_904() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("66bbfc98dba96d3215410274a85cef5e493863819ae7a1e163a6d2d9ca6069d4ffab136500c980f9bfab27f08ae253b037b66cdfb7c6a8abd3d878e283a410498b2a4d0222998223e06862b10020b5d0432666d8a3b119d2293d21d32f4daed883540aaf816e61b5f158ee9037defb876df40dc54986d46d730d3509b6e58a95624ec99b04c24ccdd57fcb62ed7ec0034842e52024305a288a86d1b7f7d67f61").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_905() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2d2c8d1b9a3d0d7da7f8ace68a9bccb1c7118e39640177c63f4f947642c7c494d944e4ccd7dd3e7763632a63b1ca03f88239d770c8c5c3ce953fea55bd76af31c1a701d474cfc81e3ac97797b18c219b246e1963868493ec2194c352595104e0294df40b919484dbb96915646b126be957a3d761c711d517c9df4b6f538aed79d82eeff1277f8942bd88000acd707c2579e3a1cd1617f03da421b9b80c263f2e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_906() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("06f182116a73c0657130408fd56b862058bf6e4b0f7a85d8fab880081d4ab437fc5b2874efe60a8169b235ac124242d7de4cf77ea42107a723942a2f957acbf520f48ca8f7d2d2e68648a1434f6f7a96f6d945f429d025df928604b2cca9633b5c821339c9e508894556f03198f3f0d72ea77e2a199c9d249732c7b9249cd159533242a6e46f83d9bc0366b791e6ea12030876ba55eebf86641c38481ddac942").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_907() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b539e33285ba0c5c902c1645ff1edcee6d57b8506244586b03ed3aaffd4bd98ec998afd34bc3e99c7f6053792c1ba5c3979561425c703fc71036e782a9fb9253f3d06919f758b2bb116eb4ae0b937fd1f08346ca9f0ba3a31273d0c4e326bd80eeb573ee0d355fb7b29108b56de69fa2bed7085432aa4e09ef104b38a5d10ba57efddb48d5c4e47c02f151c284ccf197b95a6e109789d2393a8b2224223df007").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_908() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("af9bab350e4c1a3bf2d7f011a4f1706a6fae14e1415cf3890bb02b10e5c9b993514a1046c7a79155272da8d26fb442d540c03185a21f06395843cfc91e0f9bed877aedc6771361d3e72397082e56298f2f95ea7cc2081354b0200647f4000ed0837183e62b730916a06496957c5d54161d63307368e5425ecd0226967947e8de8873b0682fd71f1e1cfecf2976f87f52b4c2291ef1f41e72404e5b7b6cebe9fe").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_909() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3cb766e53311a48a9035572e01226be74267cb6c1d324f45264ab333467ab628314674a354d93462ddee66eb041fd66069ad6014f3dfd36ffdae8da9f25f8b3c24a808566a3369748337d570aeb88124a63fd05f024e81aa8d4fc4b4f3d0f5e647a152742663305c9a2eca640347d0c459d9a40c841916eafbf51a78193f74e7641ccaeb907d5b79a58fb97713721a9e44424db2c76ca941e5ee1ffa68246e24").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_910() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4ec95ae2619b18e4e91e746a9b5c992df0b14e5d3a40788451e8bd0d866038b25b439bf89ebc495e65ffe0c6cab23a223c14ace4f20aafc976ee7bfa65c21ffd9820020310856944d325099a445fd2f33d9d5c8d4f95b0324433ff1c17b28fd23086a04174ee7f121fecf289b79257166cac8b5f0f4b2cf5726638f85833c04bfc02e3d5aa2b81f6a88e7a54ad75662cdfc69f218ad86496a5e469ad16db1728").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_911() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("54b351da3688008e800f65e460c7419bc2c35b9f51a7f7240bc0713506faf78d32715c3ce3333ba5af2211d21d52d261950b42bf84302c5bc4a97d5be06c692ea353a03026c83628be1515d9cfeeb35b397d67f83baed3acfe27ac777e5dfa0f1c5f7065098c7f3c009b60684e4c7f2dd48f23dd4c50717bc803e8e563f57a7694d8328d0fd3e76782118889704b59fe974b29afa13a8e0f08cbbcb30a79007e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_912() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5eda5b4de8437c779e80a4be7be644c4d7ccfe57a7ed6637b5412b866f269bca3b0590807e30c7108f3ffe780bdccdc8d10f447c6f17611ff4edaff7687dc3357ea1c739d1fa330f4c90ef95843d8b1029603816d3780f26530c3e7787623e00fd2e7f02274452cecbf2791394ee21ca1850ce9365b8807bfd97bdc5830115a7075a25080473be0f358996bcc20ed3e17232de19daa2aeef2d33597fec54e2cd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_913() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("316651949f5692e5d4408730c0c49e0884a29eedbd616a994a76cb567e8bf79bc08c1bfdd8938592b2ac85320246c513b06d327bf948cfbf7915d7d21a4254d2654963f21198824b2e305a411619f2af3c38c4f955c15f1c8a1bdeeda658db39113ae6ae1950bdbae8d51fbf1688474906df704ecedfaf0d27511d610fe4c6d513fbb3b7fc82f35fa88617dcaf0fc33d39aabd9ba8deb96fd1bd6fa632db99a4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_914() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0fa2cf942cdd3c8e5d88774adee4ff4a9e6a4384d6919562d4887edc0592888ea3650f6d11f6668770355b4c8b3b934c762c9c12b3a20aaa2d746f4bef047b1a99840f6e932dae93e5cdc16ea6da9b94e9e8ef636737b09014e733f26697a3e8960ffca885642836888ad98645a6b301ad9d4842af9bd51ad339c4429564ed3096d919394c6c274a200d33d9f4d69f73c82dcf5a95f3137788dfedf522fe4bcf").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_915() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("055aa79f98ea195f3963a17d7777d31543872bae56b14214cfc072bfb4192640fab842d4fe093ae52801b95d5264d5c73b4dcec4a55570702eeeced1bb509be7d8c6734046be64f3a1d1444dd42960315aef4df75d29e6b94ee516531742215690bc5d2a125a6aa9a8722aaa4094636cf83990253d3b8be575fdcd2e6d842357babb3f8540d018c12aa9395192e035f6047bce42f09baf4fd15958843905efd4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_916() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7684831eb3461f424f3625d2535862862cb27133e4f13dbc831dd8e7c08471df9cb180de47e63488b23088c6a4112fc3a78071794432e58a2f8890a450c29c131aa7f15354e887bb4ec0b9820a764f4f196863cd844687fa9181b2f347772166e1fd5f9fc57351a85a2383d8a1349a367e4871d99bf98858f6f0cef9fd38cdd41236dd62b6f4663319333b82b888a37999e1778e3912efdfdec3167c7a8619fe").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_917() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0ccd4373f2ad6890ece5224ffd6e35533168dbcc0f10eb3d734a493332f25e72f9df25a43fcfbd23a88b6bb8185f36c7777cc16ae5050ddcb1d510675b47603ccc4087822e2cd8f4b636fe22773fa1d27ca7a5e032296bc7ecb2aee170bb306c9f699197ac2fa093ced709f622ae7762ed18a472df8dc7d9c5eb63e4a3266dfde048e5153109c577a624f74611ace921f574b514ef7551e0800341b35af5b271").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_918() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("79148b1dd2786351802833a0afa9607582c791f095040c76149964f04ae6f33b94578f9120e40097f8db764832a71bd0d31d756b0bb109b8fcd8a95a9dbee0cebfa735b2cb1e2a7bcdd0340fe7688b4b19320d62ec3212198fce3f376212e2c3b279d39d3ae528315eb8bae748a8549a1ce66657568eb4f282e509a3c122bb1c2ae2e0ec3976f593a43c27bd155d522815697d282e7b49ad9cde688a0ea9fa96").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_919() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("137c07a3976034457a305206e11cfbc949d25d3a8d96511b075d7693e6cb371b2186f3eb29c01ab975a4895db0378c43a3c50fe46523922e3853011def5a7f9d2dd5a1cd6e0e747529f3cf1c49c248e54341280667ac1455def9cac86bf991e4065c19d4527ee9e7c8e7026831e9e9612dacba1565c541e5abd8c43a00c80443c54e130a7fe4eb41b5988c9a168073b942880c0e47dc84527d89d2198c2fb3e4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_920() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("403e7bfba47adc831244257b5d14a4e6b166f87e6326f51f4d1fbd441336a2e6b2421eae5d8d73207529144ca0ff361f17433bf674e25e9319a858faf66d7490de8ce9cdfff4a02465b38da45fbfb7d1440c59aee409dc9032f47176987689c0262d262ab2a177e611d7cfad1036d9cdedf287270b0ed895006dbc68ff1df6d09ea6d192e0f43d6d85ad5abf700f8772c4f8325b936df536acfecd1f5dabe65c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_921() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a8359e36af97858d7c8522cfbb08a11229c6950788674977696a8fc5a97308311cd433d4b7a10d4251398e07410457f64a308eb936ce61116246f5a7060812c095333394f5d672d432da312162953408f4dfd4e3c36a35422cb0ac499cb894ad360108c29222d958fee016e51a08b092d207271e7308a6d722f6271650335d47e4b62c9ea5d13614f4a3c8db066ed7dd0769a17e78ba3054af42fafad0be15f2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_922() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e595eee8322a65a986116d7e7acf485195df3f271e8037de93ba37aacb1c3c421b51ee64318685098c91555a29225739a0e3962ad6397c5a34a4bcf0d34251d697f6487a823879c8b174d63c027f7dfb88bd20fd376448709914249e8a66b9ed6c94f2c2ecd501e33402a1839696c5da99b34e2dbb61b37c3a7ea10cbc40370101cfa938102011c1834a03c5c7ab6289d8a385ddad7769ee6dcc5c535a2b73e4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_923() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3e76c52a84de57ca9aca588000843dacfc32a0241a70870cfbf57d31ecbc69816d57d58e9e1a7dc67f7ad588c9754fe68dfc27776f1bb5c25eb5cb2a45e78f449b01e6e51e78d4c5275eaa7df2d3b830b2acfdb7d32fd477599565614556a8837e96adc78d412b6ac6e9ad7592ecc3c2da53d6d16bdcfc553147e249a94198bd59b05db4bac1738b782900abe490e5afbfc242f9d8e62136717e20156ebdb39f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_924() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1fc5ab8b93889607ea1b631383af42c70d132c9acdb3e19838ccbd4c2b2b4016251db6696a42b1929c52bbda2fec124bba181a4c4252ef5d83a89027595dfce9640a737a4a7c47e5c3a02f36adf22632e8ffd5d906ae4507876c02e839a3b954371cc834cb34bf00038e3f7991c47cc534391ea6c1fb7aca69ea64854ef0ef931728a3875f63be6fc8e9e584118a6a957c8e1def243675b7df0d810eb87801f4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_925() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("41b58e6851a1b5e08b480bb5ba28752d23b1805b12b3f9968f247fb81ff0e714e316c1254d58d4b85fa25596740a4f1a637dc3d368f3abec1e670c87daa17e2407f4745b9af75ba0f008e1c0768cad30937b50b40dd6bf20a30d48c21e061d2fb5b92cf3df6c2844f99418606c87ad328cb2213c3bbfa4e1a94c73023db5bca646dd9a0061a3d528648dc989827a327bb89f1a1978350daa5b5e1ea4e5f033b9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_926() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9317f3f703fe42f20b65c4c7960c42b8c906a1928109ced92d7cfc805e95399886eefda2eae9766a2c3b6bce00008a2ae2ac9d491ef39f7fd119ec95322ee323e55df64dd29fcbfa09e3bca657c4fc0ea7aea25d5624c2551f47959366e9c09ed310afe00a6b239bdcfa2080884da87bd5044ae6063fa3122cd5157dd273cd7079e995dc1c4ff15eb460d90238c12ec9d4b6cb3b014da884e94efbcbe6cd257b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_927() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b98ea0039733460efc61b305cf1bac4512e6c547f24d64a5982d60102f2dbe5ea367a526ea709d44f7e55e58688a8a92065ba2b054e63ed880685c2ca017d6ca2e51935faf22d19a8047c5a006db5beed7818c5d32823d04e1ad3dde9c997e7a05e9012843c02358c104e8b04d87e11045a33a727fb0418c3ac347d571aa7e03cfd816df1ecd4c70ce803de716f517bbf9431ccb534a239cf3423b65781d0afb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_928() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0e68a81a0a6752eadfbe27b19b9bbe68ff9f00e74fab3c5f0b782b835e76c74002b04b762d3eb1e08618f3845fedb87d85bde35315b81289f5a7dc9eb84c0e66d7872de4b2e221b60413da3826937d4e14848accc9fdea632b2fee48eb61792d5f997385af4cd95113c789fa9874a30d95699035a837b1d4288643203130f772a66a2429278b4fbeee91ecf0467b463635fcf4ae7ba33e781f9e50b97911f4f6").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_929() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bc05371cfa933abd3d268cc8705644667a6087c15e5de8eddcde15830dcfbf38463841c99b8de7ee61184b42cc1b5e228ea53533fd61b895c37c1666fe234a7440a070b5a43e34060f330c84c1a17ff02f8cd31a5e791b7cade286a588eb6dc20325f04e4c74724534992c013c0b1990175e240407982aa949c3ad6b25d141e5f8f1dd3a6d4c894527f770e623fb9d48240111c10a5bd500fe0fa001155245b7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_930() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fad11719cab01ba4141c43a9b015082cd2684eb54d2e9e1160b7e595b3105212637bbc64058588ba416e9adc51bda46708c67dda103ee006b50e9467a0a0bd4d7122dbc44d251cef6eb8066b1a4057545ca2c20a921d9faf996409f8705e8f7254d28c9b062bf3d18ead0a68fc7c91e7739a15e9619feefbf0bac6d272e13fc6218b62b528475aa2ab880d279c01bb82d8508421e90ec8c6e185a13c8db4d4a9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_931() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("dae4590fa4ec165e60d2fc7213c29fe7736bc1377543f9cd9e1fa2d632b922e0c352c478d40ef6014fec0b42531f39c1d1f4b4e053dadefd2b8a05f35589364337918deb0f969d847060e4bd09b5f82dff353d886f5a1893e62f780fdc34db7dc2e0e5bcb429f56e0774326d5d625d918a7c2d4390c3cd7460253b200be5020ee87040114f377a6d399d7837971c61fd519aa6d3dcb668b7367b16b8fcf96307").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_932() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1307cf7e811ad369550fda497c6455a8618cd9ccde66bbc9474f27927667b1fc16b4ecfea3837fee8c59cb598070c0757841978c8ae40724841930811c553a376833970c6da6d59416a7cfd606ad41f727b67264d0461eef414cd1fa6a91502e6c47238c5121d33e8f54bf6f8cefe317d4e9cca1bf005a8539722823a469142b1d313ff38c96b82757a41335e4a101964fc034d71e3e3ccd0f1b78ef8478c326").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_933() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7b2cfa79b48b21a0732836194f59a677fb8e4356573b217875b5a80f6c95abe645f8a55cbdcec2a2348cc8236f0578404ca9213f7a1c26bafb86603405de1584cb3c22e2193bdf703201d3a2221b4859f910fc17666c5078ae025f4e9e274d7a921b08bbb42380607c897037707b31a368e01d7a3b5c65770e79a986371f111e38784e1bfadf94045e0c1a3368d02263774cf0ab7e49c8f62ceb7d95f777e189").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_934() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("39050055867953932a181c82cc0582cae517ba15c691803cee331913e804e09fc9b4fc41ff67ddf4e32b1793182d871d62990a3915b3d9a229359c6cb35e4400df6fe33b02e7d9724bec57679226e74a01fbb3b4c28f3ca3eeb1b3f0307c61f974ef1f090463b651005bad78f9d5ea7fc5ae852b807db804a8d3ad96170093484728203aefd669a2b32c46cd6f7218a757c99f8fbe46c1ee46873fe6a3815dd3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_935() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4431e01ef5699b42ace4dfce6ff94e377cd9c0f58f1e9e7f00f1972836f80fc2abd6e7f1c1806b845f1c3f59f284e6cc74c497c743b1b577981d9219a6a4f2f54f72fb106aa0c1da72c0c5f37135f3e72d2a5e6fbe9fc27e9137c5e09fdc4ac2a43d3b01e7914ede8220efd47d97a63e5eac464e540a19d0a13b0e1fd8b85493323c146699c2f8cb32ebdfbf5e67a92af195b38e3e5a6d01a6efb36983dd2ff7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_936() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ad192d01a0d442d49d139d09dae6e7ed4753790a88b25efdf959b282639e302ef0199a37bb5d355d08a4998b3c7bd80468bdb442e8a20438091fb0de6384bfeab6c104c62184e7a93f6a474eb2d853c2ad8b52fca3a392f14776d8975a086d5369e4056e124324fdd0edeeb771313211ada411936cf4a32cda012b84ac9c8eef345e626365b049cef4f891eea8d1118985ee12f7f2786f24f2cafbfa487f070b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_937() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("633eb10c34a74ba3986c10886ac33922d0d6827af26398140b0aea9ba53effaa66b3e5c3754e78119fd7e0c45eca78940df56e26fc2b653b9414941d4149c0352d96dababab18f20980bade3222bb969c848b1e5afef38a223f7afbcc54766996eb454be40327a1939631678cd13414f68c804ae0bf213c297895fca505d341b5f70ea5b1356ad9163224dc15ea62a6f617c067c0593511ee6e1890ffecd3979").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_938() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e64dd2dfb73492ae9b57bbf485b9d8893b41ad2eb941dfe40d9ea982737a36ad3fcff3994e1459d4712134e9e0dcd7b2db627f69b4caad5a206bcdc72606ff421283282a9c0b6252ef259f442b9249ae828a1a48124144b925c37919700950a891a545d084e0b7f0d634d13c40fb767e9889c0d372d8a78b68bf76a9b4d78a032f225517016507a7f47c3eb3df2d90f65d004b125ec22240bceb092544285a26").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_939() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("025830804f012f790dab05669ad7953292a207e89c3d9a09f111fd0ef7e100a4355934a7cbe82d59931f8e9f69ba600ece89ca0c46b0e09f77ab1b0c661b79b6b2b8bd669879e4bf7bd03fcbed72a16f739bf0ceb50a680aded43dee7df354cf048662158ef3f15f83dbaa7bf2ea4e79327d2924cb219aebc97cac0fdbb1228c3744692ff6f53aa47d9d31a09d34e6316817944df421abb2ca0a1cf984d2ed20").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_940() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e54b21f99714e10c914a56c5963833895b7fa788313c871aaeaecc020f0fcfca8a902452855a6f600ef89487c211a3625bd4d13233fb9d612dcd015b83c15c8450e0abe7107692dde1543f586674e0092140ebc9e4d6eaf37f649b01a0ccdbb179a16b4c7abaffdfacf2f8080137f2a6a1537be37e7fdb5b4cf86c7d973eb81d820520ced8f84431860c36bcc438141e9795bbde9db092666d578fedb524754c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_941() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("91908cb88c48289a843bbd9f5c37fa62fdbec44c0401fb2b24b022187e67e9aeafc3b4d5114cbebd1ee97b1eb81e7f6c0180061acd9df56025cb0dbe00e000f8d7c08d4220a55b9cf0fd3a90efd93a0cc7563e0960733a29271aaad9f9b927a9d2dc772204104cd6ab556241a3c51eae25deefbf746c86aedc40d7b1b6b3833922e9b46598823c9aef47b046b0ec95d4952375dd581191ba67eee99ce937fdb3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_942() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c919a9b9d3e7e4800b90df49d42c7cb099bd6075d2b3ac281454babb75108d4145bfffb163e927556f4e97a2bdad8638dda4eb504737ce01d6abb02dfd58df5d777da89ff2829a04f0a908e37a6be53907e7037a48a9dccb082d18322af194e568d9af720175df004abeda1e9a2334099915e0c9bd8eb56b3e9877006fa5d6c95bdc35df88a230d229bb2548cacb1c4c948bd679f5920c946ef1502bd282b12e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_943() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e83374f91f23157c242ed2f03e375bc1372c0e4a991b7cd3026bd75fe12728935cab980b3c40b5aec3b6d9efca021515d4a5614436beafa7231a9918f5d1b8c93e8947917ee882d00e77a69abb557fb4c666faa610d779f30052533c2cd3c794955a97c19386e7cabcfce28ff0fdbee22182a702b7c908fb9c68b53eda7cf824b94f3c86da2d8984eae93f595680ca04c7eeae8cb04037f943b1154564e81055").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_944() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c8d4afac989b830230fa51e7c96bfb59d4ad764a9c4e569e5bed833dbcb9fb85a3e7729250ce14924ba8fb015d8b29e17e96ba0c439d6f90301986e204d6ccd220ce8d5f8d9d00d1e9b4279bcd9e03a22d7e365a6fd91b9e7f5fe733eaeb3678299df9758dcb6ff7ee086ff0fbff46129ca267d1e97cba942897de3b26d3886a7318210c567f70a4719450caf3c064c1d47448730fbff6c137238a9c8a91c39b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_945() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a60c88001dcdfe61242f51ef16e0e85077b3a7c27077819d9962cc017568063db71daaa369c8eaa91df7178a21795e1d4e6cd570c8f9ae00fb230f6849bc041e6270837a920325e62ace9f1f9711e505db8aed3a6ce71df7045f47b94727bff03cf8d67725bccaf2b02e05d3545e47ddc2674aa53fcc1af9204981baad398e6ff3a1dd31779c5fab33da4371a3a9378d2ef598f3d99aa552421b1b688916f2d0").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_946() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9c8ee0ef1d23c0d236b4fc9ac946b4e50ecede037b5719f75cea171c9646cd2c30c8af72ad78117c3aa2bb8636a453049a20e74784200f69ecf0ed91123c78229281a0219ebe7aaa46425d5240c6697c83bee712fadb18336ed16a5251cdb25a38ae13fc13bc436b0428a3b7716c51bf9d74cd5da312f23c78cdd5bf4dcd44c9ffd742b46bebc005910e0fd8bcdd60f77cd1dea5d231839c7a5be9d9d19632be").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_947() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("07e80c353174ba58a0f78d7d552f6a980df13f7bd1d355d864f18872a93033779bf10c338ba219b5c18d95b36858c641c0dc76d4fd6adc5bc5aca74f7d5d445999355b91c17c424a7e24fd50e70eb79cd4f8376380d57e48bf449aa36fe592bd61e8c37e516159b5b7806e9b619b989ec43df2655f0d296139880296b82fe392dcd12c164509d39d6b7b0ee59c0f7cdfdcaf281015940e38445b67d33e8d18fd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_948() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("076807f37e0da607a3d64ed24710fdfe701c5d11eb9c8d88ce5c97cbdef423717321551aaf81a64edc2441580ecee6a7b2c9926ad26315a9709eda8ef5963ba4ab548a56eb9c13118cbefd9ac279ee168ccfcaeb8ee244c7c97d848e2fe66a753cf1605157d6d7aa50a972d1787e7fdd3be7b2c866032432a84c986d86417310da276956f2f7b487553aa329842d57676c09e331f06b0fc7692ab8456420483b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_949() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("47eae0607d67e92f4e160410709d71defa5bf8b3bf76e91ff2c998f41317b31f90318b3bed14e6807ad1e9e0ddf9e9a5077c3863d229b4765e498bb4ac5fd0c3429503b94f9ef3dfc0ba5582310b50aca139aabc51751d22aa3ffc88c6db4ef13931b04c1e69158e3ace46e588e8a5ca1b0748646747eb31978e8aed9870bc7407a9833ee94c3a796209618c045d19194464e39390cb5dce20fc967ee43f9de9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_950() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ddd3af475cab41f4760b8e31c90594bd427c6f13d11d12bbb793a52fe1795c9bf08acc978348d196b618d5bad149dad54ecd37c4b762f7868eaab1a1d4e0d48aba3914910ef043e71c3afd304726fffc7d4594f6491bef5d8dedc354677c95d58885975f1c5df9b860fa8c68aa0dff36bdf35dbdd18add2ad9bd7a9d48273752505b4e33a0f27b8568c1b3a12bd17acb595340871cd895cff33ee839798a1d18").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_951() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("decca9853e524e3c337273b146f81f03138602c02220d09f337ac5b7c9093a1162c6dee6a0e0518dcebad4b052b3cf551287826bff1c84e3518cee28781eef28e199646eaadb4bb081acd8b5a36b39015660eba49fffd6cd512b25efdcdfd73646db5a4393743eea2da4e2036fbf69d4f4bb78d8d7e8fb480dc62dbdf37eb9fcb2522e39c7b37f1564d2f5cf995d66ff82b293530fef2f841a58a2837ec3e942").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_952() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("24c924f2fe868155ed75e9d49ee23c98c579fe31ecabc04a719c3c2411728aa849e3da8d7f375c4d7c5c79c94c643c376d1a14fac6ac67a0d5bb2132d66958e9a113c3eff585ba32c9fc3fdded944d83edd3961132c23556031f391d31dcb5e0c5ca7a6b08a0630ad18d23dac0c5d1bcb0a1271309ccf534608325a1c678a968517b353d48aa48d142a746580e035208a03886a6bfae0a662c347a55909b344e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_953() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d9f4e7b0cac10782f4e399f3c04584f4da54a16874444f9cf40bb2eb246fcd717ceb3351ac4d1d1b2889db901ed1a16bef0657b5a0bd1c6259b2df7d741fd0544ae32fea4d5ff1b9bb6468a68f91b073f8797fef19250a6eee2f6748ff8d8201a93c9ead0b520d85327800d37200303079e734384ea66e85872a303fe38e17d080003967874e1897f7609d90a9eded359cd53e137a19b93d8f0daf48908e6e41").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_954() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d39dd704b3db98e66c4b56582545065a1c2fde51501225ae2ec1e0111fbfed5280d4317a010a36ce3498df67d915aa6d808552eb4f9c2eb8ded169a5e88eb52747512c92e35d747646bb3159c1f340fe88bcc83499c2bf41a7c235124c071b4e4902903b44b9f37b4f2765a6ed73221604234b4d4ab5eac358e318c0ecdaed32c391a15d188464822ef26acace3756373fda55ae9a86d622f26fdcedf992fed3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_955() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7805cc2944b45cf8f638854a5339e019b263acd46b57dcb11462b8cd080f20162d0a3a46306e37249ef1a7302154ed3966352307236043601e4554b2bed8ee75e851d0100e83c2deb424452f9d60d21286e7bd6422d8696551034405ffddc45427e1999d2ec122ad564c2b149d646c731755a75e5d1ba74f5bb6a7debc3bbfb7a4e9b564cd63526e5791a298e42f8242fd402110dd1d821e3367ba79b3911099").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_956() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0b10d1706841ae610f86f28ff407c95a790117dff8def5ac62081b17d36e8e8e88992faafb3e1804456a844e36c5b26742d6c431769e0994ac632257f2aba11dae8e28f3d5a1bf46ede04306ad054e2666447b1f945efa7f61dc19642f5f4a19472ff3a2485a784556f8dd75d0f5d93a75e10ef7cf2f8fe75c84abe5a9616fcb92199a8543eb8bc6928930e9a8e80e9ea551a73cb218e6f908d195aece5f1662").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_957() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c9207f1d61ac3b07d7fd983a9786cfb12f94c5576778957efd6b4711262a47163057f59edb7efc9ed4fb995586b475ce4d96cdce5e7492e75a88e33037040952c926d4eea367c683c94b9e1722906c4f4f6bb7b2ea58da99990b790323c2d355d5fbbb087062ade08f31c1edcca3097b4b41f3b3f952a47ac55aac07d1fae09ac8d6a1fedb08b17417d2b522f06fdd1de513a25403b6dc337a328108a94154e4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_958() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("860d2f03ce949916e13614f17380f3f67fceab6bfc18dee3039b08291329b1e289d11aff2d2f104533030f0ea159850817852915c679735eaa4b57c723090613835b01e8978b5d3c651a2ac4e3b543bf3ff92b2f61185dfe9ea4adfa26b646d8939ebcf15cf2abd7ed721a4f1c0feb3edaae395af60875c886f367a92fb78528b8af64c775cc4e30b48da9e9f8c14c6e367e37b488020f975562a46825cce4bb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_959() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b0c6d7ec86c2d946115b72017fac496f69c4aee5749e4628c2def09736fb9fb1aa90c6026b5b4561d0efe021665211ffaa50e3464b173173bf8628d473ef8bde522866f69b9154b524eb87c09091fd2951da3057af9be315175a040292e8bc7df133ba6cb2a29016870d17c219e581066b20baa3dab7f7a559e8b663bccfae3f842f49f4f65b0ed0859b0520e32ea50ec37d216711d3491686029aa2d41c5a4d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_960() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fcb57cf28135c7c670fe7cc7490b6d5809dec4d794d9018888ed69c9e72558c7b1fbdf234e811d959340cb523f0dd294b28bf87236a2ad49e20b66d69c90c557e16add02d9f68918cc2304a83b34076f073c55b151b7581895c7a0a6cefe61a2f2c0a11f0a9fdb633987ed30c61dd0bd1b36ed05c0ef91495baea3416858aac8698388c0a8be506fb8fd1e8ebcb69a8f17911c73f3b6af313f8ade26813c6cb2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_961() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a3cef90a07af835c6c39a28804c821b0dd170988be549199acefbf0ba85c817e7a5b419ef2581a3cdc8d1a23b95e91a75a09539f144b531f4f8d35f1e7fd914c955d9872ce388c53280d4020d2320d8768008f262aed513aa13cdf13a62b60ca2ecf828e4e091e1cffd009b5ed2d194ca59510880b9a2e08df41982ac95d7aaeecfc5c6d080f3e0a7e3991de69a738a46653ac81cee6bc458655df467309c5c7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_962() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a3e3ffc19102619be5f705ff9278fa7565b036751133fa97cc1dc11068e134dfcd69218602b1a6ecfd41ec6798b679d98b0e775472c783d9de6898fd8544c15fdcb2f7eaf19b4a561c3c2b76dc85f866a839cbb36f2155582bdcd3e440f017b593be07693057aeb49eda5d477060f993f529e5e7a004da06686d9b799e29adf2ef558969643cbae02ee3b87e8ef5250ac367eb4b17959fa8611779326e0b8b21").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_963() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("14b402098d2125962b9d13e975926dd6033779a90583dbbece5f2526d7135e0288c1bec58ef73c590f9498b29dc6dec449593a11a690d93ca98a158a35430b532018b7607a4170212e6b503e0a5ec62ad888d30b6aab89a341728aa91f61d8958587d365358ba38bab8394459f818c600ed4b571bcaa7dcd5ebf65a80a6b68b00b203a2084632f688f6186b77500d2cf3c6e1b15c45e263e1fcf47010b31f41d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_964() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c752fabe23324e10710fcdea0e639bbf1d03f85c51a9d192965086dccd52fd26f0618ec4df63b42d67f88bd9109faa0172de61988dd4773d1edf2db06e70f42c8edbdc2965c28f02f68ce1ee7a5ba7b38634a7c7b3b970ee47d67328f9715c7dbf67bafd712273bc564dd15bf7bb06b9ccfe09beddf106769af58a00f3b31117cb8219f08b1994ea896a1849d5551993778c97adc7eebe0db59e4b13110e73e9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_965() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("33aa097141ee4f418ac32b8d10fef3a6706517c5ec3422eafff23c23241560d11dd6054284467bfc3e2cb89b315e2181acb2568882890fce46ad92434264a8f7f66517e286ff68d95c6ee914debac887530dc5453d1f908c6b9e877c74d951725540e7e172b0f49d179dc2d4fca37b32ee82f45a58bfd0d647e9d302632f9e9b2db68dca7709372455c227fd9e1016e23f6e5c80e09b00329d2911bc86b127fe").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_966() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("707752e29c798658f0b171a9461438153f52c4b38e56d965d9757734c526b188029338a49ee067f674243450afb2b2c6115b27b6409a27352cac3bde86d368e35fdc8d9ad39af2c041ba4177a223d8b79e07224c9b26f2a5c1b1889150561248fa645a781aab788e5823058d289a1428fcfe9242bc24b64e69d596a6cdf6aa8555dd0b1fada971342f943089f90fd5edcc2b1883a000155f2f2f156204b3060c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_967() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6a297ad816b1965668d457bab85043a5ee8f6d6072323b271a2c45ff1cf5f1555c448527451aa51a5a1470a34ab74485c449ce9a7a545e5acd4ad40e04c4e31657ed84f84172db65e2b2ebc093f5d6667230f5c6f202a6e2202ba081904171db7b800e49b65aeeb826997c53dab8c77924fd98e7e7035d5f2afa3663a516df2045e903e7e230863e8f7cffae08c34c2bac50a311e7d3af7bd1b558cc89230345").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_968() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a4a001431e989e5c7b16ffa0e024ec0af35a444726978a5f86c8d3f2340e66e0a2b5ec558ff6b11887df78ca566ef20d77343c2cebd402c6e024cd67dc63010e04255f294c9ad2e04a024cf20a424344da0b853b30de1ff3605e54cae3d720fb0f1ff65767e069ebb32df1ff9ce28cad4b76b51df6fa2ce3f496501fc698ff97a919e646bcb360665c522f33c891a9bf0acdc7f4b17637b0d06383361d59f238").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_969() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("21d87e73a6ad6ab00f24728a74dce727c277fc09013a0576d28126fcfe4c7c2d33e99f773799a6a181058225251b733065ac90491edd3aaf193bd4ea2073787ddddbf915a2fa4940e1c2d74a54f066688af73a398417c7caaad612aa53e716cd7e5e6a20e3b648a66dc677c91ba2d121d0e3ff01df032ab6d151f093772995f3198e7921b904e4beeb1233947e7c9b9e36e39ba732f00e0e1a50426f6bebe7ea").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_970() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("18685ba672449c3e6909829566be869ced96fe45ebefc430477f3464250b73a4abe794093467a61a96ec7ff1371507ba79c73b4962c98de41c6d7d1812f3e0b22df023ce0550896e77dd837992b2720e19375f80ad0b560d3b5577cfc293d5208194e48f03c2b29f68cf25e801c274feb5bdf93248253d04e2676c4e36459147ab38f5f3d5e89833d9ccaa0238819d6ac8274e222c9b883c94d08e7b9e66dd03").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_971() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("43da29652507ac68998b0328b83ad9d093958ec6d4ce28810ae0ec993227431d487ae03aa7438f9548e82bdf324e19c57590d1e2cdc54e483f9c207cacc2fdc917cd8cee61ffc1a202f7b9f4cdbabdc61a178ff9055b6627c2b44dfe4758ae5ecc5d74b873829e7f0fcb443a86c99f9ec8a23853268a596f82bc903ffeeca6c66d4ede81715b3782170fa6e8359bd4f2446e7f8bd4072d277cb7e3895b2c236f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_972() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fc9a74c4d4670b8b882db323b6c94436316ee23a661fbdc1496ccfc3354b2c2c244766ced038fb0571bf12b6d3d2f8f5edb24e556eab33795c704260bb299c17b2c2079ba66fe34abfb0707eca60a1274fba18ef528c36e1d433dd64b3b7a532beb58127f7a0850a277c3207f33c00ba653124262ce7e50f23c5f7c85d650e031e0dc54abb69239fd92a55b4bea4b461a4d8fd24e3827aa3687e379260431112").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_973() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7ba06c1267488e9455091a933a77a68a2eedc28096f37fd8c5cbfd5cc2556ccebecb2274b5d259e7fa4ae2f6ca6a7ad2d741eb62b3fc622a67139781be7ede647e291f748e6a0614c8893f1bffb82678d858999262cae46c12895520507be5e94a8526ba1e91d5d240f9cff074fe6a33235fff17ad1f24bd4d5832070ae6550eee8d0b8e739720bf0f89b5adc41df010368465d2629c1da254fbb8c91fe89f94").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_974() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("315c80df8f647751c28f994a3f5f076394e6859167135555e1cfea0e62c828e436d4127a6f26e52f2d3b136c00b49a8296ff231aea60c0a161bf071ae2b6deda28353a04e03d7a10665e680ce1845bcc7f2d7fa90f76ae022e1d4c1c9f46145e5a9e53709ebefe4ce8656e50f419444772f82b376e6d7500335fa475a0fe6134002efd4d61123174f434f63ece3b4c2204e60a71be46eeb8135081a39df7812d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_975() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("31ebcdc60fe7ab37244711ae6b04af3fec27cf1f1fafdf1121125882d55999c090dc20035ce7bd5bdb0731eea1d48afe03259d95c52037e36d50e3982683785fc09cb1b694f115264b0e042bcc53274cc472ef2602518d438dd229286e14f73053c9b31e05d164a4a37cf84ad34923adb4e76a88c584be0c58352cd20363bcadf7022e9c64092c5624987df7761926ee23c525e6737fa75defe42c6e99c862b3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_976() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3662c43859e3f1177cc6492ced66c5d09e298f656c472a29a143e5b832efc494926209f5df511536527eab27e76e56aa1243b37da86e428b12490db53e1727abd1983687cf7f87a827ff1d0cefce2ac4e3d24deabf3865073468219429dae811a485e9af3f540c9710e6f4d666a00aff098116f72e23ecc2cacf71536f62a2add2670904bcaf9a84c9ce303ae71ec8da72393175ac590541cbc1f323847a858d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_977() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ed2bcf34d46c789d23185bd36b1c1e6274d11809fb0c481bec0c7d0a99f1095534e950bccec1fa67cfd88060e65a9b52c139ff5263a3d4bc9e3662126deb1004489f85008c43b2f27d20bba2d5e7bb6b6ae2a742e39966d91b1acff81b3957c6f479f616d80895e74399f6fdf7ff69a23168768c20466bb9b502fcbf8dfe1196ccb5ea543799faac60a399ec44938d285159dc05eef56d2603fc715530b4d2f7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_978() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9c79c71d56b38fc30e1cc1fd67011635efe042ba0ccc138983c6bc6a8b800cce5a5d586b1ef928a0f63e265a1e0f9802b71c0b7af7906d787bd7d2a35b6b973efbe94f3ac4a952f29961665950df9d61203b2484af13776b812630f8db25019702c470aaf28d0be8b99ea880d8c59d1a64dc8487b6851321b357847941a89a471a228826ff74a472bbc1029cf93c4ef291087655b8aa1cd80ac14d59a89510f7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_979() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3413387cc026875f8e0b29a402ba3a3a5d09d581d3ec6666126b482822323dc237f9c77fe2fb91d8e3856d0a9d86ee584f36b73ef121ce8cff220dc320d1885ebd9e230b42eb2da227060b34b0b97655c1c3776fe052f984bd058f33e41f7efa6e795d95ff7933829b4ed76a862b14aa554b975828eb1b580c20d9047276ba47de4c1f238f87dd754cd003714a7dd231bb1eda492276110ff78b66f3d73d7a52").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_980() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1cb342d402a44920bfff5f9bdc375ef75b070f8f72a1b3085ef2c496272648a7ac6ec3c3ee12d1643028da46e94a371cdd39ebe09d3f2c7a0b2a3880a21f704b38ce8d4d365a96f9be18e6db8d2b614cc03f0d46258d7569b4c80cd13c0d8e0d6b42f5c939c0b4f8a57b10dec4346d62b901de23c8fced1bed069f1627b45ec42fd457bb1487f05318d82ba1806a0b64ec28d4997e948269fcba0940bb3a7b3d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_981() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c9cddafdfb3e650fee61588336f2f716e1b588ea6346e2021120f2c7e3920a66e4484c68456db62e211d224d7b4751dfd8b0776b497cb74e53e39630abe917d98ff4fcc70423be4c6b104e0d7eafbdad7498f163803362e4201689bf7b0ed084dc24054dc47fb353cce363f30a869618808871c31fb02ab189f77f602977fd9870ff8d10d4a7356e5470042906471d7e1bda3dae048e09ae4a04e94149f2a414").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_982() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d7580fe084a7cf29284ceffe420dd6877298cee7ed9e1eff14a5da73a96bcb8851b59013cc2de21942685d59675ae0a7e391be813fb6d84556bb09241338c439c0fe33974b6f4020933571ef18746dd43d7480a3f395f3d8bdf8ecc473f71b3c3960b5f7d9c72beb443b5d4ee857df8a5c311b634cbd05845055d38aae538e693a51f3585c0cd370e86582f75d97128ed554d1bdb1cf63a4390fe922588d4d19").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_983() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b35594b2a47981d3979698b3781f80dde65249a54c414258d32c63a1d6f58d22d536c292f622ea288d783b4bbe791f352f0ed07c5eb482a397b414fe374b99448c4882fc0dafd742e6c8235900cf82341614a8500a1f88c59a957e01e22d694171503f94f33d1209389c88128b146cd75d8e4040c3721854a935b918ea2c6b81f4c3d16e65452563abad2df48eb617fad8b922297048bd81e8129a75b599b98b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_984() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6e9984575dc242321648361f48c49d5dfcfdfde7d06463abb21992994ea27dfdff1b593cb22445be3c0ffa41e9b9713aa7eb50fd118109658435093d2ebdbd26d9f5ec6ef9749f9755773fc155233c029b8b0f47dc4f59cb6252ff2e51cca5edb5032898295f76f352c75e65a53d3aa663d3c4e15e85b3ef0a5d93878cc78d69381c82b7be1c8cb39f192a99bf55ce78f7dcd52aa7162406f58e6aa58e89e32b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_985() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d8fbd038e03e71265baef5cf15d6ef858c011ddbe8a633097ddf2ada93ccc002f3033b255f248ac0b8a3917f5e7079f52f6c175932cb88c9251251284603a63c21877ba57e213cd67f55f275195d935cb5cf027bdc95db06f32798ad56f3c7f5616cbc1c4f1484f82cea0c24c481c61f9d44d2b41a873223cc27ac0e32cca8ea93936720ecff5a7a37418438dc92fde633e8f93070dee74e56a2a4d58004948f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_986() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c9d4149b069c96426f3a390584474109885f6948c7cba44e0746e75ef1ed7f449959e1a0df4d6ab3049d3136b8150c5d0af355f746a10af5df43a607ca6cd277494419c4048aa2f7539dfa45032dd5d3efa043166297aa009ff87c4ef69cd34245293bbaf5501eb96b2c826b0551e12eab00bae7c31ee149d46721f97603ab863328e4f2e0ab30c2efc8043b793be4119a98f31b18d23171ddd63e0a96fdf426").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_987() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("467c8146900593195601a316c8c1338f9b99eae1cf9766badc5217036932c74679efaa8f391fff932713fef6694ea06f7b2b7758afcc239eb3edcbaeb32083bdcb3f065d65acaabc0acfb31c64a19daf780fff6e95d7a96ed1b3fe1859ce41a3beae31a35660fc7d550fa438f195d155b95a8a942d6e5f32158e2534e7bdcb7b10370f38003b42b40827c4fd23c6bcf1087863228e6394c5856706240e3993b3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_988() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8b2c5aa3269e88175ad12db272016bfa34d8061f253bea454a9f4186cf4529ed08845c6157b69651a72dd2f3fc13a85efc7df361bf18f7d4c2c515361b36de6b25fb34e46c323a3d29ae7cb859766acf35b0650841e1c8a47daac16f8c05d87c25da1ce0658876ea370f03838cc78ae4164803034ab6ac8056cf25e600e7b31bba398b7db4059d1578323fcd8e1c3b73f8af1cf5f732807c7ae05e5bbe2b68df").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_989() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2ac7a1e95d09e8c58877faf9acc8f4ace4223a45abba5f5def7de0229d10445908323219a39594cf5722dbbfe5311d9e24cafcbd40357d09ccb660063a9ef3dc26e75353f48c566adf051ec1cbf57de03ec61bcfd0e2d7270177863943e2b38cd704de32b5c26038c6ea4bf9aca3b0aaf3f030173e4e67a4c7ee9af47e9376d84fc94de0fa8b3263cbe2f95e70c4149b62ddc3192c42c746c51d0e8edd79d41d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_990() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8958188ce5bcd2d57d6a5863b2c1d799e8eb0db508faff4d76f37c52c2d1b179f88f2e53e9105c02a6c71a3b76b38395c0f85a6b1b8104392e7c414b6ae1686a461c7f28db6285f05bceb18c5c401e2d54ff72f9f41195673484b2410dd296982b9c1d122262ab6bc02a84400db10a753e36a4abd23643206bc815048170f6ffd42701499bde3895c32d439bfb69a8560c3860149b1c4390763d5c843cd78888").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_991() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4198094fc1e1855e276764c2072497a3ab184def5948bbf44d8661b9186902e69be83616d5f22986913315204170c166088f089a3a7bc7644e5ace563657511afe283655f3b229a71ea2b01f4b86e150e5068bc83170ca25fe55f9f9fed9a54979cad9fdca09b9bb929bba3f09264189d8b91821d83655cf9b711e1e20d9b917937969bfaaf441fe500abf024318cab336d035960cd27275267446ffafc80801").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_992() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f35f7f59061fcd7065476667c6add881baa4ea864dd05ae94478cbcf4208386fb0d2fdee172cd187c3620de7090173eb3862976d4e8cc586ed97508cb04fb9b87f3fb3a7eeb8c4eb8d34c4f4f4498245f880f236b7c73836c8b338deb97881af614d1568b52c4d1b3831c34a6f5247f85779d6301ed03ff569d942cbaac0317e00320a185b2ed0abfc13b4126f8400c374398f8c909a1f85053634cf5f1ce30").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_993() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1460d0e89ea9d0666b0808123dc000b51d79019b4128d679fb8f356de6fe7349160995a4aec34385b38e63a5e77756a86ee6a06599ecea14e7b05ace05009327eb80070dd3db76af0df7890e9fbfa574188ab1717b7fe8cd510db7a1b971842936ebcb19075785861f521a993367575f66a9358fa0464060201fd9e1f7e7b4c3ced636a0eb318c8d8a66a3276facc61f11e74e5a0cacc79057c08ad1bafd8a85").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_994() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a881a6581809380f5af32c07f05a83b5076adad0708e23224dd9add809da7cd893c29c6263de4abf7505479f4f86cecf28b274e101e7933a9b0c108d9cfaf42c30f83165be7aa1cdea3781820cf2140e8fa2b3941cd9ee3732131f770559c7705386fbe075f522262355dec74e094851c3af456a7f602b585365ee9383531279f1a046360c8e461e6968ed0e2ca0e5974ac14814864b741db05a5169b9a8e817").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_995() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a1b399b88545353957ac4ad8ca978f399e2111bfa9f0761ce62a4addf982bd2b5e9c20524f0141aabb9a6de9691e0908b97abc5a92da5aadcde0e8e249baaabe710c8067d4d15d7fa8fdcd7dfd3a9f279665678f000f8c80babe7fefac30fa892f7cbf504998a4a7e4a78782a86db9de57516fa83f0c5cfbe442edd8fc6e81e508d43e6acf9fcf68c56ff112636850cee7ccfcdf3609bc55f479ca236bbead00").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_996() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("03cc91a7ed612cae3abb0f8ea6365fbe7d9a5d4b7ae94d61d47f1944ad304401d6dd876de7640776e81d4408f258643152eed7af61fecf1f266092673cb46e50a00552e672a887905891ef075f152b5b7a7bad8bc4c8ec6fd37e8188079b7999cdff93f26dbbaa85f38e4d37262c45c85de909d252616171072815f6fa90a4c6f3c1f0139ffac25a0091d0a23f0e01f17fadb4f5d27504fb81d1590be1ef5dfd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_997() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("21d3cbbc41d5b25a20a3737ec05f1e10d7c398e43af1d7c51568fc299656d0b8bb581fa6aff8e3f8de4fb1834a8c6c847dca12ed04f798071434eb7ea7ab2e73c142ade2f116ac8b3baea9fca95de53c29f8dd578b02c7832ce5023c62ec327dbba130344f97a3f92b358f44216ac499c5bfb59d45073893ba806116e794e11124f251deebf11854d1dd888504938c54701ea30c6db59269720ff9e2b561da95").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_998() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2cbc97bca0e410f18c8e2f7c1cfd4b838d39b781e0988d3b6b361e35afd38272c6e9046610f5caa3507e22b983ddd36d56d62c95c364cc44170f7f91e5c6b2053d8070129c8bb25eb2efd872249f8b38b9e30fc3eed5272165ca7d3e55b2de8f521978cbe406682f9bb89dd3fd4aa53a3d5d437349994e239d9e056ed7aaaaafbfc1d6436acee59e5c627eb859d4e9c5e2b38f5c486bf7b63415d47209493e45").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

#[tokio::test]
async fn p256verify_generation_999() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("5d510cc058492b1ccaf8f1108549d1bf5aa972a855c1ded4f77b9976f86339d86e70a742f98d4acd39279657774a3ce0b20dd439dd1e0756fa741d3a7043e845c53e4c06a7140287bca204bfac622afffc3ddb4114fe6755955bead241a6befdd51fde61a32932aa404d664af551adcdacff5a0199bf120c2420a3046bdfae8db256ef516ea6552d3880bef9932491543f08fd1743148c9b73480fe72362df65").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #1: signature malleability
#[tokio::test]
async fn p256verify_wycheproof_0_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050232ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e184cd60b855d442f5b3c7b11eb6c4e0ae7525fe710fab9aa7c77a67f79e6fadd762927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #3: Modified r or s, e.g. by adding or subtracting the order of the group
#[tokio::test]
async fn p256verify_wycheproof_1_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023d45c5740946b2a147f59262ee6f5bc90bd01ed280528b62b3aed5fc93f06f739b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #5: Modified r or s, e.g. by adding or subtracting the order of the group
#[tokio::test]
async fn p256verify_wycheproof_2_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023d45c5741946b2a137f59262ee6f5bc91001af27a5e1117a64733950642a3d1e8b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #8: Modified r or s, e.g. by adding or subtracting the order of the group
#[tokio::test]
async fn p256verify_wycheproof_3_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050232ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e184cd60b865d442f5a3c7b11eb6c4e0ae79578ec6353a20bf783ecb4b6ea97b8252927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #9: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_4_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #10: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_5_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #11: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_6_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000000ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #12: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_7_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000000ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #13: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_8_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000000ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #14: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_9_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000000ffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #15: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_10_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000000ffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #16: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_11_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #17: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_12_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000012927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #18: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_13_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000001ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #19: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_14_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000001ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #20: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_15_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000001ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #21: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_16_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000001ffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #22: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_17_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000001ffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #23: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_18_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255100000000000000000000000000000000000000000000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #24: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_19_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255100000000000000000000000000000000000000000000000000000000000000012927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #25: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_20_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #26: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_21_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #27: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_22_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #28: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_23_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551ffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #29: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_24_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551ffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #30: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_25_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255000000000000000000000000000000000000000000000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #31: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_26_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255000000000000000000000000000000000000000000000000000000000000000012927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #32: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_27_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #33: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_28_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #34: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_29_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #35: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_30_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550ffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #36: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_31_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550ffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #37: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_32_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255200000000000000000000000000000000000000000000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #38: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_33_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255200000000000000000000000000000000000000000000000000000000000000012927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #39: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_34_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #40: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_35_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #41: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_36_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #42: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_37_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552ffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #43: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_38_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552ffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #44: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_39_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #45: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_40_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000012927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #46: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_41_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffffffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #47: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_42_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffffffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #48: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_43_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffffffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #49: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_44_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffffffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #50: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_45_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffffffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #51: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_46_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff0000000100000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #52: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_47_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff0000000100000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000012927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #53: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_48_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000001000000000000000000000000ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #54: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_49_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000001000000000000000000000000ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #55: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_50_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000001000000000000000000000000ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #56: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_51_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000001000000000000000000000000ffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #57: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_52_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000001000000000000000000000000ffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #58: Edge case for Shamir multiplication
#[tokio::test]
async fn p256verify_wycheproof_53_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("70239dd877f7c944c422f44dea4ed1a52f2627416faf2f072fa50c772ed6f80764a1aab5000d0e804f3e2fc02bdee9be8ff312334e2ba16d11547c97711c898e6af015971cc30be6d1a206d4e013e0997772a2f91d73286ffd683b9bb2cf4f1b2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #59: special case hash
#[tokio::test]
async fn p256verify_wycheproof_54_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("00000000690ed426ccf17803ebe2bd0884bcd58a1bb5e7477ead3645f356e7a916aea964a2f6506d6f78c81c91fc7e8bded7d397738448de1e19a0ec580bf266252cd762130c6667cfe8b7bc47d27d78391e8e80c578d1cd38c3ff033be928e92927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #60: special case hash
#[tokio::test]
async fn p256verify_wycheproof_55_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7300000000213f2a525c6035725235c2f696ad3ebb5ee47f140697ad25770d919cc98be2347d469bf476dfc26b9b733df2d26d6ef524af917c665baccb23c882093496459effe2d8d70727b82462f61d0ec1b7847929d10ea631dacb16b56c322927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #61: special case hash
#[tokio::test]
async fn p256verify_wycheproof_56_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ddf2000000005e0be0635b245f0b97978afd25daadeb3edb4a0161c27fe0604573b3c90ecd390028058164524dde892703dce3dea0d53fa8093999f07ab8aa432f67b0b8e20636695bb7d8bf0a651c802ed25a395387b5f4188c0c4075c886342927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #62: special case hash
#[tokio::test]
async fn p256verify_wycheproof_57_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("67ab1900000000784769c4ecb9e164d6642b8499588b89855be1ec355d0841a0bfab3098252847b328fadf2f89b95c851a7f0eb390763378f37e90119d5ba3ddbdd64e234e832b1067c2d058ccb44d978195ccebb65c2aaf1e2da9b8b4987e3b2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #63: special case hash
#[tokio::test]
async fn p256verify_wycheproof_58_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a2bf09460000000076d7dbeffe125eaf02095dff252ee905e296b6350fc311cf204a9784074b246d8bf8bf04a4ceb1c1f1c9aaab168b1596d17093c5cd21d2cd51cce41670636783dc06a759c8847868a406c2506fe17975582fe648d1d88b522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #64: special case hash
#[tokio::test]
async fn p256verify_wycheproof_59_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3554e827c700000000e1e75e624a06b3a0a353171160858129e15c544e4f0e65ed66dc34f551ac82f63d4aa4f81fe2cb0031a91d1314f835027bca0f1ceeaa0399ca123aa09b13cd194a422e18d5fda167623c3f6e5d4d6abb8953d67c0c48c72927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #65: special case hash
#[tokio::test]
async fn p256verify_wycheproof_60_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9b6cd3b812610000000026941a0f0bb53255ea4c9fd0cb3426e3a54b9fc6965c060b700bef665c68899d44f2356a578d126b062023ccc3c056bf0f60a237012b8d186c027832965f4fcc78a3366ca95dedbb410cbef3f26d6be5d581c11d36102927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #66: special case hash
#[tokio::test]
async fn p256verify_wycheproof_61_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("883ae39f50bf0100000000e7561c26fc82a52baa51c71ca877162f93c4ae01869f6adfe8d5eb5b2c24d7aa7934b6cf29c93ea76cd313c9132bb0c8e38c96831db26a9c9e40e55ee0890c944cf271756c906a33e66b5bd15e051593883b5e99022927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #67: special case hash
#[tokio::test]
async fn p256verify_wycheproof_62_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a1ce5d6e5ecaf28b0000000000fa7cd010540f420fb4ff7401fe9fce011d0ba6a1af03ca91677b673ad2f33615e56174a1abf6da168cebfa8868f4ba273f16b720aa73ffe48afa6435cd258b173d0c2377d69022e7d098d75caf24c8c5e06b1c2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #68: special case hash
#[tokio::test]
async fn p256verify_wycheproof_63_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8ea5f645f373f580930000000038345397330012a8ee836c5494cdffd5ee8054fdc70602766f8eed11a6c99a71c973d5659355507b843da6e327a28c11893db93df5349688a085b137b1eacf456a9e9e0f6d15ec0078ca60a7f83f2b10d213502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #69: special case hash
#[tokio::test]
async fn p256verify_wycheproof_64_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("660570d323e9f75fa734000000008792d65ce93eabb7d60d8d9c1bbdcb5ef305b516a314f2fce530d6537f6a6c49966c23456f63c643cf8e0dc738f7b876e675d39ffd033c92b6d717dd536fbc5efdf1967c4bd80954479ba66b0120cd16fff22927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #70: special case hash
#[tokio::test]
async fn p256verify_wycheproof_65_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d0462673154cce587dde8800000000e98d35f1f45cf9c3bf46ada2de4c568c343b2cbf046eac45842ecb7984d475831582717bebb6492fd0a485c101e29ff0a84c9b7b47a98b0f82de512bc9313aaf51701099cac5f76e68c8595fc1c1d992582927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #71: special case hash
#[tokio::test]
async fn p256verify_wycheproof_66_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bd90640269a7822680cedfef000000000caef15a6171059ab83e7b4418d7278f30c87d35e636f540841f14af54e2f9edd79d0312cfa1ab656c3fb15bfde48dcf47c15a5a82d24b75c85a692bd6ecafeb71409ede23efd08e0db9abf6340677ed2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #72: special case hash
#[tokio::test]
async fn p256verify_wycheproof_67_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("33239a52d72f1311512e41222a00000000d2dcceb301c54b4beae8e284788a7338686ff0fda2cef6bc43b58cfe6647b9e2e8176d168dec3c68ff262113760f52067ec3b651f422669601662167fa8717e976e2db5e6a4cf7c2ddabb3fde9d67d2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #73: special case hash
#[tokio::test]
async fn p256verify_wycheproof_68_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b8d64fbcd4a1c10f1365d4e6d95c000000007ee4a21a1cbe1dc84c2d941ffaf144a3e23bf314f2b344fc25c7f2de8b6af3e17d27f5ee844b225985ab6e2775cf2d48e223205e98041ddc87be532abed584f0411f5729500493c9cc3f4dd15e862927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #74: special case hash
#[tokio::test]
async fn p256verify_wycheproof_69_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("01603d3982bf77d7a3fef3183ed092000000003a227420db4088b20fe0e9d84a2ded5b7ec8e90e7bf11f967a3d95110c41b99db3b5aa8d330eb9d638781688e97d5792c53628155e1bfc46fb1a67e3088de049c328ae1f44ec69238a009808f92927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #75: special case hash
#[tokio::test]
async fn p256verify_wycheproof_70_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9ea6994f1e0384c8599aa02e6cf66d9c000000004d89ef50b7e9eb0cfbff7363bdae7bcb580bf335efd3bc3d31870f923eaccafcd40ec2f605976f15137d8b8ff6dfa12f19e525270b0106eecfe257499f373a4fb318994f24838122ce7ec3c72927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #76: special case hash
#[tokio::test]
async fn p256verify_wycheproof_71_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d03215a8401bcf16693979371a01068a4700000000e2fa5bf692bc670905b18c50f9c4f0cd6940e162720957ffff513799209b78596956d21ece251c2401f1c6d7033a0a787d338e889defaaabb106b95a4355e411a59c32aa5167dfab2447262927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #77: special case hash
#[tokio::test]
async fn p256verify_wycheproof_72_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("307bfaaffb650c889c84bf83f0300e5dc87e000000008408fd5f64b582e3bb14f612820687604fa01906066a378d67540982e29575d019aabe90924ead5c860d3f9367702dd7dd4f75ea98afd20e328a1a99f4857b316525328230ce294b0fef2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #78: special case hash
#[tokio::test]
async fn p256verify_wycheproof_73_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bab5c4f4df540d7b33324d36bb0c157551527c00000000e4af574bb4d54ea6b89505e407657d6e8bc93db5da7aa6f5081f61980c1949f56b0f2f507da5782a7ac60d31904e3669738ffbeccab6c3656c08e0ed5cb92b3cfa5e7f71784f9c50212927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #79: special case hash
#[tokio::test]
async fn p256verify_wycheproof_74_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d4ba47f6ae28f274e4f58d8036f9c36ec2456f5b00000000c3b869197ef5e15ebbd16fbbb656b6d0d83e6a7787cd691b08735aed371732723e1c68a40404517d9d8e35dba96028b7787d91315be675877d2d097be5e8ee34560e3e7fd25c0f002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #80: special case hash
#[tokio::test]
async fn p256verify_wycheproof_75_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("79fd19c7235ea212f29f1fa00984342afe0f10aafd00000000801e47f8c184e12ec9760122db98fd06ea76848d35a6da442d2ceef7559a30cf57c61e92df327e7ab271da90859479701fccf86e462ee3393fb6814c27b760c4963625c0a198782927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #81: special case hash
#[tokio::test]
async fn p256verify_wycheproof_76_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8c291e8eeaa45adbaf9aba5c0583462d79cbeb7ac97300000000a37ea6700cda54e76b7683b6650baa6a7fc49b1c51eed9ba9dd463221f7a4f1005a89fe00c592ea076886c773eb937ec1cc8374b7915cfd11b1c1ae1166152f2f7806a31c8fd2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #82: special case hash
#[tokio::test]
async fn p256verify_wycheproof_77_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0eaae8641084fa979803efbfb8140732f4cdcf66c3f78a000000003c278a6b215291deaf24659ffbbce6e3c26f6021097a74abdbb69be4fb10419c0c496c946665d6fcf336d27cc7cdb982bb4e4ecef5827f84742f29f10abf83469270a03dc32927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #83: special case hash
#[tokio::test]
async fn p256verify_wycheproof_78_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e02716d01fb23a5a0068399bf01bab42ef17c6d96e13846c00000000afc0f89d207a3241812d75d947419dc58efb05e8003b33fc17eb50f9d15166a88479f107cdee749f2e492b213ce80b32d0574f62f1c5d70793cf55e382d5caadf75927672927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #84: special case hash
#[tokio::test]
async fn p256verify_wycheproof_79_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9eb0bf583a1a6b9a194e9a16bc7dab2a9061768af89d00659a00000000fc7de16554e49f82a855204328ac94913bf01bbe84437a355a0a37c0dee3cf81aa7728aea00de2507ddaf5c94e1e126980d3df16250a2eaebc8be486effe7f22b4f9292927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #85: special case hash
#[tokio::test]
async fn p256verify_wycheproof_80_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("62aac98818b3b84a2c214f0d5e72ef286e1030cb53d9a82b690e00000000cd15a54c5062648339d2bff06f71c88216c26c6e19b4d80a8c602990ac82707efdfce99bbe7fcfafae3e69fd016777517aa01056317f467ad09aff09be73c9731b0d2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #86: special case hash
#[tokio::test]
async fn p256verify_wycheproof_81_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3760a7f37cf96218f29ae43732e513efd2b6f552ea4b6895464b9300000000c8975bd7157a8d363b309f1f444012b1a1d23096593133e71b4ca8b059cff37eaf7faa7a28b1c822baa241793f2abc930bd4c69840fe090f2aacc46786bf9196222927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #87: special case hash
#[tokio::test]
async fn p256verify_wycheproof_82_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0da0a1d2851d33023834f2098c0880096b4320bea836cd9cbb6ff6c8000000005694a6f84b8f875c276afd2ebcfe4d61de9ec90305afb1357b95b3e0da43885e0dffad9ffd0b757d8051dec02ebdf70d8ee2dc5c7870c0823b6ccc7c679cbaa42927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #88: special case hash
#[tokio::test]
async fn p256verify_wycheproof_83_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ffffffff293886d3086fd567aafd598f0fe975f735887194a764a231e82d289aa0c30e8026fdb2b4b4968a27d16a6d08f7098f1a98d21620d7454ba9790f1ba65e470453a8a399f15baf463f9deceb53acc5ca64459149688bd2760c654243392927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #89: special case hash
#[tokio::test]
async fn p256verify_wycheproof_84_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7bffffffff2376d1e3c03445a072e24326acdc4ce127ec2e0e8d9ca99527e7b7614ea84acf736527dd73602cd4bb4eea1dfebebd5ad8aca52aa0228cf7b99a88737cc85f5f2d2f60d1b8183f3ed490e4de14368e96a9482c2a4dd193195c902f2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #90: special case hash
#[tokio::test]
async fn p256verify_wycheproof_85_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a2b5ffffffffebb251b085377605a224bc80872602a6e467fd016807e97fa395bead6734ebe44b810d3fb2ea00b1732945377338febfd439a8d74dfbd0f942fa6bb18eae36616a7d3cad35919fd21a8af4bbe7a10f73b3e036a46b103ef56e2a2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #91: special case hash
#[tokio::test]
async fn p256verify_wycheproof_86_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("641227ffffffff6f1b96fa5f097fcf3cc1a3c256870d45a67b83d0967d4b20c0499625479e161dacd4db9d9ce64854c98d922cbf212703e9654fae182df9bad242c177cf37b8193a0131108d97819edd9439936028864ac195b64fca76d9d6932927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #92: special case hash
#[tokio::test]
async fn p256verify_wycheproof_87_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("958415d8ffffffffabad03e2fc662dc3ba203521177502298df56f36600e0f8b08f16b8093a8fb4d66a2c8065b541b3d31e3bfe694f6b89c50fb1aaa6ff6c9b29d6455e2d5d1779748573b611cb95d4a21f967410399b39b535ba3e5af81ca2e2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #93: special case hash
#[tokio::test]
async fn p256verify_wycheproof_88_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f1d8de4858ffffffff1281093536f47fe13deb04e1fbe8fb954521b6975420f8be26231b6191658a19dd72ddb99ed8f8c579b6938d19bce8eed8dc2b338cb5f8e1d9a32ee56cffed37f0f22b2dcb57d5c943c14f79694a03b9c5e96952575c892927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #94: special case hash
#[tokio::test]
async fn p256verify_wycheproof_89_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0927895f2802ffffffff10782dd14a3b32dc5d47c05ef6f1876b95c81fc31def15e76880898316b16204ac920a02d58045f36a229d4aa4f812638c455abe0443e74d357d3fcb5c8c5337bd6aba4178b455ca10e226e13f9638196506a19391232927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #95: special case hash
#[tokio::test]
async fn p256verify_wycheproof_90_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("60907984aa7e8effffffff4f332862a10a57c3063fb5a30624cf6a0c3ac80589352ecb53f8df2c503a45f9846fc28d1d31e6307d3ddbffc1132315cc07f16dad1348dfa9c482c558e1d05c5242ca1c39436726ecd28258b1899792887dd0a3c62927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #96: special case hash
#[tokio::test]
async fn p256verify_wycheproof_91_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c6ff198484939170ffffffff0af42cda50f9a5f50636ea6942d6b9b8cd6ae1e24a40801a7e606ba78a0da9882ab23c7677b8642349ed3d652c5bfa5f2a9558fb3a49b64848d682ef7f605f2832f7384bdc24ed2925825bf8ea77dc59817257822927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #97: special case hash
#[tokio::test]
async fn p256verify_wycheproof_92_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("de030419345ca15c75ffffffff8074799b9e0956cc43135d16dfbe4d27d7e68deacc5e1a8304a74d2be412b078924b3bb3511bac855c05c9e5e9e44df3d61e967451cd8e18d6ed1885dd827714847f96ec4bb0ed4c36ce9808db8f714204f6d12927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #98: special case hash
#[tokio::test]
async fn p256verify_wycheproof_93_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6f0e3eeaf42b28132b88fffffffff6c8665604d34acb19037e1ab78caaaac6ff2f7a5e9e5771d424f30f67fdab61e8ce4f8cd1214882adb65f7de94c31577052ac4e69808345809b44acb0b2bd889175fb75dd050c5a449ab9528f8f78daa10c2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #99: special case hash
#[tokio::test]
async fn p256verify_wycheproof_94_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("cdb549f773b3e62b3708d1ffffffffbe48f7c0591ddcae7d2cb222d1f8017ab9ffcda40f792ce4d93e7e0f0e95e1a2147dddd7f6487621c30a03d710b330021979938b55f8a17f7ed7ba9ade8f2065a1fa77618f0b67add8d58c422c2453a49a2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #100: special case hash
#[tokio::test]
async fn p256verify_wycheproof_95_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2c3f26f96a3ac0051df4989bffffffff9fd64886c1dc4f9924d8fd6f0edb048481f2359c4faba6b53d3e8c8c3fcc16a948350f7ab3a588b28c17603a431e39a8cd6f6a5cc3b55ead0ff695d06c6860b509e46d99fccefb9f7f9e101857f743002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #101: special case hash
#[tokio::test]
async fn p256verify_wycheproof_96_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ac18f8418c55a2502cb7d53f9affffffff5c31d89fda6a6b8476397c04edf411dfc8bf520445cbb8ee1596fb073ea283ea130251a6fdffa5c3f5f2aaf75ca808048e33efce147c9dd92823640e338e68bfd7d0dc7a4905b3a7ac711e577e90e72927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #102: special case hash
#[tokio::test]
async fn p256verify_wycheproof_97_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4f9618f98e2d3a15b24094f72bb5ffffffffa2fd3e2893683e5a6ab8cf0ee610ad019f74c6941d20efda70b46c53db166503a0e393e932f688227688ba6a576293320eb7ca0710255346bdbb3102cdcf7964ef2e0988e712bc05efe16c1993452927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #103: special case hash
#[tokio::test]
async fn p256verify_wycheproof_98_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("422e82a3d56ed10a9cc21d31d37a25ffffffff67edf7c40204caae73ab0bc75aac8096842e8add68c34e78ce11dd71e4b54316bd3ebf7fffdeb7bd5a3ebc1883f5ca2f4f23d674502d4caf85d187215d36e3ce9f0ce219709f21a3aac003b7a82927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #104: special case hash
#[tokio::test]
async fn p256verify_wycheproof_99_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7075d245ccc3281b6e7b329ff738fbb417a5ffffffffa0842d9890b5cf95d018677b2d3a59b18a5ff939b70ea002250889ddcd7b7b9d776854b4943693fb92f76b4ba856ade7677bf30307b21f3ccda35d2f63aee81efd0bab6972cc0795db552927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #105: special case hash
#[tokio::test]
async fn p256verify_wycheproof_100_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3c80de54cd9226989443d593fa4fd6597e280ebeffffffffc1847eb76c217a95479e1ded14bcaed0379ba8e1b73d3115d84d31d4b7c30e1f05e1fc0d5957cfb0918f79e35b3d89487cf634a4f05b2e0c30857ca879f97c771e877027355b24432927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #106: special case hash
#[tokio::test]
async fn p256verify_wycheproof_101_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("de21754e29b85601980bef3d697ea2770ce891a8cdffffffffc7906aa794b39b43dfccd0edb9e280d9a58f01164d55c3d711e14b12ac5cf3b64840ead512a0a31dbe33fa8ba84533cd5c4934365b3442ca1174899b78ef9a3199f495843897722927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #107: special case hash
#[tokio::test]
async fn p256verify_wycheproof_102_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8f65d92927cfb86a84dd59623fb531bb599e4d5f7289ffffffff2f1f2f57881c5b09ab637bd4caf0f4c7c7e4bca592fea20e9087c259d26a38bb4085f0bbff1145b7eb467b6748af618e9d80d6fdcd6aa24964e5a13f885bca8101de08eb0d752927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #108: special case hash
#[tokio::test]
async fn p256verify_wycheproof_103_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6b63e9a74e092120160bea3877dace8a2cc7cd0e8426cbfffffffffafc8c3ca85e9b1c5a028070df5728c5c8af9b74e0667afa570a6cfa0114a5039ed15ee06fb1360907e2d9785ead362bb8d7bd661b6c29eeffd3c5037744edaeb9ad990c202927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #109: special case hash
#[tokio::test]
async fn p256verify_wycheproof_104_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fc28259702a03845b6d75219444e8b43d094586e249c8699ffffffffe852512e0671a0a85c2b72d54a2fb0990e34538b4890050f5a5712f6d1a7a5fb8578f32edb1846bab6b7361479ab9c3285ca41291808f27fd5bd4fdac720e5854713694c2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #110: special case hash
#[tokio::test]
async fn p256verify_wycheproof_105_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1273b4502ea4e3bccee044ee8e8db7f774ecbcd52e8ceb571757ffffffffe20a7673f8526748446477dbbb0590a45492c5d7d69859d301abbaedb35b2095103a3dc70ddf9c6b524d886bed9e6af02e0e4dec0d417a414fed3807ef4422913d7c2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #111: special case hash
#[tokio::test]
async fn p256verify_wycheproof_106_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("08fb565610a79baa0c566c66228d81814f8c53a15b96e602fb49ffffffffff6e7f085441070ecd2bb21285089ebb1aa6450d1a06c36d3ff39dfd657a796d12b5249712012029870a2459d18d47da9aa492a5e6cb4b2d8dafa9e4c5c54a2b9a8b2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #112: special case hash
#[tokio::test]
async fn p256verify_wycheproof_107_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d59291cc2cf89f3087715fcb1aa4e79aa2403f748e97d7cd28ecaefeffffffff914c67fb61dd1e27c867398ea7322d5ab76df04bc5aa6683a8e0f30a5d287348fa07474031481dda4953e3ac1959ee8cea7e66ec412b38d6c96d28f6d37304ea2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #113: k*G has a large x-coordinate
#[tokio::test]
async fn p256verify_wycheproof_108_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023000000000000000000000000000000004319055358e8617b0c46353d039cdaabffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e0ad99500288d466940031d72a9f5445a4d43784640855bf0a69874d2de5fe103c5011e6ef2c42dcd50d5d3d29f99ae6eba2c80c9244f4c5422f0979ff0c3ba5e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #114: r too large
#[tokio::test]
async fn p256verify_wycheproof_109_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000fffffffffffffffffffffffcffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e0ad99500288d466940031d72a9f5445a4d43784640855bf0a69874d2de5fe103c5011e6ef2c42dcd50d5d3d29f99ae6eba2c80c9244f4c5422f0979ff0c3ba5e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #115: r,s are large
#[tokio::test]
async fn p256verify_wycheproof_110_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254eab05fd9d0de26b9ce6f4819652d9fc69193d0aa398f0fba8013e09c58220455419235271228c786759095d12b75af0692dd4103f19f6a8c32f49435a1e9b8d45").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #116: r and s^-1 have a large Hamming weight
#[tokio::test]
async fn p256verify_wycheproof_111_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd909135bdb6799286170f5ead2de4f6511453fe50914f3df2de54a36383df8dd480984f39a1ff38a86a68aa4201b6be5dfbfecf876219710b07badf6fdd4c6c5611feb97390d9826e7a06dfb41871c940d74415ed3cac2089f1445019bb55ed95").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #117: r and s^-1 have a large Hamming weight
#[tokio::test]
async fn p256verify_wycheproof_112_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd27b4577ca009376f71303fd5dd227dcef5deb773ad5f5a84360644669ca249a54201b4272944201c3294f5baa9a3232b6dd687495fcc19a70a95bc602b4f7c0595c37eba9ee8171c1bb5ac6feaf753bc36f463e3aef16629572c0c0a8fb0800e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #118: small r and s
#[tokio::test]
async fn p256verify_wycheproof_113_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca60502300000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000001a71af64de5126a4a4e02b7922d66ce9415ce88a4c9d25514d91082c8725ac9575d47723c8fbe580bb369fec9c2665d8e30a435b9932645482e7c9f11e872296b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #120: small r and s
#[tokio::test]
async fn p256verify_wycheproof_114_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000036627cec4f0731ea23fc2931f90ebe5b7572f597d20df08fc2b31ee8ef16b15726170ed77d8d0a14fc5c9c3c4c9be7f0d3ee18f709bb275eaf2073e258fe694a5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #122: small r and s
#[tokio::test]
async fn p256verify_wycheproof_115_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000055a7c8825e85691cce1f5e7544c54e73f14afc010cb731343262ca7ec5a77f5bfef6edf62a4497c1bd7b147fb6c3d22af3c39bfce95f30e13a16d3d7b2812f813").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #124: small r and s
#[tokio::test]
async fn p256verify_wycheproof_116_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca60502300000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000006cbe0c29132cd738364fedd603152990c048e5e2fff996d883fa6caca7978c73770af6a8ce44cb41224b2603606f4c04d188e80bff7cc31ad5189d4ab0d70e8c1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #126: r is larger than n
#[tokio::test]
async fn p256verify_wycheproof_117_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325560000000000000000000000000000000000000000000000000000000000000006cbe0c29132cd738364fedd603152990c048e5e2fff996d883fa6caca7978c73770af6a8ce44cb41224b2603606f4c04d188e80bff7cc31ad5189d4ab0d70e8c1").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #127: s is larger than n
#[tokio::test]
async fn p256verify_wycheproof_118_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000005ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc75fbd84be4178097002f0deab68f0d9a130e0ed33a6795d02a20796db83444b037e13920f13051e0eecdcfce4dacea0f50d1f247caa669f193c1b4075b51ae296d2d56").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #128: small r and s^-1
#[tokio::test]
async fn p256verify_wycheproof_119_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca60502300000000000000000000000000000000000000000000000000000000000001008f1e3c7862c58b16bb76eddbb76eddbb516af4f63f2d74d76e0d28c9bb75ea88d0f73792203716afd4be4329faa48d269f15313ebbba379d7783c97bf3e890d9971f4a3206605bec21782bf5e275c714417e8f566549e6bc68690d2363c89cc1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #129: smallish r and s^-1
#[tokio::test]
async fn p256verify_wycheproof_120_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023000000000000000000000000000000000000000000000000002d9b4d347952d6ef3043e7329581dbb3974497710ab11505ee1c87ff907beebadd195a0ffe6d7a4838b2be35a6276a80ef9e228140f9d9b96ce83b7a254f71ccdebbb8054ce05ffa9cbc123c919b19e00238198d04069043bd660a828814051fcb8aac738a6c6b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #130: 100-bit r and small s^-1
#[tokio::test]
async fn p256verify_wycheproof_121_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023000000000000000000000000000000000000001033e67e37b32b445580bf4eff8b748b74000000008b748b748b748b7466e769ad4a16d3dcd87129b8e91d1b4d7393983ca30a520bbc4783dc9960746aab444ef520c0a8e771119aa4e74b0f64e9d7be1ab01a0bf626e709863e6a486dbaf32793afccf774e2c6cd27b1857526").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #131: small r and 100 bit s^-1
#[tokio::test]
async fn p256verify_wycheproof_122_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000100ef9f6ba4d97c09d03178fa20b4aaad83be3cf9cb824a879fec3270fc4b81ef5b5ac331a1103fe966697379f356a937f350588a05477e308851b8a502d5dfcdc5fe9993df4b57939b2b8da095bf6d794265204cfe03be995a02e65d408c871c0b").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #132: 100-bit r and s^-1
#[tokio::test]
async fn p256verify_wycheproof_123_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca60502300000000000000000000000000000000000000062522bbd3ecbe7c39e93e7c25ef9f6ba4d97c09d03178fa20b4aaad83be3cf9cb824a879fec3270fc4b81ef5b1d209be8de2de877095a399d3904c74cc458d926e27bb8e58e5eae5767c41509dd59e04c214f7b18dce351fc2a549893a6860e80163f38cc60a4f2c9d040d8c9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #133: r and s^-1 are close to n
#[tokio::test]
async fn p256verify_wycheproof_124_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6324d5555555550000000055555555555555553ef7a8e48d07df81a693439654210c70083539fbee44625e3acaafa2fcb41349392cef0633a1b8fabecee0c133b10e99915c1ebe7bf00df8535196770a58047ae2a402f26326bb7d41d4d7616337911e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #134: s == 1
#[tokio::test]
async fn p256verify_wycheproof_125_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023555555550000000055555555555555553ef7a8e48d07df81a693439654210c7000000000000000000000000000000000000000000000000000000000000000018aeb368a7027a4d64abdea37390c0c1d6a26f399e2d9734de1eb3d0e1937387405bd13834715e1dbae9b875cf07bd55e1b6691c7f7536aef3b19bf7a4adf576d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #135: s == 0
#[tokio::test]
async fn p256verify_wycheproof_126_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023555555550000000055555555555555553ef7a8e48d07df81a693439654210c7000000000000000000000000000000000000000000000000000000000000000008aeb368a7027a4d64abdea37390c0c1d6a26f399e2d9734de1eb3d0e1937387405bd13834715e1dbae9b875cf07bd55e1b6691c7f7536aef3b19bf7a4adf576d").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #136: point at infinity during verify
#[tokio::test]
async fn p256verify_wycheproof_127_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8555555550000000055555555555555553ef7a8e48d07df81a693439654210c70b533d4695dd5b8c5e07757e55e6e516f7e2c88fa0239e23f60e8ec07dd70f2871b134ee58cc583278456863f33c3a85d881f7d4a39850143e29d4eaf009afe47").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #137: edge case for signature malleability
#[tokio::test]
async fn p256verify_wycheproof_128_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a97fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8f50d371b91bfb1d7d14e1323523bc3aa8cbf2c57f9e284de628c8b4536787b86f94ad887ac94d527247cd2e7d0c8b1291c553c9730405380b14cbb209f5fa2dd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #138: edge case for signature malleability
#[tokio::test]
async fn p256verify_wycheproof_129_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a97fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a968ec6e298eafe16539156ce57a14b04a7047c221bafc3a582eaeb0d857c4d94697bed1af17850117fdb39b2324f220a5698ed16c426a27335bb385ac8ca6fb30").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #139: u1 == 1
#[tokio::test]
async fn p256verify_wycheproof_130_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023555555550000000055555555555555553ef7a8e48d07df81a693439654210c70bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca60502369da0364734d2e530fece94019265fefb781a0f1b08f6c8897bdf6557927c8b866d2d3c7dcd518b23d726960f069ad71a933d86ef8abbcce8b20f71e2a847002").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #140: u1 == n - 1
#[tokio::test]
async fn p256verify_wycheproof_131_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023555555550000000055555555555555553ef7a8e48d07df81a693439654210c7044a5ad0ad0636d9f12bc9e0a6bdd5e1cbcb012ea7bf091fcec15b0c43202d52ed8adc00023a8edc02576e2b63e3e30621a471e2b2320620187bf067a1ac1ff3233e2b50ec09807accb36131fff95ed12a09a86b4ea9690aa32861576ba2362e1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #141: u2 == 1
#[tokio::test]
async fn p256verify_wycheproof_132_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023555555550000000055555555555555553ef7a8e48d07df81a693439654210c70555555550000000055555555555555553ef7a8e48d07df81a693439654210c703623ac973ced0a56fa6d882f03a7d5c7edca02cfc7b2401fab3690dbe75ab7858db06908e64b28613da7257e737f39793da8e713ba0643b92e9bb3252be7f8fe").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #142: u2 == n - 1
#[tokio::test]
async fn p256verify_wycheproof_133_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023555555550000000055555555555555553ef7a8e48d07df81a693439654210c70aaaaaaaa00000000aaaaaaaaaaaaaaaa7def51c91a0fbf034d26872ca84218e1cf04ea77e9622523d894b93ff52dc3027b31959503b6fa3890e5e04263f922f1e8528fb7c006b3983c8b8400e57b4ed71740c2f3975438821199bedeaecab2e9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #143: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_134_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffde91e1ba60fdedb76a46bcb51dc0b8b4b7e019f0a28721885fa5d3a8196623397db7a2c8a1ab573e5929dc24077b508d7e683d49227996bda3e9f78dbeff773504f417f3bc9a88075c2e0aadd5a13311730cf7cc76a82f11a36eaf08a6c99a206").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #144: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_135_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdfdea5843ffeb73af94313ba4831b53fe24f799e525b1e8e8c87b59b95b430ad9dead11c7a5b396862f21974dc4752fadeff994efe9bbd05ab413765ea80b6e1f1de3f0640e8ac6edcf89cff53c40e265bb94078a343736df07aa0318fc7fe1ff").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #145: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_136_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd03ffcabf2f1b4d2a65190db1680d62bb994e41c5251cd73b3c3dfc5e5bafc035d0bc472e0d7c81ebaed3a6ef96c18613bb1fea6f994326fbe80e00dfde67c7e9986c723ea4843d48389b946f64ad56c83ad70ff17ba85335667d1bb9fa619efd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #146: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_137_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd4dfbc401f971cd304b33dfdb17d0fed0fe4c1a88ae648e0d2847f74977534989a0a44ca947d66a2acb736008b9c08d1ab2ad03776e02640f78495d458dd51c326337fe5cf8c4604b1f1c409dc2d872d4294a4762420df43a30a2392e40426add").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #147: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_138_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdbc4024761cd2ffd43dfdb17d0fed112b988977055cd3a8e54971eba9cda5ca71c9c2115290d008b45fb65fad0f602389298c25420b775019d42b62c3ce8a96b73877d25a8080dc02d987ca730f0405c2c9dbefac46f9e601cc3f06e9713973fd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #148: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_139_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd788048ed39a5ffa77bfb62fa1fda2257742bf35d128fb3459f2a0c909ee86f915eca1ef4c287dddc66b8bccf1b88e8a24c0018962f3c5e7efa83bc1a5ff6033e5e79c4cb2c245b8c45abdce8a8e4da758d92a607c32cd407ecaef22f1c934a71").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #149: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_140_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd476d9131fd381bd917d0fed112bc9e0a5924b5ed5b11167edd8b23582b3cb15e5caaa030e7fdf0e4936bc7ab5a96353e0a01e4130c3f8bf22d473e317029a47adeb6adc462f7058f2a20d371e9702254e9b201642005b3ceda926b42b178bef9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #150: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_141_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8374253e3e21bd154448d0a8f640fe46fafa8b19ce78d538f6cc0a19662d3601c2fd20bac06e555bb8ac0ce69eb1ea20f83a1fc3501c8a66469b1a31f619b0986237050779f52b615bd7b8d76a25fc95ca2ed32525c75f27ffc87ac397e6cbaf").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #151: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_142_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd357cfd3be4d01d413c5b9ede36cba5452c11ee7fe14879e749ae6a2d897a52d63fd6a1ca7f77fb3b0bbe726c372010068426e11ea6ae78ce17bedae4bba86ced03ce5516406bf8cfaab8745eac1cd69018ad6f50b5461872ddfc56e0db3c8ff4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #152: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_143_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd29798c5c0ee287d4a5e8e6b799fd86b8df5225298e6ffc807cd2f2bc27a0a6d89cb8e51e27a5ae3b624a60d6dc32734e4989db20e9bca3ede1edf7b086911114b4c104ab3c677e4b36d6556e8ad5f523410a19f2e277aa895fc57322b4427544").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #153: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_144_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd0b70f22c781092452dca1a5711fa3a5a1f72add1bf52c2ff7cae4820b30078dda3e52c156dcaf10502620b7955bc2b40bc78ef3d569e1223c262512d8f49602a4a2039f31c1097024ad3cc86e57321de032355463486164cf192944977df147f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #154: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_145_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd16e1e458f021248a5b9434ae23f474b43ee55ba37ea585fef95c90416600f1baf19b78928720d5bee8e670fb90010fb15c37bf91b58a5157c3f3c059b2655e88cf701ec962fb4a11dcf273f5dc357e58468560c7cfeb942d074abd4329260509").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #155: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_146_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd2252d6856831b6cf895e4f0535eeaf0e5e5809753df848fe760ad86219016a9783a744459ecdfb01a5cf52b27a05bb7337482d242f235d7b4cb89345545c90a8c05d49337b9649813287de9ffe90355fd905df5f3c32945828121f37cc50de6e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #156: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_147_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd81ffe55f178da695b28c86d8b406b15dab1a9e39661a3ae017fbe390ac0972c3dd13c6b34c56982ddae124f039dfd23f4b19bbe88cee8e528ae51e5d6f3a21d7bfad4c2e6f263fe5eb59ca974d039fc0e4c3345692fb5320bdae4bd3b42a45ff").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #157: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_148_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd7fffffffaaaaaaaaffffffffffffffffe9a2538f37b28a2c513dee40fecbb71a67e6f659cdde869a2f65f094e94e5b4dfad636bbf95192feeed01b0f3deb7460a37e0a51f258b7aeb51dfe592f5cfd5685bbe58712c8d9233c62886437c38ba0").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #158: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_149_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdb62f26b5f2a2b26f6de86d42ad8a13da3ab3cccd0459b201de009e526adf21f22eb6412505aec05c6545f029932087e490d05511e8ec1f599617bb367f9ecaaf805f51efcc4803403f9b1ae0124890f06a43fedcddb31830f6669af292895cb0").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #159: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_150_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdbb1d9ac949dd748cd02bbbe749bd351cd57b38bb61403d700686aa7b4c90851e84db645868eab35e3a9fd80e056e2e855435e3a6b68d75a50a854625fe0d7f356d2589ac655edc9a11ef3e075eddda9abf92e72171570ef7bf43a2ee39338cfe").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #160: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_151_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd66755a00638cdaec1c732513ca0234ece52545dac11f816e818f725b4f60aaf291b9e47c56278662d75c0983b22ca8ea6aa5059b7a2ff7637eb2975e386ad66349aa8ff283d0f77c18d6d11dc062165fd13c3c0310679c1408302a16854ecfbd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #161: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_152_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd55a00c9fcdaebb6032513ca0234ecfffe98ebe492fdf02e48ca48e982beb3669f3ec2f13caf04d0192b47fb4c5311fb6d4dc6b0a9e802e5327f7ec5ee8e4834df97e3e468b7d0db867d6ecfe81e2b0f9531df87efdb47c1338ac321fefe5a432").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #162: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_153_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdab40193f9b5d76c064a27940469d9fffd31d7c925fbe05c919491d3057d66cd2d92b200aefcab6ac7dafd9acaf2fa10b3180235b8f46b4503e4693c670fccc885ef2f3aebf5b317475336256768f7c19efb7352d27e4cccadc85b6b8ab922c72").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #163: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_154_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdca0234ebb5fdcb13ca0234ecffffffffcb0dadbbc7f549f8a26b4408d0dc86000a88361eb92ecca2625b38e5f98bbabb96bf179b3d76fc48140a3bcd881523cde6bdf56033f84a5054035597375d90866aa2c96b86a41ccf6edebf47298ad489").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #164: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_155_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdbfffffff3ea3677e082b9310572620ae19933a9e65b285598711c77298815ad3d0fb17ccd8fafe827e0c1afc5d8d80366e2b20e7f14a563a2ba50469d84375e868612569d39e2bb9f554355564646de99ac602cc6349cf8c1e236a7de7637d93").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #165: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_156_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd266666663bbbbbbbe6666666666666665b37902e023fab7c8f055d86e5cc41f4836f33bbc1dc0d3d3abbcef0d91f11e2ac4181076c9af0a22b1e4309d3edb2769ab443ff6f901e30c773867582997c2bec2b0cb8120d760236f3a95bbe881f75").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #166: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_157_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdbfffffff36db6db7a492492492492492146c573f4c6dfc8d08a443e258970b0992f99fbe973ed4a299719baee4b432741237034dec8d72ba5103cb33e55feeb8033dd0e91134c734174889f3ebcf1b7a1ac05767289280ee7a794cebd6e69697").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #167: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_158_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdbfffffff2aaaaaab7fffffffffffffffc815d0e60b3e596ecb1ad3a27cfd49c4d35ba58da30197d378e618ec0fa7e2e2d12cffd73ebbb2049d130bba434af09eff83986e6875e41ea432b7585a49b3a6c77cbb3c47919f8e82874c794635c1d2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #168: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_159_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd7fffffff55555555ffffffffffffffffd344a71e6f651458a27bdc81fd976e378651ce490f1b46d73f3ff475149be29136697334a519d7ddab0725c8d0793224e11c65bd8ca92dc8bc9ae82911f0b52751ce21dd9003ae60900bd825f590cc28").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #169: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_160_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd3fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192aa6d8e1b12c831a0da8795650ff95f101ed921d9e2f72b15b1cdaca9826b9cfc6def6d63e2bc5c089570394a4bc9f892d5e6c7a6a637b20469a58c106ad486bf37").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #170: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_161_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd5d8ecd64a4eeba466815ddf3a4de9a8e6abd9c5db0a01eb80343553da648428f0ae580bae933b4ef2997cbdbb0922328ca9a410f627a0f7dff24cb4d920e15428911e7f8cc365a8a88eb81421a361ccc2b99e309d8dcd9a98ba83c3949d893e3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #171: point duplication during verification
#[tokio::test]
async fn p256verify_wycheproof_162_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050236f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569bb726660235793aa9957a61e76e00c2c435109cf9a15dd624d53f4301047856b5b812fd521aafa69835a849cce6fbdeb6983b442d2444fe70e134c027fc46963838a40f2a36092e9004e92d8d940cf5638550ce672ce8b8d4e15eba5499249e9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #172: duplication bug
#[tokio::test]
async fn p256verify_wycheproof_163_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050236f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569bb726660235793aa9957a61e76e00c2c435109cf9a15dd624d53f4301047856b5b812fd521aafa69835a849cce6fbdeb6983b442d2444fe70e134c027fc469637c75bf0c5c9f6d17ffb16d2726bf30a9c7aaf31a8d317472b1ea145ab66db616").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #173: point with x-coordinate 0
#[tokio::test]
async fn p256verify_wycheproof_164_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000001555555550000000055555555555555553ef7a8e48d07df81a693439654210c706adda82b90261b0f319faa0d878665a6b6da497f09c903176222c34acfef72a647e6f50dcc40ad5d9b59f7602bb222fad71a41bf5e1f9df4959a364c62e488d9").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #175: comparison with point at infinity
#[tokio::test]
async fn p256verify_wycheproof_165_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023555555550000000055555555555555553ef7a8e48d07df81a693439654210c703333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aa9dd86d3b5f4a13e8511083b78002081c53ff467f11ebd98a51a633db76665d25045d5c8200c89f2fa10d849349226d21d8dfaed6ff8d5cb3e1b7e17474ebc18f7").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #176: extreme value for k and edgecase s
#[tokio::test]
async fn p256verify_wycheproof_166_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978555555550000000055555555555555553ef7a8e48d07df81a693439654210c704fea55b32cb32aca0c12c4cd0abfb4e64b0f5a516e578c016591a93f5a0fbcc5d7d3fd10b2be668c547b212f6bb14c88f0fecd38a8a4b2c785ed3be62ce4b280").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #177: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_167_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63ccc6a771527024227792170a6f8eee735bf32b7f98af669ead299802e32d7c3107bc3b4b5e65ab887bbd343572b3e5619261fe3a073e2ffd78412f726867db589e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #178: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_168_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa7851c2bbad08e54ec7a9af99f49f03644d6ec6d59b207fec98de85a7d15b956efcee9960283045075684b410be8d0f7494b91aa2379f60727319f10ddeb0fe9d6").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #179: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_169_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc476699783333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaaf6417c8a670584e388676949e53da7fc55911ff68318d1bf3061205acb19c48f8f2b743df34ad0f72674acb7505929784779cd9ac916c3669ead43026ab6d43f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #180: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_170_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc4766997849249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185501421277be45a5eefec6c639930d636032565af420cf3373f557faa7f8a06438673d6cb6076e1cfcdc7dfe7384c8e5cac08d74501f2ae6e89cad195d0aa1371").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #181: extreme value for k
#[tokio::test]
async fn p256verify_wycheproof_171_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc4766997816a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb0d935bf9ffc115a527735f729ca8a4ca23ee01a4894adf0e3415ac84e808bb343195a3762fea29ed38912bd9ea6c4fde70c3050893a4375850ce61d82eba33c5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #182: extreme value for k and edgecase s
#[tokio::test]
async fn p256verify_wycheproof_172_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050236b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296555555550000000055555555555555553ef7a8e48d07df81a693439654210c705e59f50708646be8a589355014308e60b668fb670196206c41e748e64e4dca215de37fee5c97bcaf7144d5b459982f52eeeafbdf03aacbafef38e213624a01de").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #183: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_173_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050236b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc169fb797325843faff2f7a5b5445da9e2fd6226f7ef90ef0bfe924104b02db8e7bbb8de662c7b9b1cf9b22f7a2e582bd46d581d68878efb2b861b131d8a1d667").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #184: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_174_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050236b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa7271cd89c000143096b62d4e9e4ca885aef2f7023d18affdaf8b7b548981487540a1c6e954e32108435b55fa385b0f76481a609b9149ccb4b02b2ca47fe8e4da5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #185: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_175_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050236b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2963333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaa3d0bc7ed8f09d2cb7ddb46ebc1ed799ab1563a9ab84bf524587a220afe499c12e22dc3b3c103824a4f378d96adb0a408abf19ce7d68aa6244f78cb216fa3f8df").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #186: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_176_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050236b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29649249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185a6c885ade1a4c566f9bb010d066974abb281797fa701288c721bcbd23663a9b72e424b690957168d193a6096fc77a2b004a9c7d467e007e1f2058458f98af316").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #187: extreme value for k
#[tokio::test]
async fn p256verify_wycheproof_177_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050236b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29616a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb8d3c2c2c3b765ba8289e6ac3812572a25bf75df62d87ab7330c3bdbad9ebfa5c4c6845442d66935b238578d43aec54f7caa1621d1af241d4632e0b780c423f5d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #188: testing point duplication
#[tokio::test]
async fn p256verify_wycheproof_178_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c26b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2964fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #189: testing point duplication
#[tokio::test]
async fn p256verify_wycheproof_179_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca60502344a5ad0ad0636d9f12bc9e0a6bdd5e1cbcb012ea7bf091fcec15b0c43202d52e249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c26b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2964fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #190: testing point duplication
#[tokio::test]
async fn p256verify_wycheproof_180_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c26b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296b01cbd1c01e58065711814b583f061e9d431cca994cea1313449bf97c840ae0a").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #191: testing point duplication
#[tokio::test]
async fn p256verify_wycheproof_181_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca60502344a5ad0ad0636d9f12bc9e0a6bdd5e1cbcb012ea7bf091fcec15b0c43202d52e249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c26b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296b01cbd1c01e58065711814b583f061e9d431cca994cea1313449bf97c840ae0a").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #192: pseudorandom signature
#[tokio::test]
async fn p256verify_wycheproof_182_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855b292a619339f6e567a305c951c0dcbcc42d16e47f219f9e98e76e09d8770b34a0177e60492c5a8242f76f07bfe3661bde59ec2a17ce5bd2dab2abebdf89a62e204aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad587d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #193: pseudorandom signature
#[tokio::test]
async fn p256verify_wycheproof_183_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("dc1921946f4af96a2856e7be399007c9e807bdf4c5332f19f59ec9dd1bb8c7b3530bd6b0c9af2d69ba897f6b5fb59695cfbf33afe66dbadcf5b8d2a2a6538e23d85e489cb7a161fd55ededcedbf4cc0c0987e3e3f0f242cae934c72caa3f43e904aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad587d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #194: pseudorandom signature
#[tokio::test]
async fn p256verify_wycheproof_184_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023a8ea150cb80125d7381c4c1f1da8e9de2711f9917060406a73d7904519e51388f3ab9fa68bd47973a73b2d40480c2ba50c22c9d76ec217257288293285449b8604aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad587d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #195: pseudorandom signature
#[tokio::test]
async fn p256verify_wycheproof_185_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("de47c9b27eb8d300dbb5f2c353e632c393262cf06340c4fa7f1b40c4cbd36f90986e65933ef2ed4ee5aada139f52b70539aaf63f00a91f29c69178490d57fb713dafedfb8da6189d372308cbf1489bbbdabf0c0217d1c0ff0f701aaa7a694b9c04aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad587d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #196: x-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_186_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91d434e262a49eab7781e353a3565e482550dd0fd5defa013c7f29745eff3569f19b0c0a93f267fb6052fd8077be769c2b98953195d7bc10de844218305c6ba17a4f337ccfd67726a805e4f1600ae2849df3807eca117380239fbd816900000000ed9dea124cc8c396416411e988c30f427eb504af43a3146cd5df7ea60666d685").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #197: x-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_187_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f910fe774355c04d060f76d79fd7a772e421463489221bf0a33add0be9b1979110b500dcba1c69a8fbd43fa4f57f743ce124ca8b91a1f325f3fac6181175df557374f337ccfd67726a805e4f1600ae2849df3807eca117380239fbd816900000000ed9dea124cc8c396416411e988c30f427eb504af43a3146cd5df7ea60666d685").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #198: x-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_188_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91bb40bf217bed3fb3950c7d39f03d36dc8e3b2cd79693f125bfd06595ee1135e3541bf3532351ebb032710bdb6a1bf1bfc89a1e291ac692b3fa4780745bb556774f337ccfd67726a805e4f1600ae2849df3807eca117380239fbd816900000000ed9dea124cc8c396416411e988c30f427eb504af43a3146cd5df7ea60666d685").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #199: y-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_189_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91664eb7ee6db84a34df3c86ea31389a5405badd5ca99231ff556d3e75a233e73a59f3c752e52eca46137642490a51560ce0badc678754b8f72e51a2901426a1bd3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f49726500493584fa174d791c72bf2ce3880a8960dd2a7c7a1338a82f85a9e59cdbde80000000").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #200: y-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_190_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f914cd0429bbabd2827009d6fcd843d4ce39c3e42e2d1631fd001985a79d1fd8b439638bf12dd682f60be7ef1d0e0d98f08b7bca77a1a2b869ae466189d2acdabe33cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f49726500493584fa174d791c72bf2ce3880a8960dd2a7c7a1338a82f85a9e59cdbde80000000").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #201: y-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_191_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91e56c6ea2d1b017091c44d8b6cb62b9f460e3ce9aed5e5fd41e8added97c56c04a308ec31f281e955be20b457e463440b4fcf2b80258078207fc1378180f89b553cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f49726500493584fa174d791c72bf2ce3880a8960dd2a7c7a1338a82f85a9e59cdbde80000000").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #202: y-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_192_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f911158a08d291500b4cabed3346d891eee57c176356a2624fb011f8fbbf3466830228a8c486a736006e082325b85290c5bc91f378b75d487dda46798c18f2855193cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f4972650049357b05e8b186e38d41d31c77f5769f22d58385ecc857d07a561a6324217fffffff").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #203: y-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_193_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91b1db9289649f59410ea36b0c0fc8d6aa2687b29176939dd23e0dde56d309fa9d3e1535e4280559015b0dbd987366dcf43a6d1af5c23c7d584e1c3f48a12513363cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f4972650049357b05e8b186e38d41d31c77f5769f22d58385ecc857d07a561a6324217fffffff").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #204: y-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_194_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91b7b16e762286cb96446aa8d4e6e7578b0a341a79f2dd1a220ac6f0ca4e24ed86ddc60a700a139b04661c547d07bbb0721780146df799ccf55e55234ecb8f12bc3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f4972650049357b05e8b186e38d41d31c77f5769f22d58385ecc857d07a561a6324217fffffff").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #205: x-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_195_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91d82a7c2717261187c8e00d8df963ff35d796edad36bc6e6bd1c91c670d9105b43dcabddaf8fcaa61f4603e7cbac0f3c0351ecd5988efb23f680d07debd1399292829c31faa2e400e344ed94bca3fcd0545956ebcfe8ad0f6dfa5ff8effffffffa01aafaf000e52585855afa7676ade284113099052df57e7eb3bd37ebeb9222e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #206: x-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_196_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f915eb9c8845de68eb13d5befe719f462d77787802baff30ce96a5cba063254af782c026ae9be2e2a5e7ca0ff9bbd92fb6e44972186228ee9a62b87ddbe2ef66fb52829c31faa2e400e344ed94bca3fcd0545956ebcfe8ad0f6dfa5ff8effffffffa01aafaf000e52585855afa7676ade284113099052df57e7eb3bd37ebeb9222e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #207: x-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_197_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f9196843dd03c22abd2f3b782b170239f90f277921becc117d0404a8e4e36230c28f2be378f526f74a543f67165976de9ed9a31214eb4d7e6db19e1ede123dd991d2829c31faa2e400e344ed94bca3fcd0545956ebcfe8ad0f6dfa5ff8effffffffa01aafaf000e52585855afa7676ade284113099052df57e7eb3bd37ebeb9222e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #208: x-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_198_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91766456dce1857c906f9996af729339464d27e9d98edc2d0e3b760297067421f6402385ecadae0d8081dccaf5d19037ec4e55376eced699e93646bfbbf19d0b41fffffff948081e6a0458dd8f9e738f2665ff9059ad6aac0708318c4ca9a7a4f55a8abcba2dda8474311ee54149b973cae0c0fb89557ad0bf78e6529a1663bd73").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #209: x-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_199_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91c605c4b2edeab20419e6518a11b2dbc2b97ed8b07cced0b19c34f777de7b9fd9edf0f612c5f46e03c719647bc8af1b29b2cde2eda700fb1cff5e159d47326dbafffffff948081e6a0458dd8f9e738f2665ff9059ad6aac0708318c4ca9a7a4f55a8abcba2dda8474311ee54149b973cae0c0fb89557ad0bf78e6529a1663bd73").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #210: x-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_200_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91d48b68e6cabfe03cf6141c9ac54141f210e64485d9929ad7b732bfe3b7eb8a84feedae50c61bd00e19dc26f9b7e2265e4508c389109ad2f208f0772315b6c941fffffff948081e6a0458dd8f9e738f2665ff9059ad6aac0708318c4ca9a7a4f55a8abcba2dda8474311ee54149b973cae0c0fb89557ad0bf78e6529a1663bd73").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #211: x-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_201_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91b7c81457d4aeb6aa65957098569f0479710ad7f6595d5874c35a93d12a5dd4c7b7961a0b652878c2d568069a432ca18a1a9199f2ca574dad4b9e3a05c0a1cdb300000003fa15f963949d5f03a6f5c7f86f9e0015eeb23aebbff1173937ba748e1099872070e8e87c555fa13659cca5d7fadcfcb0023ea889548ca48af2ba7e71").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #212: x-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_202_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f916b01332ddb6edfa9a30a1321d5858e1ee3cf97e263e669f8de5e9652e76ff3f75939545fced457309a6a04ace2bd0f70139c8f7d86b02cb1cc58f9e69e96cd5a00000003fa15f963949d5f03a6f5c7f86f9e0015eeb23aebbff1173937ba748e1099872070e8e87c555fa13659cca5d7fadcfcb0023ea889548ca48af2ba7e71").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #213: x-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_203_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91efdb884720eaeadc349f9fc356b6c0344101cd2fd8436b7d0e6a4fb93f106361f24bee6ad5dc05f7613975473aadf3aacba9e77de7d69b6ce48cb60d8113385d00000003fa15f963949d5f03a6f5c7f86f9e0015eeb23aebbff1173937ba748e1099872070e8e87c555fa13659cca5d7fadcfcb0023ea889548ca48af2ba7e71").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #214: y-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_204_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f9131230428405560dcb88fb5a646836aea9b23a23dd973dcbe8014c87b8b20eb070f9344d6e812ce166646747694a41b0aaf97374e19f3c5fb8bd7ae3d9bd0beffbcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015000000001352bb4a0fa2ea4cceb9ab63dd684ade5a1127bcf300a698a7193bc2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #215: y-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_205_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91caa797da65b320ab0d5c470cda0b36b294359c7db9841d679174db34c4855743cf543a62f23e212745391aaf7505f345123d2685ee3b941d3de6d9b36242e5a0bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015000000001352bb4a0fa2ea4cceb9ab63dd684ade5a1127bcf300a698a7193bc2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #216: y-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_206_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f917e5f0ab5d900d3d3d7867657e5d6d36519bc54084536e7d21c336ed8001859459450c07f201faec94b82dfb322e5ac676688294aad35aa72e727ff0b19b646aabcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015000000001352bb4a0fa2ea4cceb9ab63dd684ade5a1127bcf300a698a7193bc2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #217: y-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_207_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91d7d70c581ae9e3f66dc6a480bf037ae23f8a1e4a2136fe4b03aa69f0ca25b35689c460f8a5a5c2bbba962c8a3ee833a413e85658e62a59e2af41d9127cc47224bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015fffffffeecad44b6f05d15b33146549c2297b522a5eed8430cff596758e6c43d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #218: y-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_208_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91341c1b9ff3c83dd5e0dfa0bf68bcdf4bb7aa20c625975e5eeee34bb396266b3472b69f061b750fd5121b22b11366fad549c634e77765a017902a67099e0a4469bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015fffffffeecad44b6f05d15b33146549c2297b522a5eed8430cff596758e6c43d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_p1363_test.json EcdsaP1363Verify SHA-256 #219: y-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_209_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f9170bebe684cdcb5ca72a42f0d873879359bd1781a591809947628d313a3814f67aec03aca8f5587a4d535fa31027bbe9cc0e464b1c3577f4c2dcde6b2094798a9bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015fffffffeecad44b6f05d15b33146549c2297b522a5eed8430cff596758e6c43d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #1: signature malleability
#[tokio::test]
async fn p256verify_wycheproof_210_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050232ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e184cd60b855d442f5b3c7b11eb6c4e0ae7525fe710fab9aa7c77a67f79e6fadd762927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #2: Legacy:ASN encoding of s misses leading 0
#[tokio::test]
async fn p256verify_wycheproof_211_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050232ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #3: valid
#[tokio::test]
async fn p256verify_wycheproof_212_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050232ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #118: modify first byte of integer
#[tokio::test]
async fn p256verify_wycheproof_213_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca60502329a3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #120: modify last byte of integer
#[tokio::test]
async fn p256verify_wycheproof_214_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050232ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e98b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #121: modify last byte of integer
#[tokio::test]
async fn p256verify_wycheproof_215_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050232ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b491568475b2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #124: truncated integer
#[tokio::test]
async fn p256verify_wycheproof_216_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050232ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e1800b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b491568472927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #133: Modified r or s, e.g. by adding or subtracting the order of the group
#[tokio::test]
async fn p256verify_wycheproof_217_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023d45c5741946b2a137f59262ee6f5bc91001af27a5e1117a64733950642a3d1e8b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #134: Modified r or s, e.g. by adding or subtracting the order of the group
#[tokio::test]
async fn p256verify_wycheproof_218_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023d45c5740946b2a147f59262ee6f5bc90bd01ed280528b62b3aed5fc93f06f739b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #137: Modified r or s, e.g. by adding or subtracting the order of the group
#[tokio::test]
async fn p256verify_wycheproof_219_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023d45c5741946b2a137f59262ee6f5bc91001af27a5e1117a64733950642a3d1e8b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #139: Modified r or s, e.g. by adding or subtracting the order of the group
#[tokio::test]
async fn p256verify_wycheproof_220_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050232ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18b329f47aa2bbd0a4c384ee1493b1f518ada018ef05465583885980861905228a2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #143: Modified r or s, e.g. by adding or subtracting the order of the group
#[tokio::test]
async fn p256verify_wycheproof_221_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050232ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e184cd60b865d442f5a3c7b11eb6c4e0ae79578ec6353a20bf783ecb4b6ea97b8252927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #177: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_222_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #178: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_223_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #179: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_224_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #180: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_225_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551ffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #181: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_226_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551ffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #187: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_227_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #188: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_228_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #189: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_229_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #190: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_230_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550ffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #191: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_231_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550ffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #197: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_232_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #198: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_233_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #199: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_234_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #200: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_235_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552ffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #201: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_236_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552ffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #207: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_237_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffffffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #208: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_238_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffffffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #209: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_239_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffffffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #210: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_240_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffffffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #211: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_241_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffffffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #217: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_242_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000001000000000000000000000000ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #218: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_243_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000001000000000000000000000000ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #219: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_244_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000001000000000000000000000000ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #220: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_245_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000001000000000000000000000000ffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #221: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_246_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000001000000000000000000000000ffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #230: Edge case for Shamir multiplication
#[tokio::test]
async fn p256verify_wycheproof_247_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("70239dd877f7c944c422f44dea4ed1a52f2627416faf2f072fa50c772ed6f80764a1aab5000d0e804f3e2fc02bdee9be8ff312334e2ba16d11547c97711c898e6af015971cc30be6d1a206d4e013e0997772a2f91d73286ffd683b9bb2cf4f1b2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #231: special case hash
#[tokio::test]
async fn p256verify_wycheproof_248_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("00000000690ed426ccf17803ebe2bd0884bcd58a1bb5e7477ead3645f356e7a916aea964a2f6506d6f78c81c91fc7e8bded7d397738448de1e19a0ec580bf266252cd762130c6667cfe8b7bc47d27d78391e8e80c578d1cd38c3ff033be928e92927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #232: special case hash
#[tokio::test]
async fn p256verify_wycheproof_249_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7300000000213f2a525c6035725235c2f696ad3ebb5ee47f140697ad25770d919cc98be2347d469bf476dfc26b9b733df2d26d6ef524af917c665baccb23c882093496459effe2d8d70727b82462f61d0ec1b7847929d10ea631dacb16b56c322927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #233: special case hash
#[tokio::test]
async fn p256verify_wycheproof_250_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ddf2000000005e0be0635b245f0b97978afd25daadeb3edb4a0161c27fe0604573b3c90ecd390028058164524dde892703dce3dea0d53fa8093999f07ab8aa432f67b0b8e20636695bb7d8bf0a651c802ed25a395387b5f4188c0c4075c886342927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #234: special case hash
#[tokio::test]
async fn p256verify_wycheproof_251_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("67ab1900000000784769c4ecb9e164d6642b8499588b89855be1ec355d0841a0bfab3098252847b328fadf2f89b95c851a7f0eb390763378f37e90119d5ba3ddbdd64e234e832b1067c2d058ccb44d978195ccebb65c2aaf1e2da9b8b4987e3b2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #235: special case hash
#[tokio::test]
async fn p256verify_wycheproof_252_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a2bf09460000000076d7dbeffe125eaf02095dff252ee905e296b6350fc311cf204a9784074b246d8bf8bf04a4ceb1c1f1c9aaab168b1596d17093c5cd21d2cd51cce41670636783dc06a759c8847868a406c2506fe17975582fe648d1d88b522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #236: special case hash
#[tokio::test]
async fn p256verify_wycheproof_253_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3554e827c700000000e1e75e624a06b3a0a353171160858129e15c544e4f0e65ed66dc34f551ac82f63d4aa4f81fe2cb0031a91d1314f835027bca0f1ceeaa0399ca123aa09b13cd194a422e18d5fda167623c3f6e5d4d6abb8953d67c0c48c72927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #237: special case hash
#[tokio::test]
async fn p256verify_wycheproof_254_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9b6cd3b812610000000026941a0f0bb53255ea4c9fd0cb3426e3a54b9fc6965c060b700bef665c68899d44f2356a578d126b062023ccc3c056bf0f60a237012b8d186c027832965f4fcc78a3366ca95dedbb410cbef3f26d6be5d581c11d36102927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #238: special case hash
#[tokio::test]
async fn p256verify_wycheproof_255_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("883ae39f50bf0100000000e7561c26fc82a52baa51c71ca877162f93c4ae01869f6adfe8d5eb5b2c24d7aa7934b6cf29c93ea76cd313c9132bb0c8e38c96831db26a9c9e40e55ee0890c944cf271756c906a33e66b5bd15e051593883b5e99022927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #239: special case hash
#[tokio::test]
async fn p256verify_wycheproof_256_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a1ce5d6e5ecaf28b0000000000fa7cd010540f420fb4ff7401fe9fce011d0ba6a1af03ca91677b673ad2f33615e56174a1abf6da168cebfa8868f4ba273f16b720aa73ffe48afa6435cd258b173d0c2377d69022e7d098d75caf24c8c5e06b1c2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #240: special case hash
#[tokio::test]
async fn p256verify_wycheproof_257_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8ea5f645f373f580930000000038345397330012a8ee836c5494cdffd5ee8054fdc70602766f8eed11a6c99a71c973d5659355507b843da6e327a28c11893db93df5349688a085b137b1eacf456a9e9e0f6d15ec0078ca60a7f83f2b10d213502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #241: special case hash
#[tokio::test]
async fn p256verify_wycheproof_258_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("660570d323e9f75fa734000000008792d65ce93eabb7d60d8d9c1bbdcb5ef305b516a314f2fce530d6537f6a6c49966c23456f63c643cf8e0dc738f7b876e675d39ffd033c92b6d717dd536fbc5efdf1967c4bd80954479ba66b0120cd16fff22927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #242: special case hash
#[tokio::test]
async fn p256verify_wycheproof_259_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d0462673154cce587dde8800000000e98d35f1f45cf9c3bf46ada2de4c568c343b2cbf046eac45842ecb7984d475831582717bebb6492fd0a485c101e29ff0a84c9b7b47a98b0f82de512bc9313aaf51701099cac5f76e68c8595fc1c1d992582927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #243: special case hash
#[tokio::test]
async fn p256verify_wycheproof_260_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bd90640269a7822680cedfef000000000caef15a6171059ab83e7b4418d7278f30c87d35e636f540841f14af54e2f9edd79d0312cfa1ab656c3fb15bfde48dcf47c15a5a82d24b75c85a692bd6ecafeb71409ede23efd08e0db9abf6340677ed2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #244: special case hash
#[tokio::test]
async fn p256verify_wycheproof_261_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("33239a52d72f1311512e41222a00000000d2dcceb301c54b4beae8e284788a7338686ff0fda2cef6bc43b58cfe6647b9e2e8176d168dec3c68ff262113760f52067ec3b651f422669601662167fa8717e976e2db5e6a4cf7c2ddabb3fde9d67d2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #245: special case hash
#[tokio::test]
async fn p256verify_wycheproof_262_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b8d64fbcd4a1c10f1365d4e6d95c000000007ee4a21a1cbe1dc84c2d941ffaf144a3e23bf314f2b344fc25c7f2de8b6af3e17d27f5ee844b225985ab6e2775cf2d48e223205e98041ddc87be532abed584f0411f5729500493c9cc3f4dd15e862927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #246: special case hash
#[tokio::test]
async fn p256verify_wycheproof_263_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("01603d3982bf77d7a3fef3183ed092000000003a227420db4088b20fe0e9d84a2ded5b7ec8e90e7bf11f967a3d95110c41b99db3b5aa8d330eb9d638781688e97d5792c53628155e1bfc46fb1a67e3088de049c328ae1f44ec69238a009808f92927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #247: special case hash
#[tokio::test]
async fn p256verify_wycheproof_264_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9ea6994f1e0384c8599aa02e6cf66d9c000000004d89ef50b7e9eb0cfbff7363bdae7bcb580bf335efd3bc3d31870f923eaccafcd40ec2f605976f15137d8b8ff6dfa12f19e525270b0106eecfe257499f373a4fb318994f24838122ce7ec3c72927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #248: special case hash
#[tokio::test]
async fn p256verify_wycheproof_265_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d03215a8401bcf16693979371a01068a4700000000e2fa5bf692bc670905b18c50f9c4f0cd6940e162720957ffff513799209b78596956d21ece251c2401f1c6d7033a0a787d338e889defaaabb106b95a4355e411a59c32aa5167dfab2447262927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #249: special case hash
#[tokio::test]
async fn p256verify_wycheproof_266_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("307bfaaffb650c889c84bf83f0300e5dc87e000000008408fd5f64b582e3bb14f612820687604fa01906066a378d67540982e29575d019aabe90924ead5c860d3f9367702dd7dd4f75ea98afd20e328a1a99f4857b316525328230ce294b0fef2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #250: special case hash
#[tokio::test]
async fn p256verify_wycheproof_267_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bab5c4f4df540d7b33324d36bb0c157551527c00000000e4af574bb4d54ea6b89505e407657d6e8bc93db5da7aa6f5081f61980c1949f56b0f2f507da5782a7ac60d31904e3669738ffbeccab6c3656c08e0ed5cb92b3cfa5e7f71784f9c50212927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #251: special case hash
#[tokio::test]
async fn p256verify_wycheproof_268_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d4ba47f6ae28f274e4f58d8036f9c36ec2456f5b00000000c3b869197ef5e15ebbd16fbbb656b6d0d83e6a7787cd691b08735aed371732723e1c68a40404517d9d8e35dba96028b7787d91315be675877d2d097be5e8ee34560e3e7fd25c0f002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #252: special case hash
#[tokio::test]
async fn p256verify_wycheproof_269_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("79fd19c7235ea212f29f1fa00984342afe0f10aafd00000000801e47f8c184e12ec9760122db98fd06ea76848d35a6da442d2ceef7559a30cf57c61e92df327e7ab271da90859479701fccf86e462ee3393fb6814c27b760c4963625c0a198782927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #253: special case hash
#[tokio::test]
async fn p256verify_wycheproof_270_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8c291e8eeaa45adbaf9aba5c0583462d79cbeb7ac97300000000a37ea6700cda54e76b7683b6650baa6a7fc49b1c51eed9ba9dd463221f7a4f1005a89fe00c592ea076886c773eb937ec1cc8374b7915cfd11b1c1ae1166152f2f7806a31c8fd2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #254: special case hash
#[tokio::test]
async fn p256verify_wycheproof_271_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0eaae8641084fa979803efbfb8140732f4cdcf66c3f78a000000003c278a6b215291deaf24659ffbbce6e3c26f6021097a74abdbb69be4fb10419c0c496c946665d6fcf336d27cc7cdb982bb4e4ecef5827f84742f29f10abf83469270a03dc32927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #255: special case hash
#[tokio::test]
async fn p256verify_wycheproof_272_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e02716d01fb23a5a0068399bf01bab42ef17c6d96e13846c00000000afc0f89d207a3241812d75d947419dc58efb05e8003b33fc17eb50f9d15166a88479f107cdee749f2e492b213ce80b32d0574f62f1c5d70793cf55e382d5caadf75927672927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #256: special case hash
#[tokio::test]
async fn p256verify_wycheproof_273_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9eb0bf583a1a6b9a194e9a16bc7dab2a9061768af89d00659a00000000fc7de16554e49f82a855204328ac94913bf01bbe84437a355a0a37c0dee3cf81aa7728aea00de2507ddaf5c94e1e126980d3df16250a2eaebc8be486effe7f22b4f9292927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #257: special case hash
#[tokio::test]
async fn p256verify_wycheproof_274_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("62aac98818b3b84a2c214f0d5e72ef286e1030cb53d9a82b690e00000000cd15a54c5062648339d2bff06f71c88216c26c6e19b4d80a8c602990ac82707efdfce99bbe7fcfafae3e69fd016777517aa01056317f467ad09aff09be73c9731b0d2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #258: special case hash
#[tokio::test]
async fn p256verify_wycheproof_275_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3760a7f37cf96218f29ae43732e513efd2b6f552ea4b6895464b9300000000c8975bd7157a8d363b309f1f444012b1a1d23096593133e71b4ca8b059cff37eaf7faa7a28b1c822baa241793f2abc930bd4c69840fe090f2aacc46786bf9196222927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #259: special case hash
#[tokio::test]
async fn p256verify_wycheproof_276_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0da0a1d2851d33023834f2098c0880096b4320bea836cd9cbb6ff6c8000000005694a6f84b8f875c276afd2ebcfe4d61de9ec90305afb1357b95b3e0da43885e0dffad9ffd0b757d8051dec02ebdf70d8ee2dc5c7870c0823b6ccc7c679cbaa42927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #260: special case hash
#[tokio::test]
async fn p256verify_wycheproof_277_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ffffffff293886d3086fd567aafd598f0fe975f735887194a764a231e82d289aa0c30e8026fdb2b4b4968a27d16a6d08f7098f1a98d21620d7454ba9790f1ba65e470453a8a399f15baf463f9deceb53acc5ca64459149688bd2760c654243392927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #261: special case hash
#[tokio::test]
async fn p256verify_wycheproof_278_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7bffffffff2376d1e3c03445a072e24326acdc4ce127ec2e0e8d9ca99527e7b7614ea84acf736527dd73602cd4bb4eea1dfebebd5ad8aca52aa0228cf7b99a88737cc85f5f2d2f60d1b8183f3ed490e4de14368e96a9482c2a4dd193195c902f2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #262: special case hash
#[tokio::test]
async fn p256verify_wycheproof_279_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a2b5ffffffffebb251b085377605a224bc80872602a6e467fd016807e97fa395bead6734ebe44b810d3fb2ea00b1732945377338febfd439a8d74dfbd0f942fa6bb18eae36616a7d3cad35919fd21a8af4bbe7a10f73b3e036a46b103ef56e2a2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #263: special case hash
#[tokio::test]
async fn p256verify_wycheproof_280_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("641227ffffffff6f1b96fa5f097fcf3cc1a3c256870d45a67b83d0967d4b20c0499625479e161dacd4db9d9ce64854c98d922cbf212703e9654fae182df9bad242c177cf37b8193a0131108d97819edd9439936028864ac195b64fca76d9d6932927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #264: special case hash
#[tokio::test]
async fn p256verify_wycheproof_281_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("958415d8ffffffffabad03e2fc662dc3ba203521177502298df56f36600e0f8b08f16b8093a8fb4d66a2c8065b541b3d31e3bfe694f6b89c50fb1aaa6ff6c9b29d6455e2d5d1779748573b611cb95d4a21f967410399b39b535ba3e5af81ca2e2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #265: special case hash
#[tokio::test]
async fn p256verify_wycheproof_282_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f1d8de4858ffffffff1281093536f47fe13deb04e1fbe8fb954521b6975420f8be26231b6191658a19dd72ddb99ed8f8c579b6938d19bce8eed8dc2b338cb5f8e1d9a32ee56cffed37f0f22b2dcb57d5c943c14f79694a03b9c5e96952575c892927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #266: special case hash
#[tokio::test]
async fn p256verify_wycheproof_283_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0927895f2802ffffffff10782dd14a3b32dc5d47c05ef6f1876b95c81fc31def15e76880898316b16204ac920a02d58045f36a229d4aa4f812638c455abe0443e74d357d3fcb5c8c5337bd6aba4178b455ca10e226e13f9638196506a19391232927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #267: special case hash
#[tokio::test]
async fn p256verify_wycheproof_284_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("60907984aa7e8effffffff4f332862a10a57c3063fb5a30624cf6a0c3ac80589352ecb53f8df2c503a45f9846fc28d1d31e6307d3ddbffc1132315cc07f16dad1348dfa9c482c558e1d05c5242ca1c39436726ecd28258b1899792887dd0a3c62927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #268: special case hash
#[tokio::test]
async fn p256verify_wycheproof_285_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c6ff198484939170ffffffff0af42cda50f9a5f50636ea6942d6b9b8cd6ae1e24a40801a7e606ba78a0da9882ab23c7677b8642349ed3d652c5bfa5f2a9558fb3a49b64848d682ef7f605f2832f7384bdc24ed2925825bf8ea77dc59817257822927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #269: special case hash
#[tokio::test]
async fn p256verify_wycheproof_286_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("de030419345ca15c75ffffffff8074799b9e0956cc43135d16dfbe4d27d7e68deacc5e1a8304a74d2be412b078924b3bb3511bac855c05c9e5e9e44df3d61e967451cd8e18d6ed1885dd827714847f96ec4bb0ed4c36ce9808db8f714204f6d12927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #270: special case hash
#[tokio::test]
async fn p256verify_wycheproof_287_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6f0e3eeaf42b28132b88fffffffff6c8665604d34acb19037e1ab78caaaac6ff2f7a5e9e5771d424f30f67fdab61e8ce4f8cd1214882adb65f7de94c31577052ac4e69808345809b44acb0b2bd889175fb75dd050c5a449ab9528f8f78daa10c2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #271: special case hash
#[tokio::test]
async fn p256verify_wycheproof_288_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("cdb549f773b3e62b3708d1ffffffffbe48f7c0591ddcae7d2cb222d1f8017ab9ffcda40f792ce4d93e7e0f0e95e1a2147dddd7f6487621c30a03d710b330021979938b55f8a17f7ed7ba9ade8f2065a1fa77618f0b67add8d58c422c2453a49a2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #272: special case hash
#[tokio::test]
async fn p256verify_wycheproof_289_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2c3f26f96a3ac0051df4989bffffffff9fd64886c1dc4f9924d8fd6f0edb048481f2359c4faba6b53d3e8c8c3fcc16a948350f7ab3a588b28c17603a431e39a8cd6f6a5cc3b55ead0ff695d06c6860b509e46d99fccefb9f7f9e101857f743002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #273: special case hash
#[tokio::test]
async fn p256verify_wycheproof_290_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ac18f8418c55a2502cb7d53f9affffffff5c31d89fda6a6b8476397c04edf411dfc8bf520445cbb8ee1596fb073ea283ea130251a6fdffa5c3f5f2aaf75ca808048e33efce147c9dd92823640e338e68bfd7d0dc7a4905b3a7ac711e577e90e72927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #274: special case hash
#[tokio::test]
async fn p256verify_wycheproof_291_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4f9618f98e2d3a15b24094f72bb5ffffffffa2fd3e2893683e5a6ab8cf0ee610ad019f74c6941d20efda70b46c53db166503a0e393e932f688227688ba6a576293320eb7ca0710255346bdbb3102cdcf7964ef2e0988e712bc05efe16c1993452927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #275: special case hash
#[tokio::test]
async fn p256verify_wycheproof_292_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("422e82a3d56ed10a9cc21d31d37a25ffffffff67edf7c40204caae73ab0bc75aac8096842e8add68c34e78ce11dd71e4b54316bd3ebf7fffdeb7bd5a3ebc1883f5ca2f4f23d674502d4caf85d187215d36e3ce9f0ce219709f21a3aac003b7a82927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #276: special case hash
#[tokio::test]
async fn p256verify_wycheproof_293_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7075d245ccc3281b6e7b329ff738fbb417a5ffffffffa0842d9890b5cf95d018677b2d3a59b18a5ff939b70ea002250889ddcd7b7b9d776854b4943693fb92f76b4ba856ade7677bf30307b21f3ccda35d2f63aee81efd0bab6972cc0795db552927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #277: special case hash
#[tokio::test]
async fn p256verify_wycheproof_294_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3c80de54cd9226989443d593fa4fd6597e280ebeffffffffc1847eb76c217a95479e1ded14bcaed0379ba8e1b73d3115d84d31d4b7c30e1f05e1fc0d5957cfb0918f79e35b3d89487cf634a4f05b2e0c30857ca879f97c771e877027355b24432927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #278: special case hash
#[tokio::test]
async fn p256verify_wycheproof_295_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("de21754e29b85601980bef3d697ea2770ce891a8cdffffffffc7906aa794b39b43dfccd0edb9e280d9a58f01164d55c3d711e14b12ac5cf3b64840ead512a0a31dbe33fa8ba84533cd5c4934365b3442ca1174899b78ef9a3199f495843897722927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #279: special case hash
#[tokio::test]
async fn p256verify_wycheproof_296_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8f65d92927cfb86a84dd59623fb531bb599e4d5f7289ffffffff2f1f2f57881c5b09ab637bd4caf0f4c7c7e4bca592fea20e9087c259d26a38bb4085f0bbff1145b7eb467b6748af618e9d80d6fdcd6aa24964e5a13f885bca8101de08eb0d752927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #280: special case hash
#[tokio::test]
async fn p256verify_wycheproof_297_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6b63e9a74e092120160bea3877dace8a2cc7cd0e8426cbfffffffffafc8c3ca85e9b1c5a028070df5728c5c8af9b74e0667afa570a6cfa0114a5039ed15ee06fb1360907e2d9785ead362bb8d7bd661b6c29eeffd3c5037744edaeb9ad990c202927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #281: special case hash
#[tokio::test]
async fn p256verify_wycheproof_298_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fc28259702a03845b6d75219444e8b43d094586e249c8699ffffffffe852512e0671a0a85c2b72d54a2fb0990e34538b4890050f5a5712f6d1a7a5fb8578f32edb1846bab6b7361479ab9c3285ca41291808f27fd5bd4fdac720e5854713694c2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #282: special case hash
#[tokio::test]
async fn p256verify_wycheproof_299_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1273b4502ea4e3bccee044ee8e8db7f774ecbcd52e8ceb571757ffffffffe20a7673f8526748446477dbbb0590a45492c5d7d69859d301abbaedb35b2095103a3dc70ddf9c6b524d886bed9e6af02e0e4dec0d417a414fed3807ef4422913d7c2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #283: special case hash
#[tokio::test]
async fn p256verify_wycheproof_300_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("08fb565610a79baa0c566c66228d81814f8c53a15b96e602fb49ffffffffff6e7f085441070ecd2bb21285089ebb1aa6450d1a06c36d3ff39dfd657a796d12b5249712012029870a2459d18d47da9aa492a5e6cb4b2d8dafa9e4c5c54a2b9a8b2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #284: special case hash
#[tokio::test]
async fn p256verify_wycheproof_301_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d59291cc2cf89f3087715fcb1aa4e79aa2403f748e97d7cd28ecaefeffffffff914c67fb61dd1e27c867398ea7322d5ab76df04bc5aa6683a8e0f30a5d287348fa07474031481dda4953e3ac1959ee8cea7e66ec412b38d6c96d28f6d37304ea2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #286: r too large
#[tokio::test]
async fn p256verify_wycheproof_302_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000fffffffffffffffffffffffcffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e0ad99500288d466940031d72a9f5445a4d43784640855bf0a69874d2de5fe103c5011e6ef2c42dcd50d5d3d29f99ae6eba2c80c9244f4c5422f0979ff0c3ba5e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #287: r,s are large
#[tokio::test]
async fn p256verify_wycheproof_303_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254eab05fd9d0de26b9ce6f4819652d9fc69193d0aa398f0fba8013e09c58220455419235271228c786759095d12b75af0692dd4103f19f6a8c32f49435a1e9b8d45").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #288: r and s^-1 have a large Hamming weight
#[tokio::test]
async fn p256verify_wycheproof_304_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd909135bdb6799286170f5ead2de4f6511453fe50914f3df2de54a36383df8dd480984f39a1ff38a86a68aa4201b6be5dfbfecf876219710b07badf6fdd4c6c5611feb97390d9826e7a06dfb41871c940d74415ed3cac2089f1445019bb55ed95").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #289: r and s^-1 have a large Hamming weight
#[tokio::test]
async fn p256verify_wycheproof_305_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd27b4577ca009376f71303fd5dd227dcef5deb773ad5f5a84360644669ca249a54201b4272944201c3294f5baa9a3232b6dd687495fcc19a70a95bc602b4f7c0595c37eba9ee8171c1bb5ac6feaf753bc36f463e3aef16629572c0c0a8fb0800e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #301: r and s^-1 are close to n
#[tokio::test]
async fn p256verify_wycheproof_306_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6324d5555555550000000055555555555555553ef7a8e48d07df81a693439654210c70083539fbee44625e3acaafa2fcb41349392cef0633a1b8fabecee0c133b10e99915c1ebe7bf00df8535196770a58047ae2a402f26326bb7d41d4d7616337911e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #304: point at infinity during verify
#[tokio::test]
async fn p256verify_wycheproof_307_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8555555550000000055555555555555553ef7a8e48d07df81a693439654210c70b533d4695dd5b8c5e07757e55e6e516f7e2c88fa0239e23f60e8ec07dd70f2871b134ee58cc583278456863f33c3a85d881f7d4a39850143e29d4eaf009afe47").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #305: edge case for signature malleability
#[tokio::test]
async fn p256verify_wycheproof_308_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a97fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8f50d371b91bfb1d7d14e1323523bc3aa8cbf2c57f9e284de628c8b4536787b86f94ad887ac94d527247cd2e7d0c8b1291c553c9730405380b14cbb209f5fa2dd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #306: edge case for signature malleability
#[tokio::test]
async fn p256verify_wycheproof_309_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a97fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a968ec6e298eafe16539156ce57a14b04a7047c221bafc3a582eaeb0d857c4d94697bed1af17850117fdb39b2324f220a5698ed16c426a27335bb385ac8ca6fb30").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #307: u1 == 1
#[tokio::test]
async fn p256verify_wycheproof_310_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023555555550000000055555555555555553ef7a8e48d07df81a693439654210c70bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca60502369da0364734d2e530fece94019265fefb781a0f1b08f6c8897bdf6557927c8b866d2d3c7dcd518b23d726960f069ad71a933d86ef8abbcce8b20f71e2a847002").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #308: u1 == n - 1
#[tokio::test]
async fn p256verify_wycheproof_311_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023555555550000000055555555555555553ef7a8e48d07df81a693439654210c7044a5ad0ad0636d9f12bc9e0a6bdd5e1cbcb012ea7bf091fcec15b0c43202d52ed8adc00023a8edc02576e2b63e3e30621a471e2b2320620187bf067a1ac1ff3233e2b50ec09807accb36131fff95ed12a09a86b4ea9690aa32861576ba2362e1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #309: u2 == 1
#[tokio::test]
async fn p256verify_wycheproof_312_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023555555550000000055555555555555553ef7a8e48d07df81a693439654210c70555555550000000055555555555555553ef7a8e48d07df81a693439654210c703623ac973ced0a56fa6d882f03a7d5c7edca02cfc7b2401fab3690dbe75ab7858db06908e64b28613da7257e737f39793da8e713ba0643b92e9bb3252be7f8fe").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #310: u2 == n - 1
#[tokio::test]
async fn p256verify_wycheproof_313_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023555555550000000055555555555555553ef7a8e48d07df81a693439654210c70aaaaaaaa00000000aaaaaaaaaaaaaaaa7def51c91a0fbf034d26872ca84218e1cf04ea77e9622523d894b93ff52dc3027b31959503b6fa3890e5e04263f922f1e8528fb7c006b3983c8b8400e57b4ed71740c2f3975438821199bedeaecab2e9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #311: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_314_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffde91e1ba60fdedb76a46bcb51dc0b8b4b7e019f0a28721885fa5d3a8196623397db7a2c8a1ab573e5929dc24077b508d7e683d49227996bda3e9f78dbeff773504f417f3bc9a88075c2e0aadd5a13311730cf7cc76a82f11a36eaf08a6c99a206").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #312: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_315_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdfdea5843ffeb73af94313ba4831b53fe24f799e525b1e8e8c87b59b95b430ad9dead11c7a5b396862f21974dc4752fadeff994efe9bbd05ab413765ea80b6e1f1de3f0640e8ac6edcf89cff53c40e265bb94078a343736df07aa0318fc7fe1ff").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #313: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_316_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd03ffcabf2f1b4d2a65190db1680d62bb994e41c5251cd73b3c3dfc5e5bafc035d0bc472e0d7c81ebaed3a6ef96c18613bb1fea6f994326fbe80e00dfde67c7e9986c723ea4843d48389b946f64ad56c83ad70ff17ba85335667d1bb9fa619efd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #314: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_317_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd4dfbc401f971cd304b33dfdb17d0fed0fe4c1a88ae648e0d2847f74977534989a0a44ca947d66a2acb736008b9c08d1ab2ad03776e02640f78495d458dd51c326337fe5cf8c4604b1f1c409dc2d872d4294a4762420df43a30a2392e40426add").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #315: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_318_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdbc4024761cd2ffd43dfdb17d0fed112b988977055cd3a8e54971eba9cda5ca71c9c2115290d008b45fb65fad0f602389298c25420b775019d42b62c3ce8a96b73877d25a8080dc02d987ca730f0405c2c9dbefac46f9e601cc3f06e9713973fd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #316: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_319_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd788048ed39a5ffa77bfb62fa1fda2257742bf35d128fb3459f2a0c909ee86f915eca1ef4c287dddc66b8bccf1b88e8a24c0018962f3c5e7efa83bc1a5ff6033e5e79c4cb2c245b8c45abdce8a8e4da758d92a607c32cd407ecaef22f1c934a71").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #317: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_320_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd476d9131fd381bd917d0fed112bc9e0a5924b5ed5b11167edd8b23582b3cb15e5caaa030e7fdf0e4936bc7ab5a96353e0a01e4130c3f8bf22d473e317029a47adeb6adc462f7058f2a20d371e9702254e9b201642005b3ceda926b42b178bef9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #318: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_321_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8374253e3e21bd154448d0a8f640fe46fafa8b19ce78d538f6cc0a19662d3601c2fd20bac06e555bb8ac0ce69eb1ea20f83a1fc3501c8a66469b1a31f619b0986237050779f52b615bd7b8d76a25fc95ca2ed32525c75f27ffc87ac397e6cbaf").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #319: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_322_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd357cfd3be4d01d413c5b9ede36cba5452c11ee7fe14879e749ae6a2d897a52d63fd6a1ca7f77fb3b0bbe726c372010068426e11ea6ae78ce17bedae4bba86ced03ce5516406bf8cfaab8745eac1cd69018ad6f50b5461872ddfc56e0db3c8ff4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #320: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_323_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd29798c5c0ee287d4a5e8e6b799fd86b8df5225298e6ffc807cd2f2bc27a0a6d89cb8e51e27a5ae3b624a60d6dc32734e4989db20e9bca3ede1edf7b086911114b4c104ab3c677e4b36d6556e8ad5f523410a19f2e277aa895fc57322b4427544").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #321: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_324_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd0b70f22c781092452dca1a5711fa3a5a1f72add1bf52c2ff7cae4820b30078dda3e52c156dcaf10502620b7955bc2b40bc78ef3d569e1223c262512d8f49602a4a2039f31c1097024ad3cc86e57321de032355463486164cf192944977df147f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #322: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_325_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd16e1e458f021248a5b9434ae23f474b43ee55ba37ea585fef95c90416600f1baf19b78928720d5bee8e670fb90010fb15c37bf91b58a5157c3f3c059b2655e88cf701ec962fb4a11dcf273f5dc357e58468560c7cfeb942d074abd4329260509").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #323: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_326_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd2252d6856831b6cf895e4f0535eeaf0e5e5809753df848fe760ad86219016a9783a744459ecdfb01a5cf52b27a05bb7337482d242f235d7b4cb89345545c90a8c05d49337b9649813287de9ffe90355fd905df5f3c32945828121f37cc50de6e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #324: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_327_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd81ffe55f178da695b28c86d8b406b15dab1a9e39661a3ae017fbe390ac0972c3dd13c6b34c56982ddae124f039dfd23f4b19bbe88cee8e528ae51e5d6f3a21d7bfad4c2e6f263fe5eb59ca974d039fc0e4c3345692fb5320bdae4bd3b42a45ff").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #325: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_328_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd7fffffffaaaaaaaaffffffffffffffffe9a2538f37b28a2c513dee40fecbb71a67e6f659cdde869a2f65f094e94e5b4dfad636bbf95192feeed01b0f3deb7460a37e0a51f258b7aeb51dfe592f5cfd5685bbe58712c8d9233c62886437c38ba0").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #326: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_329_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdb62f26b5f2a2b26f6de86d42ad8a13da3ab3cccd0459b201de009e526adf21f22eb6412505aec05c6545f029932087e490d05511e8ec1f599617bb367f9ecaaf805f51efcc4803403f9b1ae0124890f06a43fedcddb31830f6669af292895cb0").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #327: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_330_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdbb1d9ac949dd748cd02bbbe749bd351cd57b38bb61403d700686aa7b4c90851e84db645868eab35e3a9fd80e056e2e855435e3a6b68d75a50a854625fe0d7f356d2589ac655edc9a11ef3e075eddda9abf92e72171570ef7bf43a2ee39338cfe").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #328: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_331_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd66755a00638cdaec1c732513ca0234ece52545dac11f816e818f725b4f60aaf291b9e47c56278662d75c0983b22ca8ea6aa5059b7a2ff7637eb2975e386ad66349aa8ff283d0f77c18d6d11dc062165fd13c3c0310679c1408302a16854ecfbd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #329: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_332_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd55a00c9fcdaebb6032513ca0234ecfffe98ebe492fdf02e48ca48e982beb3669f3ec2f13caf04d0192b47fb4c5311fb6d4dc6b0a9e802e5327f7ec5ee8e4834df97e3e468b7d0db867d6ecfe81e2b0f9531df87efdb47c1338ac321fefe5a432").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #330: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_333_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdab40193f9b5d76c064a27940469d9fffd31d7c925fbe05c919491d3057d66cd2d92b200aefcab6ac7dafd9acaf2fa10b3180235b8f46b4503e4693c670fccc885ef2f3aebf5b317475336256768f7c19efb7352d27e4cccadc85b6b8ab922c72").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #331: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_334_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdca0234ebb5fdcb13ca0234ecffffffffcb0dadbbc7f549f8a26b4408d0dc86000a88361eb92ecca2625b38e5f98bbabb96bf179b3d76fc48140a3bcd881523cde6bdf56033f84a5054035597375d90866aa2c96b86a41ccf6edebf47298ad489").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #332: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_335_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdbfffffff3ea3677e082b9310572620ae19933a9e65b285598711c77298815ad3d0fb17ccd8fafe827e0c1afc5d8d80366e2b20e7f14a563a2ba50469d84375e868612569d39e2bb9f554355564646de99ac602cc6349cf8c1e236a7de7637d93").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #333: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_336_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd266666663bbbbbbbe6666666666666665b37902e023fab7c8f055d86e5cc41f4836f33bbc1dc0d3d3abbcef0d91f11e2ac4181076c9af0a22b1e4309d3edb2769ab443ff6f901e30c773867582997c2bec2b0cb8120d760236f3a95bbe881f75").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #334: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_337_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdbfffffff36db6db7a492492492492492146c573f4c6dfc8d08a443e258970b0992f99fbe973ed4a299719baee4b432741237034dec8d72ba5103cb33e55feeb8033dd0e91134c734174889f3ebcf1b7a1ac05767289280ee7a794cebd6e69697").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #335: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_338_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdbfffffff2aaaaaab7fffffffffffffffc815d0e60b3e596ecb1ad3a27cfd49c4d35ba58da30197d378e618ec0fa7e2e2d12cffd73ebbb2049d130bba434af09eff83986e6875e41ea432b7585a49b3a6c77cbb3c47919f8e82874c794635c1d2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #336: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_339_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd7fffffff55555555ffffffffffffffffd344a71e6f651458a27bdc81fd976e378651ce490f1b46d73f3ff475149be29136697334a519d7ddab0725c8d0793224e11c65bd8ca92dc8bc9ae82911f0b52751ce21dd9003ae60900bd825f590cc28").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #337: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_340_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd3fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192aa6d8e1b12c831a0da8795650ff95f101ed921d9e2f72b15b1cdaca9826b9cfc6def6d63e2bc5c089570394a4bc9f892d5e6c7a6a637b20469a58c106ad486bf37").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #338: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_341_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd5d8ecd64a4eeba466815ddf3a4de9a8e6abd9c5db0a01eb80343553da648428f0ae580bae933b4ef2997cbdbb0922328ca9a410f627a0f7dff24cb4d920e15428911e7f8cc365a8a88eb81421a361ccc2b99e309d8dcd9a98ba83c3949d893e3").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #339: point duplication during verification
#[tokio::test]
async fn p256verify_wycheproof_342_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050236f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569bb726660235793aa9957a61e76e00c2c435109cf9a15dd624d53f4301047856b5b812fd521aafa69835a849cce6fbdeb6983b442d2444fe70e134c027fc46963838a40f2a36092e9004e92d8d940cf5638550ce672ce8b8d4e15eba5499249e9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #340: duplication bug
#[tokio::test]
async fn p256verify_wycheproof_343_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050236f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569bb726660235793aa9957a61e76e00c2c435109cf9a15dd624d53f4301047856b5b812fd521aafa69835a849cce6fbdeb6983b442d2444fe70e134c027fc469637c75bf0c5c9f6d17ffb16d2726bf30a9c7aaf31a8d317472b1ea145ab66db616").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #343: comparison with point at infinity
#[tokio::test]
async fn p256verify_wycheproof_344_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023555555550000000055555555555555553ef7a8e48d07df81a693439654210c703333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aa9dd86d3b5f4a13e8511083b78002081c53ff467f11ebd98a51a633db76665d25045d5c8200c89f2fa10d849349226d21d8dfaed6ff8d5cb3e1b7e17474ebc18f7").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #344: extreme value for k and edgecase s
#[tokio::test]
async fn p256verify_wycheproof_345_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978555555550000000055555555555555553ef7a8e48d07df81a693439654210c704fea55b32cb32aca0c12c4cd0abfb4e64b0f5a516e578c016591a93f5a0fbcc5d7d3fd10b2be668c547b212f6bb14c88f0fecd38a8a4b2c785ed3be62ce4b280").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #345: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_346_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63ccc6a771527024227792170a6f8eee735bf32b7f98af669ead299802e32d7c3107bc3b4b5e65ab887bbd343572b3e5619261fe3a073e2ffd78412f726867db589e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #346: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_347_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa7851c2bbad08e54ec7a9af99f49f03644d6ec6d59b207fec98de85a7d15b956efcee9960283045075684b410be8d0f7494b91aa2379f60727319f10ddeb0fe9d6").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #347: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_348_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc476699783333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaaf6417c8a670584e388676949e53da7fc55911ff68318d1bf3061205acb19c48f8f2b743df34ad0f72674acb7505929784779cd9ac916c3669ead43026ab6d43f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #348: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_349_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc4766997849249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185501421277be45a5eefec6c639930d636032565af420cf3373f557faa7f8a06438673d6cb6076e1cfcdc7dfe7384c8e5cac08d74501f2ae6e89cad195d0aa1371").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #349: extreme value for k
#[tokio::test]
async fn p256verify_wycheproof_350_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050237cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc4766997816a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb0d935bf9ffc115a527735f729ca8a4ca23ee01a4894adf0e3415ac84e808bb343195a3762fea29ed38912bd9ea6c4fde70c3050893a4375850ce61d82eba33c5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #350: extreme value for k and edgecase s
#[tokio::test]
async fn p256verify_wycheproof_351_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050236b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296555555550000000055555555555555553ef7a8e48d07df81a693439654210c705e59f50708646be8a589355014308e60b668fb670196206c41e748e64e4dca215de37fee5c97bcaf7144d5b459982f52eeeafbdf03aacbafef38e213624a01de").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #351: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_352_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050236b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc169fb797325843faff2f7a5b5445da9e2fd6226f7ef90ef0bfe924104b02db8e7bbb8de662c7b9b1cf9b22f7a2e582bd46d581d68878efb2b861b131d8a1d667").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #352: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_353_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050236b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa7271cd89c000143096b62d4e9e4ca885aef2f7023d18affdaf8b7b548981487540a1c6e954e32108435b55fa385b0f76481a609b9149ccb4b02b2ca47fe8e4da5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #353: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_354_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050236b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2963333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaa3d0bc7ed8f09d2cb7ddb46ebc1ed799ab1563a9ab84bf524587a220afe499c12e22dc3b3c103824a4f378d96adb0a408abf19ce7d68aa6244f78cb216fa3f8df").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #354: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_355_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050236b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29649249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185a6c885ade1a4c566f9bb010d066974abb281797fa701288c721bcbd23663a9b72e424b690957168d193a6096fc77a2b004a9c7d467e007e1f2058458f98af316").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #355: extreme value for k
#[tokio::test]
async fn p256verify_wycheproof_356_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050236b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29616a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb8d3c2c2c3b765ba8289e6ac3812572a25bf75df62d87ab7330c3bdbad9ebfa5c4c6845442d66935b238578d43aec54f7caa1621d1af241d4632e0b780c423f5d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #356: testing point duplication
#[tokio::test]
async fn p256verify_wycheproof_357_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c26b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2964fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #357: testing point duplication
#[tokio::test]
async fn p256verify_wycheproof_358_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca60502344a5ad0ad0636d9f12bc9e0a6bdd5e1cbcb012ea7bf091fcec15b0c43202d52e249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c26b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2964fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #358: testing point duplication
#[tokio::test]
async fn p256verify_wycheproof_359_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c26b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296b01cbd1c01e58065711814b583f061e9d431cca994cea1313449bf97c840ae0a").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #359: testing point duplication
#[tokio::test]
async fn p256verify_wycheproof_360_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca60502344a5ad0ad0636d9f12bc9e0a6bdd5e1cbcb012ea7bf091fcec15b0c43202d52e249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c26b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296b01cbd1c01e58065711814b583f061e9d431cca994cea1313449bf97c840ae0a").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #360: pseudorandom signature
#[tokio::test]
async fn p256verify_wycheproof_361_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855b292a619339f6e567a305c951c0dcbcc42d16e47f219f9e98e76e09d8770b34a0177e60492c5a8242f76f07bfe3661bde59ec2a17ce5bd2dab2abebdf89a62e204aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad587d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #361: pseudorandom signature
#[tokio::test]
async fn p256verify_wycheproof_362_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("dc1921946f4af96a2856e7be399007c9e807bdf4c5332f19f59ec9dd1bb8c7b3530bd6b0c9af2d69ba897f6b5fb59695cfbf33afe66dbadcf5b8d2a2a6538e23d85e489cb7a161fd55ededcedbf4cc0c0987e3e3f0f242cae934c72caa3f43e904aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad587d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #362: pseudorandom signature
#[tokio::test]
async fn p256verify_wycheproof_363_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023a8ea150cb80125d7381c4c1f1da8e9de2711f9917060406a73d7904519e51388f3ab9fa68bd47973a73b2d40480c2ba50c22c9d76ec217257288293285449b8604aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad587d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #363: pseudorandom signature
#[tokio::test]
async fn p256verify_wycheproof_364_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("de47c9b27eb8d300dbb5f2c353e632c393262cf06340c4fa7f1b40c4cbd36f90986e65933ef2ed4ee5aada139f52b70539aaf63f00a91f29c69178490d57fb713dafedfb8da6189d372308cbf1489bbbdabf0c0217d1c0ff0f701aaa7a694b9c04aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad587d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #364: x-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_365_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91d434e262a49eab7781e353a3565e482550dd0fd5defa013c7f29745eff3569f19b0c0a93f267fb6052fd8077be769c2b98953195d7bc10de844218305c6ba17a4f337ccfd67726a805e4f1600ae2849df3807eca117380239fbd816900000000ed9dea124cc8c396416411e988c30f427eb504af43a3146cd5df7ea60666d685").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #365: x-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_366_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f910fe774355c04d060f76d79fd7a772e421463489221bf0a33add0be9b1979110b500dcba1c69a8fbd43fa4f57f743ce124ca8b91a1f325f3fac6181175df557374f337ccfd67726a805e4f1600ae2849df3807eca117380239fbd816900000000ed9dea124cc8c396416411e988c30f427eb504af43a3146cd5df7ea60666d685").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #366: x-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_367_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91bb40bf217bed3fb3950c7d39f03d36dc8e3b2cd79693f125bfd06595ee1135e3541bf3532351ebb032710bdb6a1bf1bfc89a1e291ac692b3fa4780745bb556774f337ccfd67726a805e4f1600ae2849df3807eca117380239fbd816900000000ed9dea124cc8c396416411e988c30f427eb504af43a3146cd5df7ea60666d685").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #367: y-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_368_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91664eb7ee6db84a34df3c86ea31389a5405badd5ca99231ff556d3e75a233e73a59f3c752e52eca46137642490a51560ce0badc678754b8f72e51a2901426a1bd3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f49726500493584fa174d791c72bf2ce3880a8960dd2a7c7a1338a82f85a9e59cdbde80000000").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #368: y-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_369_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f914cd0429bbabd2827009d6fcd843d4ce39c3e42e2d1631fd001985a79d1fd8b439638bf12dd682f60be7ef1d0e0d98f08b7bca77a1a2b869ae466189d2acdabe33cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f49726500493584fa174d791c72bf2ce3880a8960dd2a7c7a1338a82f85a9e59cdbde80000000").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #369: y-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_370_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91e56c6ea2d1b017091c44d8b6cb62b9f460e3ce9aed5e5fd41e8added97c56c04a308ec31f281e955be20b457e463440b4fcf2b80258078207fc1378180f89b553cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f49726500493584fa174d791c72bf2ce3880a8960dd2a7c7a1338a82f85a9e59cdbde80000000").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #370: y-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_371_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f911158a08d291500b4cabed3346d891eee57c176356a2624fb011f8fbbf3466830228a8c486a736006e082325b85290c5bc91f378b75d487dda46798c18f2855193cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f4972650049357b05e8b186e38d41d31c77f5769f22d58385ecc857d07a561a6324217fffffff").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #371: y-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_372_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91b1db9289649f59410ea36b0c0fc8d6aa2687b29176939dd23e0dde56d309fa9d3e1535e4280559015b0dbd987366dcf43a6d1af5c23c7d584e1c3f48a12513363cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f4972650049357b05e8b186e38d41d31c77f5769f22d58385ecc857d07a561a6324217fffffff").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #372: y-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_373_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91b7b16e762286cb96446aa8d4e6e7578b0a341a79f2dd1a220ac6f0ca4e24ed86ddc60a700a139b04661c547d07bbb0721780146df799ccf55e55234ecb8f12bc3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f4972650049357b05e8b186e38d41d31c77f5769f22d58385ecc857d07a561a6324217fffffff").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #373: x-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_374_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91d82a7c2717261187c8e00d8df963ff35d796edad36bc6e6bd1c91c670d9105b43dcabddaf8fcaa61f4603e7cbac0f3c0351ecd5988efb23f680d07debd1399292829c31faa2e400e344ed94bca3fcd0545956ebcfe8ad0f6dfa5ff8effffffffa01aafaf000e52585855afa7676ade284113099052df57e7eb3bd37ebeb9222e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #374: x-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_375_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f915eb9c8845de68eb13d5befe719f462d77787802baff30ce96a5cba063254af782c026ae9be2e2a5e7ca0ff9bbd92fb6e44972186228ee9a62b87ddbe2ef66fb52829c31faa2e400e344ed94bca3fcd0545956ebcfe8ad0f6dfa5ff8effffffffa01aafaf000e52585855afa7676ade284113099052df57e7eb3bd37ebeb9222e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #375: x-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_376_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f9196843dd03c22abd2f3b782b170239f90f277921becc117d0404a8e4e36230c28f2be378f526f74a543f67165976de9ed9a31214eb4d7e6db19e1ede123dd991d2829c31faa2e400e344ed94bca3fcd0545956ebcfe8ad0f6dfa5ff8effffffffa01aafaf000e52585855afa7676ade284113099052df57e7eb3bd37ebeb9222e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #376: x-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_377_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91766456dce1857c906f9996af729339464d27e9d98edc2d0e3b760297067421f6402385ecadae0d8081dccaf5d19037ec4e55376eced699e93646bfbbf19d0b41fffffff948081e6a0458dd8f9e738f2665ff9059ad6aac0708318c4ca9a7a4f55a8abcba2dda8474311ee54149b973cae0c0fb89557ad0bf78e6529a1663bd73").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #377: x-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_378_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91c605c4b2edeab20419e6518a11b2dbc2b97ed8b07cced0b19c34f777de7b9fd9edf0f612c5f46e03c719647bc8af1b29b2cde2eda700fb1cff5e159d47326dbafffffff948081e6a0458dd8f9e738f2665ff9059ad6aac0708318c4ca9a7a4f55a8abcba2dda8474311ee54149b973cae0c0fb89557ad0bf78e6529a1663bd73").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #378: x-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_379_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91d48b68e6cabfe03cf6141c9ac54141f210e64485d9929ad7b732bfe3b7eb8a84feedae50c61bd00e19dc26f9b7e2265e4508c389109ad2f208f0772315b6c941fffffff948081e6a0458dd8f9e738f2665ff9059ad6aac0708318c4ca9a7a4f55a8abcba2dda8474311ee54149b973cae0c0fb89557ad0bf78e6529a1663bd73").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #379: x-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_380_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91b7c81457d4aeb6aa65957098569f0479710ad7f6595d5874c35a93d12a5dd4c7b7961a0b652878c2d568069a432ca18a1a9199f2ca574dad4b9e3a05c0a1cdb300000003fa15f963949d5f03a6f5c7f86f9e0015eeb23aebbff1173937ba748e1099872070e8e87c555fa13659cca5d7fadcfcb0023ea889548ca48af2ba7e71").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #380: x-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_381_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f916b01332ddb6edfa9a30a1321d5858e1ee3cf97e263e669f8de5e9652e76ff3f75939545fced457309a6a04ace2bd0f70139c8f7d86b02cb1cc58f9e69e96cd5a00000003fa15f963949d5f03a6f5c7f86f9e0015eeb23aebbff1173937ba748e1099872070e8e87c555fa13659cca5d7fadcfcb0023ea889548ca48af2ba7e71").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #381: x-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_382_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91efdb884720eaeadc349f9fc356b6c0344101cd2fd8436b7d0e6a4fb93f106361f24bee6ad5dc05f7613975473aadf3aacba9e77de7d69b6ce48cb60d8113385d00000003fa15f963949d5f03a6f5c7f86f9e0015eeb23aebbff1173937ba748e1099872070e8e87c555fa13659cca5d7fadcfcb0023ea889548ca48af2ba7e71").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #382: y-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_383_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f9131230428405560dcb88fb5a646836aea9b23a23dd973dcbe8014c87b8b20eb070f9344d6e812ce166646747694a41b0aaf97374e19f3c5fb8bd7ae3d9bd0beffbcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015000000001352bb4a0fa2ea4cceb9ab63dd684ade5a1127bcf300a698a7193bc2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #383: y-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_384_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91caa797da65b320ab0d5c470cda0b36b294359c7db9841d679174db34c4855743cf543a62f23e212745391aaf7505f345123d2685ee3b941d3de6d9b36242e5a0bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015000000001352bb4a0fa2ea4cceb9ab63dd684ade5a1127bcf300a698a7193bc2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #384: y-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_385_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f917e5f0ab5d900d3d3d7867657e5d6d36519bc54084536e7d21c336ed8001859459450c07f201faec94b82dfb322e5ac676688294aad35aa72e727ff0b19b646aabcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015000000001352bb4a0fa2ea4cceb9ab63dd684ade5a1127bcf300a698a7193bc2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #385: y-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_386_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91d7d70c581ae9e3f66dc6a480bf037ae23f8a1e4a2136fe4b03aa69f0ca25b35689c460f8a5a5c2bbba962c8a3ee833a413e85658e62a59e2af41d9127cc47224bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015fffffffeecad44b6f05d15b33146549c2297b522a5eed8430cff596758e6c43d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #386: y-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_387_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91341c1b9ff3c83dd5e0dfa0bf68bcdf4bb7aa20c625975e5eeee34bb396266b3472b69f061b750fd5121b22b11366fad549c634e77765a017902a67099e0a4469bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015fffffffeecad44b6f05d15b33146549c2297b522a5eed8430cff596758e6c43d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_secp256r1_sha256_test.json EcdsaVerify SHA-256 #387: y-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_388_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f9170bebe684cdcb5ca72a42f0d873879359bd1781a591809947628d313a3814f67aec03aca8f5587a4d535fa31027bbe9cc0e464b1c3577f4c2dcde6b2094798a9bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015fffffffeecad44b6f05d15b33146549c2297b522a5eed8430cff596758e6c43d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1: signature malleability
#[tokio::test]
async fn p256verify_wycheproof_389_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050232ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e184cd60b855d442f5b3c7b11eb6c4e0ae7525fe710fab9aa7c77a67f79e6fadd762927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #2: Legacy:ASN encoding of s misses leading 0
#[tokio::test]
async fn p256verify_wycheproof_390_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050232ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #3: valid
#[tokio::test]
async fn p256verify_wycheproof_391_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050232ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #118: modify first byte of integer
#[tokio::test]
async fn p256verify_wycheproof_392_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca60502329a3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #120: modify last byte of integer
#[tokio::test]
async fn p256verify_wycheproof_393_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050232ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e98b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #121: modify last byte of integer
#[tokio::test]
async fn p256verify_wycheproof_394_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050232ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b491568475b2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #124: truncated integer
#[tokio::test]
async fn p256verify_wycheproof_395_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050232ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e1800b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b491568472927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #133: Modified r or s, e.g. by adding or subtracting the order of the group
#[tokio::test]
async fn p256verify_wycheproof_396_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023d45c5741946b2a137f59262ee6f5bc91001af27a5e1117a64733950642a3d1e8b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #134: Modified r or s, e.g. by adding or subtracting the order of the group
#[tokio::test]
async fn p256verify_wycheproof_397_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023d45c5740946b2a147f59262ee6f5bc90bd01ed280528b62b3aed5fc93f06f739b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #137: Modified r or s, e.g. by adding or subtracting the order of the group
#[tokio::test]
async fn p256verify_wycheproof_398_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023d45c5741946b2a137f59262ee6f5bc91001af27a5e1117a64733950642a3d1e8b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #139: Modified r or s, e.g. by adding or subtracting the order of the group
#[tokio::test]
async fn p256verify_wycheproof_399_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050232ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e18b329f47aa2bbd0a4c384ee1493b1f518ada018ef05465583885980861905228a2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #143: Modified r or s, e.g. by adding or subtracting the order of the group
#[tokio::test]
async fn p256verify_wycheproof_400_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050232ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e184cd60b865d442f5a3c7b11eb6c4e0ae79578ec6353a20bf783ecb4b6ea97b8252927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #177: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_401_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #178: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_402_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #179: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_403_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #180: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_404_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551ffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #181: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_405_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551ffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #187: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_406_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #188: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_407_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #189: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_408_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #190: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_409_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550ffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #191: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_410_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550ffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #197: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_411_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #198: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_412_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #199: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_413_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #200: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_414_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552ffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #201: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_415_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552ffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #207: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_416_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffffffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #208: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_417_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffffffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #209: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_418_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffffffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #210: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_419_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffffffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #211: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_420_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffffffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #217: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_421_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000001000000000000000000000000ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #218: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_422_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000001000000000000000000000000ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #219: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_423_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000001000000000000000000000000ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #220: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_424_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000001000000000000000000000000ffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #221: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_425_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000001000000000000000000000000ffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #230: Edge case for Shamir multiplication
#[tokio::test]
async fn p256verify_wycheproof_426_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("70239dd877f7c944c422f44dea4ed1a52f2627416faf2f072fa50c772ed6f80764a1aab5000d0e804f3e2fc02bdee9be8ff312334e2ba16d11547c97711c898e6af015971cc30be6d1a206d4e013e0997772a2f91d73286ffd683b9bb2cf4f1b2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #231: special case hash
#[tokio::test]
async fn p256verify_wycheproof_427_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("00000000690ed426ccf17803ebe2bd0884bcd58a1bb5e7477ead3645f356e7a916aea964a2f6506d6f78c81c91fc7e8bded7d397738448de1e19a0ec580bf266252cd762130c6667cfe8b7bc47d27d78391e8e80c578d1cd38c3ff033be928e92927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #232: special case hash
#[tokio::test]
async fn p256verify_wycheproof_428_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7300000000213f2a525c6035725235c2f696ad3ebb5ee47f140697ad25770d919cc98be2347d469bf476dfc26b9b733df2d26d6ef524af917c665baccb23c882093496459effe2d8d70727b82462f61d0ec1b7847929d10ea631dacb16b56c322927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #233: special case hash
#[tokio::test]
async fn p256verify_wycheproof_429_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ddf2000000005e0be0635b245f0b97978afd25daadeb3edb4a0161c27fe0604573b3c90ecd390028058164524dde892703dce3dea0d53fa8093999f07ab8aa432f67b0b8e20636695bb7d8bf0a651c802ed25a395387b5f4188c0c4075c886342927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #234: special case hash
#[tokio::test]
async fn p256verify_wycheproof_430_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("67ab1900000000784769c4ecb9e164d6642b8499588b89855be1ec355d0841a0bfab3098252847b328fadf2f89b95c851a7f0eb390763378f37e90119d5ba3ddbdd64e234e832b1067c2d058ccb44d978195ccebb65c2aaf1e2da9b8b4987e3b2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #235: special case hash
#[tokio::test]
async fn p256verify_wycheproof_431_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a2bf09460000000076d7dbeffe125eaf02095dff252ee905e296b6350fc311cf204a9784074b246d8bf8bf04a4ceb1c1f1c9aaab168b1596d17093c5cd21d2cd51cce41670636783dc06a759c8847868a406c2506fe17975582fe648d1d88b522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #236: special case hash
#[tokio::test]
async fn p256verify_wycheproof_432_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3554e827c700000000e1e75e624a06b3a0a353171160858129e15c544e4f0e65ed66dc34f551ac82f63d4aa4f81fe2cb0031a91d1314f835027bca0f1ceeaa0399ca123aa09b13cd194a422e18d5fda167623c3f6e5d4d6abb8953d67c0c48c72927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #237: special case hash
#[tokio::test]
async fn p256verify_wycheproof_433_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9b6cd3b812610000000026941a0f0bb53255ea4c9fd0cb3426e3a54b9fc6965c060b700bef665c68899d44f2356a578d126b062023ccc3c056bf0f60a237012b8d186c027832965f4fcc78a3366ca95dedbb410cbef3f26d6be5d581c11d36102927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #238: special case hash
#[tokio::test]
async fn p256verify_wycheproof_434_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("883ae39f50bf0100000000e7561c26fc82a52baa51c71ca877162f93c4ae01869f6adfe8d5eb5b2c24d7aa7934b6cf29c93ea76cd313c9132bb0c8e38c96831db26a9c9e40e55ee0890c944cf271756c906a33e66b5bd15e051593883b5e99022927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #239: special case hash
#[tokio::test]
async fn p256verify_wycheproof_435_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a1ce5d6e5ecaf28b0000000000fa7cd010540f420fb4ff7401fe9fce011d0ba6a1af03ca91677b673ad2f33615e56174a1abf6da168cebfa8868f4ba273f16b720aa73ffe48afa6435cd258b173d0c2377d69022e7d098d75caf24c8c5e06b1c2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #240: special case hash
#[tokio::test]
async fn p256verify_wycheproof_436_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8ea5f645f373f580930000000038345397330012a8ee836c5494cdffd5ee8054fdc70602766f8eed11a6c99a71c973d5659355507b843da6e327a28c11893db93df5349688a085b137b1eacf456a9e9e0f6d15ec0078ca60a7f83f2b10d213502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #241: special case hash
#[tokio::test]
async fn p256verify_wycheproof_437_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("660570d323e9f75fa734000000008792d65ce93eabb7d60d8d9c1bbdcb5ef305b516a314f2fce530d6537f6a6c49966c23456f63c643cf8e0dc738f7b876e675d39ffd033c92b6d717dd536fbc5efdf1967c4bd80954479ba66b0120cd16fff22927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #242: special case hash
#[tokio::test]
async fn p256verify_wycheproof_438_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d0462673154cce587dde8800000000e98d35f1f45cf9c3bf46ada2de4c568c343b2cbf046eac45842ecb7984d475831582717bebb6492fd0a485c101e29ff0a84c9b7b47a98b0f82de512bc9313aaf51701099cac5f76e68c8595fc1c1d992582927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #243: special case hash
#[tokio::test]
async fn p256verify_wycheproof_439_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bd90640269a7822680cedfef000000000caef15a6171059ab83e7b4418d7278f30c87d35e636f540841f14af54e2f9edd79d0312cfa1ab656c3fb15bfde48dcf47c15a5a82d24b75c85a692bd6ecafeb71409ede23efd08e0db9abf6340677ed2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #244: special case hash
#[tokio::test]
async fn p256verify_wycheproof_440_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("33239a52d72f1311512e41222a00000000d2dcceb301c54b4beae8e284788a7338686ff0fda2cef6bc43b58cfe6647b9e2e8176d168dec3c68ff262113760f52067ec3b651f422669601662167fa8717e976e2db5e6a4cf7c2ddabb3fde9d67d2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #245: special case hash
#[tokio::test]
async fn p256verify_wycheproof_441_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b8d64fbcd4a1c10f1365d4e6d95c000000007ee4a21a1cbe1dc84c2d941ffaf144a3e23bf314f2b344fc25c7f2de8b6af3e17d27f5ee844b225985ab6e2775cf2d48e223205e98041ddc87be532abed584f0411f5729500493c9cc3f4dd15e862927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #246: special case hash
#[tokio::test]
async fn p256verify_wycheproof_442_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("01603d3982bf77d7a3fef3183ed092000000003a227420db4088b20fe0e9d84a2ded5b7ec8e90e7bf11f967a3d95110c41b99db3b5aa8d330eb9d638781688e97d5792c53628155e1bfc46fb1a67e3088de049c328ae1f44ec69238a009808f92927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #247: special case hash
#[tokio::test]
async fn p256verify_wycheproof_443_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9ea6994f1e0384c8599aa02e6cf66d9c000000004d89ef50b7e9eb0cfbff7363bdae7bcb580bf335efd3bc3d31870f923eaccafcd40ec2f605976f15137d8b8ff6dfa12f19e525270b0106eecfe257499f373a4fb318994f24838122ce7ec3c72927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #248: special case hash
#[tokio::test]
async fn p256verify_wycheproof_444_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d03215a8401bcf16693979371a01068a4700000000e2fa5bf692bc670905b18c50f9c4f0cd6940e162720957ffff513799209b78596956d21ece251c2401f1c6d7033a0a787d338e889defaaabb106b95a4355e411a59c32aa5167dfab2447262927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #249: special case hash
#[tokio::test]
async fn p256verify_wycheproof_445_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("307bfaaffb650c889c84bf83f0300e5dc87e000000008408fd5f64b582e3bb14f612820687604fa01906066a378d67540982e29575d019aabe90924ead5c860d3f9367702dd7dd4f75ea98afd20e328a1a99f4857b316525328230ce294b0fef2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #250: special case hash
#[tokio::test]
async fn p256verify_wycheproof_446_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bab5c4f4df540d7b33324d36bb0c157551527c00000000e4af574bb4d54ea6b89505e407657d6e8bc93db5da7aa6f5081f61980c1949f56b0f2f507da5782a7ac60d31904e3669738ffbeccab6c3656c08e0ed5cb92b3cfa5e7f71784f9c50212927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #251: special case hash
#[tokio::test]
async fn p256verify_wycheproof_447_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d4ba47f6ae28f274e4f58d8036f9c36ec2456f5b00000000c3b869197ef5e15ebbd16fbbb656b6d0d83e6a7787cd691b08735aed371732723e1c68a40404517d9d8e35dba96028b7787d91315be675877d2d097be5e8ee34560e3e7fd25c0f002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #252: special case hash
#[tokio::test]
async fn p256verify_wycheproof_448_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("79fd19c7235ea212f29f1fa00984342afe0f10aafd00000000801e47f8c184e12ec9760122db98fd06ea76848d35a6da442d2ceef7559a30cf57c61e92df327e7ab271da90859479701fccf86e462ee3393fb6814c27b760c4963625c0a198782927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #253: special case hash
#[tokio::test]
async fn p256verify_wycheproof_449_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8c291e8eeaa45adbaf9aba5c0583462d79cbeb7ac97300000000a37ea6700cda54e76b7683b6650baa6a7fc49b1c51eed9ba9dd463221f7a4f1005a89fe00c592ea076886c773eb937ec1cc8374b7915cfd11b1c1ae1166152f2f7806a31c8fd2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #254: special case hash
#[tokio::test]
async fn p256verify_wycheproof_450_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0eaae8641084fa979803efbfb8140732f4cdcf66c3f78a000000003c278a6b215291deaf24659ffbbce6e3c26f6021097a74abdbb69be4fb10419c0c496c946665d6fcf336d27cc7cdb982bb4e4ecef5827f84742f29f10abf83469270a03dc32927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #255: special case hash
#[tokio::test]
async fn p256verify_wycheproof_451_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e02716d01fb23a5a0068399bf01bab42ef17c6d96e13846c00000000afc0f89d207a3241812d75d947419dc58efb05e8003b33fc17eb50f9d15166a88479f107cdee749f2e492b213ce80b32d0574f62f1c5d70793cf55e382d5caadf75927672927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #256: special case hash
#[tokio::test]
async fn p256verify_wycheproof_452_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9eb0bf583a1a6b9a194e9a16bc7dab2a9061768af89d00659a00000000fc7de16554e49f82a855204328ac94913bf01bbe84437a355a0a37c0dee3cf81aa7728aea00de2507ddaf5c94e1e126980d3df16250a2eaebc8be486effe7f22b4f9292927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #257: special case hash
#[tokio::test]
async fn p256verify_wycheproof_453_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("62aac98818b3b84a2c214f0d5e72ef286e1030cb53d9a82b690e00000000cd15a54c5062648339d2bff06f71c88216c26c6e19b4d80a8c602990ac82707efdfce99bbe7fcfafae3e69fd016777517aa01056317f467ad09aff09be73c9731b0d2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #258: special case hash
#[tokio::test]
async fn p256verify_wycheproof_454_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3760a7f37cf96218f29ae43732e513efd2b6f552ea4b6895464b9300000000c8975bd7157a8d363b309f1f444012b1a1d23096593133e71b4ca8b059cff37eaf7faa7a28b1c822baa241793f2abc930bd4c69840fe090f2aacc46786bf9196222927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #259: special case hash
#[tokio::test]
async fn p256verify_wycheproof_455_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0da0a1d2851d33023834f2098c0880096b4320bea836cd9cbb6ff6c8000000005694a6f84b8f875c276afd2ebcfe4d61de9ec90305afb1357b95b3e0da43885e0dffad9ffd0b757d8051dec02ebdf70d8ee2dc5c7870c0823b6ccc7c679cbaa42927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #260: special case hash
#[tokio::test]
async fn p256verify_wycheproof_456_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ffffffff293886d3086fd567aafd598f0fe975f735887194a764a231e82d289aa0c30e8026fdb2b4b4968a27d16a6d08f7098f1a98d21620d7454ba9790f1ba65e470453a8a399f15baf463f9deceb53acc5ca64459149688bd2760c654243392927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #261: special case hash
#[tokio::test]
async fn p256verify_wycheproof_457_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7bffffffff2376d1e3c03445a072e24326acdc4ce127ec2e0e8d9ca99527e7b7614ea84acf736527dd73602cd4bb4eea1dfebebd5ad8aca52aa0228cf7b99a88737cc85f5f2d2f60d1b8183f3ed490e4de14368e96a9482c2a4dd193195c902f2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #262: special case hash
#[tokio::test]
async fn p256verify_wycheproof_458_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a2b5ffffffffebb251b085377605a224bc80872602a6e467fd016807e97fa395bead6734ebe44b810d3fb2ea00b1732945377338febfd439a8d74dfbd0f942fa6bb18eae36616a7d3cad35919fd21a8af4bbe7a10f73b3e036a46b103ef56e2a2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #263: special case hash
#[tokio::test]
async fn p256verify_wycheproof_459_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("641227ffffffff6f1b96fa5f097fcf3cc1a3c256870d45a67b83d0967d4b20c0499625479e161dacd4db9d9ce64854c98d922cbf212703e9654fae182df9bad242c177cf37b8193a0131108d97819edd9439936028864ac195b64fca76d9d6932927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #264: special case hash
#[tokio::test]
async fn p256verify_wycheproof_460_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("958415d8ffffffffabad03e2fc662dc3ba203521177502298df56f36600e0f8b08f16b8093a8fb4d66a2c8065b541b3d31e3bfe694f6b89c50fb1aaa6ff6c9b29d6455e2d5d1779748573b611cb95d4a21f967410399b39b535ba3e5af81ca2e2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #265: special case hash
#[tokio::test]
async fn p256verify_wycheproof_461_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f1d8de4858ffffffff1281093536f47fe13deb04e1fbe8fb954521b6975420f8be26231b6191658a19dd72ddb99ed8f8c579b6938d19bce8eed8dc2b338cb5f8e1d9a32ee56cffed37f0f22b2dcb57d5c943c14f79694a03b9c5e96952575c892927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #266: special case hash
#[tokio::test]
async fn p256verify_wycheproof_462_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0927895f2802ffffffff10782dd14a3b32dc5d47c05ef6f1876b95c81fc31def15e76880898316b16204ac920a02d58045f36a229d4aa4f812638c455abe0443e74d357d3fcb5c8c5337bd6aba4178b455ca10e226e13f9638196506a19391232927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #267: special case hash
#[tokio::test]
async fn p256verify_wycheproof_463_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("60907984aa7e8effffffff4f332862a10a57c3063fb5a30624cf6a0c3ac80589352ecb53f8df2c503a45f9846fc28d1d31e6307d3ddbffc1132315cc07f16dad1348dfa9c482c558e1d05c5242ca1c39436726ecd28258b1899792887dd0a3c62927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #268: special case hash
#[tokio::test]
async fn p256verify_wycheproof_464_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c6ff198484939170ffffffff0af42cda50f9a5f50636ea6942d6b9b8cd6ae1e24a40801a7e606ba78a0da9882ab23c7677b8642349ed3d652c5bfa5f2a9558fb3a49b64848d682ef7f605f2832f7384bdc24ed2925825bf8ea77dc59817257822927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #269: special case hash
#[tokio::test]
async fn p256verify_wycheproof_465_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("de030419345ca15c75ffffffff8074799b9e0956cc43135d16dfbe4d27d7e68deacc5e1a8304a74d2be412b078924b3bb3511bac855c05c9e5e9e44df3d61e967451cd8e18d6ed1885dd827714847f96ec4bb0ed4c36ce9808db8f714204f6d12927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #270: special case hash
#[tokio::test]
async fn p256verify_wycheproof_466_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6f0e3eeaf42b28132b88fffffffff6c8665604d34acb19037e1ab78caaaac6ff2f7a5e9e5771d424f30f67fdab61e8ce4f8cd1214882adb65f7de94c31577052ac4e69808345809b44acb0b2bd889175fb75dd050c5a449ab9528f8f78daa10c2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #271: special case hash
#[tokio::test]
async fn p256verify_wycheproof_467_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("cdb549f773b3e62b3708d1ffffffffbe48f7c0591ddcae7d2cb222d1f8017ab9ffcda40f792ce4d93e7e0f0e95e1a2147dddd7f6487621c30a03d710b330021979938b55f8a17f7ed7ba9ade8f2065a1fa77618f0b67add8d58c422c2453a49a2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #272: special case hash
#[tokio::test]
async fn p256verify_wycheproof_468_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2c3f26f96a3ac0051df4989bffffffff9fd64886c1dc4f9924d8fd6f0edb048481f2359c4faba6b53d3e8c8c3fcc16a948350f7ab3a588b28c17603a431e39a8cd6f6a5cc3b55ead0ff695d06c6860b509e46d99fccefb9f7f9e101857f743002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #273: special case hash
#[tokio::test]
async fn p256verify_wycheproof_469_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ac18f8418c55a2502cb7d53f9affffffff5c31d89fda6a6b8476397c04edf411dfc8bf520445cbb8ee1596fb073ea283ea130251a6fdffa5c3f5f2aaf75ca808048e33efce147c9dd92823640e338e68bfd7d0dc7a4905b3a7ac711e577e90e72927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #274: special case hash
#[tokio::test]
async fn p256verify_wycheproof_470_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4f9618f98e2d3a15b24094f72bb5ffffffffa2fd3e2893683e5a6ab8cf0ee610ad019f74c6941d20efda70b46c53db166503a0e393e932f688227688ba6a576293320eb7ca0710255346bdbb3102cdcf7964ef2e0988e712bc05efe16c1993452927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #275: special case hash
#[tokio::test]
async fn p256verify_wycheproof_471_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("422e82a3d56ed10a9cc21d31d37a25ffffffff67edf7c40204caae73ab0bc75aac8096842e8add68c34e78ce11dd71e4b54316bd3ebf7fffdeb7bd5a3ebc1883f5ca2f4f23d674502d4caf85d187215d36e3ce9f0ce219709f21a3aac003b7a82927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #276: special case hash
#[tokio::test]
async fn p256verify_wycheproof_472_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7075d245ccc3281b6e7b329ff738fbb417a5ffffffffa0842d9890b5cf95d018677b2d3a59b18a5ff939b70ea002250889ddcd7b7b9d776854b4943693fb92f76b4ba856ade7677bf30307b21f3ccda35d2f63aee81efd0bab6972cc0795db552927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #277: special case hash
#[tokio::test]
async fn p256verify_wycheproof_473_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3c80de54cd9226989443d593fa4fd6597e280ebeffffffffc1847eb76c217a95479e1ded14bcaed0379ba8e1b73d3115d84d31d4b7c30e1f05e1fc0d5957cfb0918f79e35b3d89487cf634a4f05b2e0c30857ca879f97c771e877027355b24432927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #278: special case hash
#[tokio::test]
async fn p256verify_wycheproof_474_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("de21754e29b85601980bef3d697ea2770ce891a8cdffffffffc7906aa794b39b43dfccd0edb9e280d9a58f01164d55c3d711e14b12ac5cf3b64840ead512a0a31dbe33fa8ba84533cd5c4934365b3442ca1174899b78ef9a3199f495843897722927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #279: special case hash
#[tokio::test]
async fn p256verify_wycheproof_475_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8f65d92927cfb86a84dd59623fb531bb599e4d5f7289ffffffff2f1f2f57881c5b09ab637bd4caf0f4c7c7e4bca592fea20e9087c259d26a38bb4085f0bbff1145b7eb467b6748af618e9d80d6fdcd6aa24964e5a13f885bca8101de08eb0d752927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #280: special case hash
#[tokio::test]
async fn p256verify_wycheproof_476_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6b63e9a74e092120160bea3877dace8a2cc7cd0e8426cbfffffffffafc8c3ca85e9b1c5a028070df5728c5c8af9b74e0667afa570a6cfa0114a5039ed15ee06fb1360907e2d9785ead362bb8d7bd661b6c29eeffd3c5037744edaeb9ad990c202927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #281: special case hash
#[tokio::test]
async fn p256verify_wycheproof_477_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fc28259702a03845b6d75219444e8b43d094586e249c8699ffffffffe852512e0671a0a85c2b72d54a2fb0990e34538b4890050f5a5712f6d1a7a5fb8578f32edb1846bab6b7361479ab9c3285ca41291808f27fd5bd4fdac720e5854713694c2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #282: special case hash
#[tokio::test]
async fn p256verify_wycheproof_478_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1273b4502ea4e3bccee044ee8e8db7f774ecbcd52e8ceb571757ffffffffe20a7673f8526748446477dbbb0590a45492c5d7d69859d301abbaedb35b2095103a3dc70ddf9c6b524d886bed9e6af02e0e4dec0d417a414fed3807ef4422913d7c2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #283: special case hash
#[tokio::test]
async fn p256verify_wycheproof_479_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("08fb565610a79baa0c566c66228d81814f8c53a15b96e602fb49ffffffffff6e7f085441070ecd2bb21285089ebb1aa6450d1a06c36d3ff39dfd657a796d12b5249712012029870a2459d18d47da9aa492a5e6cb4b2d8dafa9e4c5c54a2b9a8b2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #284: special case hash
#[tokio::test]
async fn p256verify_wycheproof_480_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d59291cc2cf89f3087715fcb1aa4e79aa2403f748e97d7cd28ecaefeffffffff914c67fb61dd1e27c867398ea7322d5ab76df04bc5aa6683a8e0f30a5d287348fa07474031481dda4953e3ac1959ee8cea7e66ec412b38d6c96d28f6d37304ea2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #636: r too large
#[tokio::test]
async fn p256verify_wycheproof_481_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25ffffffff00000001000000000000000000000000fffffffffffffffffffffffcffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254ed705d16f80987e2d9b1a6957d29ce22febf7d10fa515153182415c8361baaca4b1fc105ee5ce80d514ec1238beae2037a6f83625593620d460819e8682160926").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #637: r,s are large
#[tokio::test]
async fn p256verify_wycheproof_482_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e3cd8d2f81d6953b0844c09d7b560d527cd2ef67056893eadafa52c8501387d59ee41fdb4d10402ce7a0c5e3b747adfa3a490b62a6b7719068903485c0bb6dc2d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #638: r and s^-1 have a large Hamming weight
#[tokio::test]
async fn p256verify_wycheproof_483_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd909135bdb6799286170f5ead2de4f6511453fe50914f3df2de54a36383df8dd48240cd81edd91cb6936133508c3915100e81f332c4545d41189b481196851378e05b06e72d4a1bff80ea5db514aa2f93ea6dd6d9c0ae27b7837dc432f9ce89d9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #639: r and s^-1 have a large Hamming weight
#[tokio::test]
async fn p256verify_wycheproof_484_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd27b4577ca009376f71303fd5dd227dcef5deb773ad5f5a84360644669ca249a5b062947356748b0fc17f1704c65aa1dca6e1bfe6779756fa616d91eaad13df2c0b38c17f3d0672e7409cfc5992a99fff12b84a4f8432293b431113f1b2fb579d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #651: r and s^-1 are close to n
#[tokio::test]
async fn p256verify_wycheproof_485_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6324d5555555550000000055555555555555553ef7a8e48d07df81a693439654210c707a736d8e326a9ca62bbe25a34ea4e3633b499a96afa7aaa3fcf3fd88f8e07edeb3e45879d8622b93e818443a686e869eeda7bf9ae46aa3eafcc48a5934864627").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #654: point at infinity during verify
#[tokio::test]
async fn p256verify_wycheproof_486_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8555555550000000055555555555555553ef7a8e48d07df81a693439654210c700203736fcb198b15d8d7a0c80f66dddd15259240aa78d08aae67c467de04503434383438d5041ea9a387ee8e4d4e84b4471b160c6bcf2568b072f8f20e87a996").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #655: edge case for signature malleability
#[tokio::test]
async fn p256verify_wycheproof_487_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a97fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a878d844dc7f16b73b1f2a39730da5d8cd99fe2e70a18482384e37dcd2bfea02e1ed6572e01eb7a8d113d02c666c45ef22d3b9a6a6dea99aa43a8183c26e75d336").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #656: edge case for signature malleability
#[tokio::test]
async fn p256verify_wycheproof_488_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a97fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9dec6c8257dde94110eacc8c09d2e5789cc5beb81a958b02b4d62da9599a7401466fae1614174be63970b83f6524421067b06dd6f4e9c56baca4e344fdd690f1d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #657: u1 == 1
#[tokio::test]
async fn p256verify_wycheproof_489_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25555555550000000055555555555555553ef7a8e48d07df81a693439654210c70532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25a17f5b75a35ed64623ca5cbf1f91951292db0c23f0c2ea24c3d0cad0988cabc083a7a618625c228940730b4fa3ee64faecbb2fc20fdde7c58b3a3f6300424dc6").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #658: u1 == n - 1
#[tokio::test]
async fn p256verify_wycheproof_490_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25555555550000000055555555555555553ef7a8e48d07df81a693439654210c70acd155416a8b77f34089464733ff7cd39c400e9c69af7beb9eac5054ed2ec72c04ba0cba291a37db13f33bf90dab628c04ec8393a0200419e9eaa1ebcc9fb5c31f3a0a0e6823a49b625ad57b12a32d4047970fc3428f0f0049ecf4265dc12f62").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #659: u2 == 1
#[tokio::test]
async fn p256verify_wycheproof_491_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25555555550000000055555555555555553ef7a8e48d07df81a693439654210c70555555550000000055555555555555553ef7a8e48d07df81a693439654210c70692b6c828e0feed63d8aeaa2b7322f9ccbe8723a1ed39f229f204a434b8900efa1f6f6abcb38ea3b8fde38b98c7c271f274af56a8c5628dc3329069ae4dd5716").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #660: u2 == n - 1
#[tokio::test]
async fn p256verify_wycheproof_492_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25555555550000000055555555555555553ef7a8e48d07df81a693439654210c70aaaaaaaa00000000aaaaaaaaaaaaaaaa7def51c91a0fbf034d26872ca84218e100cefd9162d13e64cb93687a9cd8f9755ebb5a3ef7632f800f84871874ccef09543ecbeaf7e8044ef721be2fb5f549e4b8480d2587404ebf7dbbef2c54bc0cb1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #661: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_493_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd710f8e3edc7c2d5a3fd23de844002bb949d9f794f6d5405f6d97c1bb03dd2bd2b975183b42551cf52f291d5c1921fd5e12f50c8c85a4beb9de03efa3f0f244862243018e6866df922dc313612020311ff21e242ce3fb15bc78c406b25ab43091").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #662: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_494_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdedffbc270f722c243069a7e5f40335a61a58525c7b4db2e7a8e269274ffe4e1bc25f1d166f3e211cdf042a26f8abf6094d48b8d17191d74ed71714927446699965d06dd6a88abfa49e8b4c5da6bb922851969adf9604b5accfb52a114e77ccdb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #663: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_495_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffda25adcae105ed7ff4f95d2344e24ee523314c3e178525d007904b68919ba4d538fe5e88243a76e41a004236218a3c3a2d6eee398a23c3a0b008d7f0164cbc0ca98a20d1bdcf573513c7cfd9b83c63e3a82d40127c897697c86b8cb387af7f240").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #664: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_496_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd2e4348c645707dce6760d773de3f3e87346924b2f64bd3dd0297e766b5805ebb02148256b530fbc470c7b341970b38243ecee6d5a840a37beca2efb37e8dff2cc0adbea0882482a7489ca703a399864ba987eeb6ddb738af53a83573473cb30d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #665: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_497_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd348c673b07dce3920d773de3f3e87408869e916dbcf797d8f9684fb67753d1dca34db012ce6eda1e9c7375c5fcf3e54ed698e19615124273b3a621d021c76f8e777458d6f55a364c221e39e1205d5510bb4fbb7ddf08d8d8fdde13d1d6df7f14").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #666: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_498_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd6918ce760fb9c7241aee7bc7e7d0e8110d3d22db79ef2fb1f2d09f6ceea7a3b8b97af3fe78be15f2912b6271dd8a43badb6dd2a1b315b2ce7ae37b4e7778041d930d71ee1992d2466495c42102d08e81154c305307d1dcd52d0fa4c479b278e7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #667: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_499_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd73b3c694391d8eadde3f3e874089464715ac20e4c126bbf6d864d648969f5b5a81e7198a3c3f23901cedc7a1d6eff6e9bf81108e6c35cd8559139af3135dbcbb9ef1568530291a8061b90c9f4285eefcba990d4570a4e3b7b737525b5d580034").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #668: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_500_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdbb07ac7a86948c2c2989a16db1930ef1b89ce112595197656877e53c41457f28ab4d792ca121d1dba39cb9de645149c2ab573e8becc6ddff3cc9960f188ddf737f90ba23664153e93262ff73355415195858d7be1315a69456386de68285a3c8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #669: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_501_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd27e4d82cb6c061dd9337c69bf9332ed3d198662d6f2299443f62c861187db648518412b69af43aae084476a68d59bbde51fbfa9e5be80563f587c9c2652f88ef2d3b90d25baa6bdb7b0c55e5240a3a98fbc24afed8523edec1c70503fc10f233").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #670: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_502_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffde7c5cf3aac2e88923b77850515fff6a12d13b356dfe9ec275c3dd81ae94609a4a08f14a644b9a935dffea4761ebaf592d1f66fe6cd373aa7f5d370af34f8352da54b5bc4025cf335900a914c2934ec2fec7a396d0a7affcad732a5741c7aaaf5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #671: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_503_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc77838df91c1e953e016e10bddffea2317f9fee32bacfe553cede9e57a748f68ccf2296a6a89b62b90739d38af4ae3a20e9f45715b90044639241061e33f8f8caace0046491eeaa1c6e9a472b96d88f4af83e7ff1bb84438c7e058034412ae08").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #672: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_504_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8ef071c02383d2a6c02dc217bbffd446730d0318b0425e2586220907f885f97f94b0fc1525bcabf82b1f34895e5819a06c02b23e04002276e165f962c86e3927be7c2ab4d0b25303204fb32a1f8292902792225e16a6d2dbfb29fbc89a9c3376").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #673: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_505_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd5668aaa0b545bbf9a044a32399ffbe69ce20074e34d7bdf5cf56282a769763965351f37e1de0c88c508527d89882d183ccdcf2efca407edb0627cadfd16de6ec44b4b57cdf960d32ebcc4c97847eed218425853b5b675eb781b766a1a1300349").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #674: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_506_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdd12d6e56882f6c0027cae91a27127728f7fddf478fb4fdc2b65f40a60b0eb952748bbafc320e6735cb64019710a269c6c2b5d147bdc831325cb2fb276ac971a69d655e9a755bc9d800ad21ee3fd4d980d93a7a49a8c5ccd37005177578f51163").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #675: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_507_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd7fffffffaaaaaaaaffffffffffffffffe9a2538f37b28a2c513dee40fecbb71a14b3bbd75c5e1c0c36535a934d4ab85112410b3b90fa97a31c33038964fd85cc112f7d837f8f9c36b460d636c965a5f818f2b50c5d00fb3f9705561dd6631883").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #676: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_508_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdb62f26b5f2a2b26f6de86d42ad8a13da3ab3cccd0459b201de009e526adf21f2d823533c04cd8edc6d6f950a8e08ade04a9bafa2f14a590356935671ae9305bf43178d1f88b6a57a96924c265f0ddb75b58312907b195acb59d7797303123775").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #677: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_509_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdbb1d9ac949dd748cd02bbbe749bd351cd57b38bb61403d700686aa7b4c90851edb2b3408b3167d91030624c6328e8ce3ec108c105575c2f3d209b92e654bab69c34318139c50b0802c6e612f0fd3189d800df7c996d5d7b7c3d6be82836fa258").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #678: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_510_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd66755a00638cdaec1c732513ca0234ece52545dac11f816e818f725b4f60aaf209179ce7c59225392216453b2ac1e9d178c24837dfae26bc1dd7ab60638527425556b42e330289f3b826b2db7a86d19d45c2860a59f2be1ddcc3b691f95a9255").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #679: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_511_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd55a00c9fcdaebb6032513ca0234ecfffe98ebe492fdf02e48ca48e982beb366901959fb8deda56e5467b7e4b214ea4c2d0c2fb29d70ff19b6b1eccebd6568d7ed9dbd77a918297fd970bff01e1343f6925167db5a14d098a211c39cc3a413398").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #680: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_512_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdab40193f9b5d76c064a27940469d9fffd31d7c925fbe05c919491d3057d66cd2567f1fdc387e5350c852b4e8f8ba9d6d947e1c5dd7ccc61a5938245dd6bcab3a9960bebaf919514f9535c22eaaf0b5812857970e26662267b1f3eb1011130a11").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #681: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_513_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdca0234ebb5fdcb13ca0234ecffffffffcb0dadbbc7f549f8a26b4408d0dc86003499f974ff4ca6bbb2f51682fd5f51762f9dd6dd2855262660b36d46d3e4bec2f498fae2487807e220119152f0122476c64d4fa46ddce85c4546630f0d5c5e81").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #682: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_514_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdbfffffff3ea3677e082b9310572620ae19933a9e65b285598711c77298815ad32c5c01662cf00c1929596257db13b26ecf30d0f3ec4b9f0351b0f27094473426e986a086060d086eee822ddd2fc744247a0154b57f7a69c51d9fdafa484e4ac7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #683: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_515_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd266666663bbbbbbbe6666666666666665b37902e023fab7c8f055d86e5cc41f491d4cba813a04d86dbae94c23be6f52c15774183be7ba5b2d9f3cf010b160501900b8adfea6491019a9ac080d516025a541bf4b952b0ad7be4b1874b02fd544a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #684: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_516_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdbfffffff36db6db7a492492492492492146c573f4c6dfc8d08a443e258970b09ef7fd0a3a36386638330ecad41e1a3b302af36960831d0210c614b948e8aa124ef0d6d800e4047d6d3c1be0fdeaf11fcd8cab5ab59c730eb34116e35a8c7d098").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #685: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_517_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdbfffffff2aaaaaab7fffffffffffffffc815d0e60b3e596ecb1ad3a27cfd49c4a521dab13cc9152d8ca77035a607fea06c55cc3ca5dbeb868cea92eafe93df2a7bfb9b28531996635e6a5ccaa2826a406ce1111bdb9c2e0ca36500418a2f43de").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #686: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_518_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd7fffffff55555555ffffffffffffffffd344a71e6f651458a27bdc81fd976e37474d58a4eec16e0d565f2187fe11d4e8e7a2683a12f38b4fc01d1237a81a10976e55f73bb7cdda46bdb67ef77f6fd2969df2b67920fb5945fde3a517a6ded4cd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #687: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_519_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd3fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192aa692da5cd4309d9a6e5cb525c37da8fa0879f7b57208cdabbf47d223a5b23a62140e0daa78cfdd207a7389aaed61738b17fc5fc3e6a5ed3397d2902e9125e6ab4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #688: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_520_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd5d8ecd64a4eeba466815ddf3a4de9a8e6abd9c5db0a01eb80343553da648428f85689b3e0775c7718a90279f14a8082cfcd4d1f1679274f4e9b8805c570a0670167fcc5ca734552e09afa3640f4a034e15b9b7ca661ec7ff70d3f240ebe705b1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #689: point duplication during verification
#[tokio::test]
async fn p256verify_wycheproof_521_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e256f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569f21d907e3890916dc4fa1f4703c1e50d3f54ddf7383e44023a41de562aa18ed80158137755b901f797a90d4ca8887e023cb2ef63b2ba2c0d455edaef42cf237e2a964fc00d377a8592b8b61aafa7a4aaa7c7b9fd2b41d6e0e17bd1ba5677edcd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #690: duplication bug
#[tokio::test]
async fn p256verify_wycheproof_522_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e256f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569f21d907e3890916dc4fa1f4703c1e50d3f54ddf7383e44023a41de562aa18ed80158137755b901f797a90d4ca8887e023cb2ef63b2ba2c0d455edaef42cf237ed569b03ef2c8857b6d4749e550585b5558384603d4be291f1e842e45a9881232").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #693: comparison with point at infinity
#[tokio::test]
async fn p256verify_wycheproof_523_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25555555550000000055555555555555553ef7a8e48d07df81a693439654210c703333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aa9664ce273320d918d8bdb2e61201b4549b36b7cdc54e33b84adb6f2c10aac831e49e68831f18bda2973ac3d76bfbc8c5ee1cceed2dd862e2dc7c915c736cef1f4").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #694: extreme value for k and edgecase s
#[tokio::test]
async fn p256verify_wycheproof_524_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978555555550000000055555555555555553ef7a8e48d07df81a693439654210c70961691a5e960d07a301dbbad4d86247ec27d7089faeb3ddd1add395efff1e0fe7254622cc371866cdf990d2c5377790e37d1f1519817f09a231bd260a9e78aeb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #695: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_525_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc5d283e13ce8ca60da868e3b0fb33e6b4f1074793274e2928250e71e2aca63e9c214dc74fa25371fb4d9e506d418ed9a1bfd6d0c8bb6591d3e0f44505a84886ce").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #696: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_526_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa70fc351da038ae0803bd1d86514ae0462f9f8216551d9315aa9d297f792eef6a341c74eed786f2d33da35360ca7aa925e753f00d6077a1e9e5fc339d634019c73").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #697: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_527_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc476699783333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaaa1e34c8f16d138673fee55c080547c2bfd4de7550065f638322bba9430ce4b60662be9bb512663aa4d7df8ab3f3b4181c5d44a7bdf42436620b7d8a6b81ac936").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #698: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_528_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc4766997849249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c1857e1a8a8338d7fd8cf41d322a302d2078a87a23c7186150ed7cda6e52817c1bdfd0a9135a89d21ce821e29014b2898349254d748272b2d4eb8d59ee34c615377f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #699: extreme value for k
#[tokio::test]
async fn p256verify_wycheproof_529_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc4766997816a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb5c19fe227a61abc65c61ee7a018cc9571b2c6f663ea33583f76a686f64be078b7b4a0d734940f613d52bc48673b457c2cf78492490a5cc5606c0541d17b24ddb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #700: extreme value for k and edgecase s
#[tokio::test]
async fn p256verify_wycheproof_530_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e256b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296555555550000000055555555555555553ef7a8e48d07df81a693439654210c70db02d1f3421d600e9d9ef9e47419dba3208eed08c2d4189a5db63abeb2739666e0ed26967b9ada9ed7ffe480827f90a0d210d5fd8ec628e31715e6b24125512a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #701: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_531_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e256b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc6222d1962655501893c29e441395b6c05711bd3ed5a0ef72cfab338b88229c4baaae079cb44a1af070362aaa520ee24cac2626423b0bf81af1c54311d8e2fd23").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #702: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_532_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e256b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa74ccfa24c67f3def7fa81bc99c70bb0419c0952ba599f4c03361da184b04cdca5db76b797f7f41d9c729a2219478a7e629728df870800be8cf6ca7a0a82153bfa").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #703: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_533_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e256b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2963333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaaea1c72c91034036bac71402b6e9ecc4af3dbde7a99dc574061e99fefff9d84dab7dd057e75b78ac6f56e34eb048f0a9d29d5d055408c90d02bc2ea918c18cb63").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #704: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_534_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e256b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29649249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185c2879a66d86cb20b820b7795da2da62b38924f7817d1cd350d936988e90e79bc5431a7268ff6931c7a759de024eff90bcb0177216db6fd1f3aaaa11fa3b6a083").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #705: extreme value for k
#[tokio::test]
async fn p256verify_wycheproof_535_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e256b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29616a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bbab1c0f273f74abc2b848c75006f2ef3c54c26df27711b06558f455079aee0ba3df510f2ecef6d9a05997c776f14ad6456c179f0a13af1771e4d6c37fa48b47f2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #706: testing point duplication
#[tokio::test]
async fn p256verify_wycheproof_536_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c26b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2964fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #707: testing point duplication
#[tokio::test]
async fn p256verify_wycheproof_537_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25acd155416a8b77f34089464733ff7cd39c400e9c69af7beb9eac5054ed2ec72c249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c26b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2964fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #708: testing point duplication
#[tokio::test]
async fn p256verify_wycheproof_538_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c26b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296b01cbd1c01e58065711814b583f061e9d431cca994cea1313449bf97c840ae0a").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #709: testing point duplication
#[tokio::test]
async fn p256verify_wycheproof_539_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25acd155416a8b77f34089464733ff7cd39c400e9c69af7beb9eac5054ed2ec72c249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c26b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296b01cbd1c01e58065711814b583f061e9d431cca994cea1313449bf97c840ae0a").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1210: pseudorandom signature
#[tokio::test]
async fn p256verify_wycheproof_540_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023a8ea150cb80125d7381c4c1f1da8e9de2711f9917060406a73d7904519e51388f3ab9fa68bd47973a73b2d40480c2ba50c22c9d76ec217257288293285449b8604aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad587d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1211: pseudorandom signature
#[tokio::test]
async fn p256verify_wycheproof_541_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e2530e782f964b2e2ff065a051bc7adc20615d8c43a1365713c88268822c253bcce5b16df652aa1ecb2dc8b46c515f9604e2e84cacfa7c6eec30428d2d3f4e08ed504aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad587d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1212: pseudorandom signature
#[tokio::test]
async fn p256verify_wycheproof_542_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855b292a619339f6e567a305c951c0dcbcc42d16e47f219f9e98e76e09d8770b34a0177e60492c5a8242f76f07bfe3661bde59ec2a17ce5bd2dab2abebdf89a62e204aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad587d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1213: pseudorandom signature
#[tokio::test]
async fn p256verify_wycheproof_543_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("de47c9b27eb8d300dbb5f2c353e632c393262cf06340c4fa7f1b40c4cbd36f90986e65933ef2ed4ee5aada139f52b70539aaf63f00a91f29c69178490d57fb713dafedfb8da6189d372308cbf1489bbbdabf0c0217d1c0ff0f701aaa7a694b9c04aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad587d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1303: x-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_544_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91d434e262a49eab7781e353a3565e482550dd0fd5defa013c7f29745eff3569f19b0c0a93f267fb6052fd8077be769c2b98953195d7bc10de844218305c6ba17a4f337ccfd67726a805e4f1600ae2849df3807eca117380239fbd816900000000ed9dea124cc8c396416411e988c30f427eb504af43a3146cd5df7ea60666d685").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1304: x-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_545_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f910fe774355c04d060f76d79fd7a772e421463489221bf0a33add0be9b1979110b500dcba1c69a8fbd43fa4f57f743ce124ca8b91a1f325f3fac6181175df557374f337ccfd67726a805e4f1600ae2849df3807eca117380239fbd816900000000ed9dea124cc8c396416411e988c30f427eb504af43a3146cd5df7ea60666d685").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1305: x-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_546_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91bb40bf217bed3fb3950c7d39f03d36dc8e3b2cd79693f125bfd06595ee1135e3541bf3532351ebb032710bdb6a1bf1bfc89a1e291ac692b3fa4780745bb556774f337ccfd67726a805e4f1600ae2849df3807eca117380239fbd816900000000ed9dea124cc8c396416411e988c30f427eb504af43a3146cd5df7ea60666d685").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1306: y-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_547_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91664eb7ee6db84a34df3c86ea31389a5405badd5ca99231ff556d3e75a233e73a59f3c752e52eca46137642490a51560ce0badc678754b8f72e51a2901426a1bd3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f49726500493584fa174d791c72bf2ce3880a8960dd2a7c7a1338a82f85a9e59cdbde80000000").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1307: y-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_548_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f914cd0429bbabd2827009d6fcd843d4ce39c3e42e2d1631fd001985a79d1fd8b439638bf12dd682f60be7ef1d0e0d98f08b7bca77a1a2b869ae466189d2acdabe33cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f49726500493584fa174d791c72bf2ce3880a8960dd2a7c7a1338a82f85a9e59cdbde80000000").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1308: y-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_549_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91e56c6ea2d1b017091c44d8b6cb62b9f460e3ce9aed5e5fd41e8added97c56c04a308ec31f281e955be20b457e463440b4fcf2b80258078207fc1378180f89b553cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f49726500493584fa174d791c72bf2ce3880a8960dd2a7c7a1338a82f85a9e59cdbde80000000").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1309: y-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_550_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f911158a08d291500b4cabed3346d891eee57c176356a2624fb011f8fbbf3466830228a8c486a736006e082325b85290c5bc91f378b75d487dda46798c18f2855193cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f4972650049357b05e8b186e38d41d31c77f5769f22d58385ecc857d07a561a6324217fffffff").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1310: y-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_551_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91b1db9289649f59410ea36b0c0fc8d6aa2687b29176939dd23e0dde56d309fa9d3e1535e4280559015b0dbd987366dcf43a6d1af5c23c7d584e1c3f48a12513363cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f4972650049357b05e8b186e38d41d31c77f5769f22d58385ecc857d07a561a6324217fffffff").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1311: y-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_552_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91b7b16e762286cb96446aa8d4e6e7578b0a341a79f2dd1a220ac6f0ca4e24ed86ddc60a700a139b04661c547d07bbb0721780146df799ccf55e55234ecb8f12bc3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f4972650049357b05e8b186e38d41d31c77f5769f22d58385ecc857d07a561a6324217fffffff").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1312: x-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_553_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91d82a7c2717261187c8e00d8df963ff35d796edad36bc6e6bd1c91c670d9105b43dcabddaf8fcaa61f4603e7cbac0f3c0351ecd5988efb23f680d07debd1399292829c31faa2e400e344ed94bca3fcd0545956ebcfe8ad0f6dfa5ff8effffffffa01aafaf000e52585855afa7676ade284113099052df57e7eb3bd37ebeb9222e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1313: x-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_554_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f915eb9c8845de68eb13d5befe719f462d77787802baff30ce96a5cba063254af782c026ae9be2e2a5e7ca0ff9bbd92fb6e44972186228ee9a62b87ddbe2ef66fb52829c31faa2e400e344ed94bca3fcd0545956ebcfe8ad0f6dfa5ff8effffffffa01aafaf000e52585855afa7676ade284113099052df57e7eb3bd37ebeb9222e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1314: x-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_555_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f9196843dd03c22abd2f3b782b170239f90f277921becc117d0404a8e4e36230c28f2be378f526f74a543f67165976de9ed9a31214eb4d7e6db19e1ede123dd991d2829c31faa2e400e344ed94bca3fcd0545956ebcfe8ad0f6dfa5ff8effffffffa01aafaf000e52585855afa7676ade284113099052df57e7eb3bd37ebeb9222e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1315: x-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_556_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91766456dce1857c906f9996af729339464d27e9d98edc2d0e3b760297067421f6402385ecadae0d8081dccaf5d19037ec4e55376eced699e93646bfbbf19d0b41fffffff948081e6a0458dd8f9e738f2665ff9059ad6aac0708318c4ca9a7a4f55a8abcba2dda8474311ee54149b973cae0c0fb89557ad0bf78e6529a1663bd73").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1316: x-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_557_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91c605c4b2edeab20419e6518a11b2dbc2b97ed8b07cced0b19c34f777de7b9fd9edf0f612c5f46e03c719647bc8af1b29b2cde2eda700fb1cff5e159d47326dbafffffff948081e6a0458dd8f9e738f2665ff9059ad6aac0708318c4ca9a7a4f55a8abcba2dda8474311ee54149b973cae0c0fb89557ad0bf78e6529a1663bd73").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1317: x-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_558_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91d48b68e6cabfe03cf6141c9ac54141f210e64485d9929ad7b732bfe3b7eb8a84feedae50c61bd00e19dc26f9b7e2265e4508c389109ad2f208f0772315b6c941fffffff948081e6a0458dd8f9e738f2665ff9059ad6aac0708318c4ca9a7a4f55a8abcba2dda8474311ee54149b973cae0c0fb89557ad0bf78e6529a1663bd73").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1318: x-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_559_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91b7c81457d4aeb6aa65957098569f0479710ad7f6595d5874c35a93d12a5dd4c7b7961a0b652878c2d568069a432ca18a1a9199f2ca574dad4b9e3a05c0a1cdb300000003fa15f963949d5f03a6f5c7f86f9e0015eeb23aebbff1173937ba748e1099872070e8e87c555fa13659cca5d7fadcfcb0023ea889548ca48af2ba7e71").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1319: x-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_560_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f916b01332ddb6edfa9a30a1321d5858e1ee3cf97e263e669f8de5e9652e76ff3f75939545fced457309a6a04ace2bd0f70139c8f7d86b02cb1cc58f9e69e96cd5a00000003fa15f963949d5f03a6f5c7f86f9e0015eeb23aebbff1173937ba748e1099872070e8e87c555fa13659cca5d7fadcfcb0023ea889548ca48af2ba7e71").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1320: x-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_561_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91efdb884720eaeadc349f9fc356b6c0344101cd2fd8436b7d0e6a4fb93f106361f24bee6ad5dc05f7613975473aadf3aacba9e77de7d69b6ce48cb60d8113385d00000003fa15f963949d5f03a6f5c7f86f9e0015eeb23aebbff1173937ba748e1099872070e8e87c555fa13659cca5d7fadcfcb0023ea889548ca48af2ba7e71").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1321: y-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_562_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f9131230428405560dcb88fb5a646836aea9b23a23dd973dcbe8014c87b8b20eb070f9344d6e812ce166646747694a41b0aaf97374e19f3c5fb8bd7ae3d9bd0beffbcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015000000001352bb4a0fa2ea4cceb9ab63dd684ade5a1127bcf300a698a7193bc2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1322: y-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_563_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91caa797da65b320ab0d5c470cda0b36b294359c7db9841d679174db34c4855743cf543a62f23e212745391aaf7505f345123d2685ee3b941d3de6d9b36242e5a0bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015000000001352bb4a0fa2ea4cceb9ab63dd684ade5a1127bcf300a698a7193bc2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1323: y-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_564_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f917e5f0ab5d900d3d3d7867657e5d6d36519bc54084536e7d21c336ed8001859459450c07f201faec94b82dfb322e5ac676688294aad35aa72e727ff0b19b646aabcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015000000001352bb4a0fa2ea4cceb9ab63dd684ade5a1127bcf300a698a7193bc2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1324: y-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_565_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91d7d70c581ae9e3f66dc6a480bf037ae23f8a1e4a2136fe4b03aa69f0ca25b35689c460f8a5a5c2bbba962c8a3ee833a413e85658e62a59e2af41d9127cc47224bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015fffffffeecad44b6f05d15b33146549c2297b522a5eed8430cff596758e6c43d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1325: y-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_566_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91341c1b9ff3c83dd5e0dfa0bf68bcdf4bb7aa20c625975e5eeee34bb396266b3472b69f061b750fd5121b22b11366fad549c634e77765a017902a67099e0a4469bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015fffffffeecad44b6f05d15b33146549c2297b522a5eed8430cff596758e6c43d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_test.json EcdsaVerify SHA-256 #1326: y-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_567_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f9170bebe684cdcb5ca72a42f0d873879359bd1781a591809947628d313a3814f67aec03aca8f5587a4d535fa31027bbe9cc0e464b1c3577f4c2dcde6b2094798a9bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015fffffffeecad44b6f05d15b33146549c2297b522a5eed8430cff596758e6c43d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #1: signature malleability
#[tokio::test]
async fn p256verify_wycheproof_568_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050232ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e184cd60b855d442f5b3c7b11eb6c4e0ae7525fe710fab9aa7c77a67f79e6fadd762927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #3: Modified r or s, e.g. by adding or subtracting the order of the group
#[tokio::test]
async fn p256verify_wycheproof_569_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023d45c5740946b2a147f59262ee6f5bc90bd01ed280528b62b3aed5fc93f06f739b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #5: Modified r or s, e.g. by adding or subtracting the order of the group
#[tokio::test]
async fn p256verify_wycheproof_570_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023d45c5741946b2a137f59262ee6f5bc91001af27a5e1117a64733950642a3d1e8b329f479a2bbd0a5c384ee1493b1f5186a87139cac5df4087c134b49156847db2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #8: Modified r or s, e.g. by adding or subtracting the order of the group
#[tokio::test]
async fn p256verify_wycheproof_571_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050232ba3a8be6b94d5ec80a6d9d1190a436effe50d85a1eee859b8cc6af9bd5c2e184cd60b865d442f5a3c7b11eb6c4e0ae79578ec6353a20bf783ecb4b6ea97b8252927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #9: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_572_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #10: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_573_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #11: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_574_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000000ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #12: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_575_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000000ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #13: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_576_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000000ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #14: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_577_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000000ffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #15: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_578_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000000ffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #16: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_579_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #17: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_580_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000012927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #18: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_581_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000001ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #19: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_582_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000001ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #20: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_583_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000001ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #21: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_584_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000001ffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #22: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_585_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca6050230000000000000000000000000000000000000000000000000000000000000001ffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #23: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_586_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255100000000000000000000000000000000000000000000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #24: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_587_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255100000000000000000000000000000000000000000000000000000000000000012927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #25: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_588_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #26: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_589_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #27: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_590_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #28: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_591_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551ffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #29: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_592_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551ffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #30: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_593_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255000000000000000000000000000000000000000000000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #31: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_594_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255000000000000000000000000000000000000000000000000000000000000000012927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #32: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_595_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #33: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_596_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #34: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_597_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #35: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_598_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550ffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #36: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_599_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632550ffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #37: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_600_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255200000000000000000000000000000000000000000000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #38: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_601_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255200000000000000000000000000000000000000000000000000000000000000012927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #39: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_602_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #40: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_603_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #41: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_604_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #42: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_605_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552ffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #43: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_606_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632552ffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #44: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_607_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #45: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_608_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000012927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #46: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_609_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffffffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #47: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_610_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffffffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #48: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_611_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffffffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #49: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_612_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffffffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #50: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_613_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000000ffffffffffffffffffffffffffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #51: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_614_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff0000000100000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #52: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_615_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff0000000100000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000012927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #53: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_616_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000001000000000000000000000000ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325512927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #54: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_617_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000001000000000000000000000000ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #55: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_618_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000001000000000000000000000000ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6325522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #56: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_619_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000001000000000000000000000000ffffffff00000001000000000000000000000000ffffffffffffffffffffffff2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #57: Signature with special case values for r and s
#[tokio::test]
async fn p256verify_wycheproof_620_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023ffffffff00000001000000000000000000000001000000000000000000000000ffffffff000000010000000000000000000000010000000000000000000000002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #58: Edge case for Shamir multiplication
#[tokio::test]
async fn p256verify_wycheproof_621_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("70239dd877f7c944c422f44dea4ed1a52f2627416faf2f072fa50c772ed6f80764a1aab5000d0e804f3e2fc02bdee9be8ff312334e2ba16d11547c97711c898e6af015971cc30be6d1a206d4e013e0997772a2f91d73286ffd683b9bb2cf4f1b2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #59: special case hash
#[tokio::test]
async fn p256verify_wycheproof_622_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("00000000690ed426ccf17803ebe2bd0884bcd58a1bb5e7477ead3645f356e7a916aea964a2f6506d6f78c81c91fc7e8bded7d397738448de1e19a0ec580bf266252cd762130c6667cfe8b7bc47d27d78391e8e80c578d1cd38c3ff033be928e92927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #60: special case hash
#[tokio::test]
async fn p256verify_wycheproof_623_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7300000000213f2a525c6035725235c2f696ad3ebb5ee47f140697ad25770d919cc98be2347d469bf476dfc26b9b733df2d26d6ef524af917c665baccb23c882093496459effe2d8d70727b82462f61d0ec1b7847929d10ea631dacb16b56c322927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #61: special case hash
#[tokio::test]
async fn p256verify_wycheproof_624_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ddf2000000005e0be0635b245f0b97978afd25daadeb3edb4a0161c27fe0604573b3c90ecd390028058164524dde892703dce3dea0d53fa8093999f07ab8aa432f67b0b8e20636695bb7d8bf0a651c802ed25a395387b5f4188c0c4075c886342927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #62: special case hash
#[tokio::test]
async fn p256verify_wycheproof_625_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("67ab1900000000784769c4ecb9e164d6642b8499588b89855be1ec355d0841a0bfab3098252847b328fadf2f89b95c851a7f0eb390763378f37e90119d5ba3ddbdd64e234e832b1067c2d058ccb44d978195ccebb65c2aaf1e2da9b8b4987e3b2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #63: special case hash
#[tokio::test]
async fn p256verify_wycheproof_626_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a2bf09460000000076d7dbeffe125eaf02095dff252ee905e296b6350fc311cf204a9784074b246d8bf8bf04a4ceb1c1f1c9aaab168b1596d17093c5cd21d2cd51cce41670636783dc06a759c8847868a406c2506fe17975582fe648d1d88b522927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #64: special case hash
#[tokio::test]
async fn p256verify_wycheproof_627_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3554e827c700000000e1e75e624a06b3a0a353171160858129e15c544e4f0e65ed66dc34f551ac82f63d4aa4f81fe2cb0031a91d1314f835027bca0f1ceeaa0399ca123aa09b13cd194a422e18d5fda167623c3f6e5d4d6abb8953d67c0c48c72927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #65: special case hash
#[tokio::test]
async fn p256verify_wycheproof_628_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9b6cd3b812610000000026941a0f0bb53255ea4c9fd0cb3426e3a54b9fc6965c060b700bef665c68899d44f2356a578d126b062023ccc3c056bf0f60a237012b8d186c027832965f4fcc78a3366ca95dedbb410cbef3f26d6be5d581c11d36102927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #66: special case hash
#[tokio::test]
async fn p256verify_wycheproof_629_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("883ae39f50bf0100000000e7561c26fc82a52baa51c71ca877162f93c4ae01869f6adfe8d5eb5b2c24d7aa7934b6cf29c93ea76cd313c9132bb0c8e38c96831db26a9c9e40e55ee0890c944cf271756c906a33e66b5bd15e051593883b5e99022927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #67: special case hash
#[tokio::test]
async fn p256verify_wycheproof_630_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a1ce5d6e5ecaf28b0000000000fa7cd010540f420fb4ff7401fe9fce011d0ba6a1af03ca91677b673ad2f33615e56174a1abf6da168cebfa8868f4ba273f16b720aa73ffe48afa6435cd258b173d0c2377d69022e7d098d75caf24c8c5e06b1c2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #68: special case hash
#[tokio::test]
async fn p256verify_wycheproof_631_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8ea5f645f373f580930000000038345397330012a8ee836c5494cdffd5ee8054fdc70602766f8eed11a6c99a71c973d5659355507b843da6e327a28c11893db93df5349688a085b137b1eacf456a9e9e0f6d15ec0078ca60a7f83f2b10d213502927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #69: special case hash
#[tokio::test]
async fn p256verify_wycheproof_632_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("660570d323e9f75fa734000000008792d65ce93eabb7d60d8d9c1bbdcb5ef305b516a314f2fce530d6537f6a6c49966c23456f63c643cf8e0dc738f7b876e675d39ffd033c92b6d717dd536fbc5efdf1967c4bd80954479ba66b0120cd16fff22927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #70: special case hash
#[tokio::test]
async fn p256verify_wycheproof_633_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d0462673154cce587dde8800000000e98d35f1f45cf9c3bf46ada2de4c568c343b2cbf046eac45842ecb7984d475831582717bebb6492fd0a485c101e29ff0a84c9b7b47a98b0f82de512bc9313aaf51701099cac5f76e68c8595fc1c1d992582927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #71: special case hash
#[tokio::test]
async fn p256verify_wycheproof_634_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bd90640269a7822680cedfef000000000caef15a6171059ab83e7b4418d7278f30c87d35e636f540841f14af54e2f9edd79d0312cfa1ab656c3fb15bfde48dcf47c15a5a82d24b75c85a692bd6ecafeb71409ede23efd08e0db9abf6340677ed2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #72: special case hash
#[tokio::test]
async fn p256verify_wycheproof_635_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("33239a52d72f1311512e41222a00000000d2dcceb301c54b4beae8e284788a7338686ff0fda2cef6bc43b58cfe6647b9e2e8176d168dec3c68ff262113760f52067ec3b651f422669601662167fa8717e976e2db5e6a4cf7c2ddabb3fde9d67d2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #73: special case hash
#[tokio::test]
async fn p256verify_wycheproof_636_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("b8d64fbcd4a1c10f1365d4e6d95c000000007ee4a21a1cbe1dc84c2d941ffaf144a3e23bf314f2b344fc25c7f2de8b6af3e17d27f5ee844b225985ab6e2775cf2d48e223205e98041ddc87be532abed584f0411f5729500493c9cc3f4dd15e862927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #74: special case hash
#[tokio::test]
async fn p256verify_wycheproof_637_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("01603d3982bf77d7a3fef3183ed092000000003a227420db4088b20fe0e9d84a2ded5b7ec8e90e7bf11f967a3d95110c41b99db3b5aa8d330eb9d638781688e97d5792c53628155e1bfc46fb1a67e3088de049c328ae1f44ec69238a009808f92927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #75: special case hash
#[tokio::test]
async fn p256verify_wycheproof_638_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9ea6994f1e0384c8599aa02e6cf66d9c000000004d89ef50b7e9eb0cfbff7363bdae7bcb580bf335efd3bc3d31870f923eaccafcd40ec2f605976f15137d8b8ff6dfa12f19e525270b0106eecfe257499f373a4fb318994f24838122ce7ec3c72927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #76: special case hash
#[tokio::test]
async fn p256verify_wycheproof_639_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d03215a8401bcf16693979371a01068a4700000000e2fa5bf692bc670905b18c50f9c4f0cd6940e162720957ffff513799209b78596956d21ece251c2401f1c6d7033a0a787d338e889defaaabb106b95a4355e411a59c32aa5167dfab2447262927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #77: special case hash
#[tokio::test]
async fn p256verify_wycheproof_640_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("307bfaaffb650c889c84bf83f0300e5dc87e000000008408fd5f64b582e3bb14f612820687604fa01906066a378d67540982e29575d019aabe90924ead5c860d3f9367702dd7dd4f75ea98afd20e328a1a99f4857b316525328230ce294b0fef2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #78: special case hash
#[tokio::test]
async fn p256verify_wycheproof_641_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bab5c4f4df540d7b33324d36bb0c157551527c00000000e4af574bb4d54ea6b89505e407657d6e8bc93db5da7aa6f5081f61980c1949f56b0f2f507da5782a7ac60d31904e3669738ffbeccab6c3656c08e0ed5cb92b3cfa5e7f71784f9c50212927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #79: special case hash
#[tokio::test]
async fn p256verify_wycheproof_642_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d4ba47f6ae28f274e4f58d8036f9c36ec2456f5b00000000c3b869197ef5e15ebbd16fbbb656b6d0d83e6a7787cd691b08735aed371732723e1c68a40404517d9d8e35dba96028b7787d91315be675877d2d097be5e8ee34560e3e7fd25c0f002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #80: special case hash
#[tokio::test]
async fn p256verify_wycheproof_643_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("79fd19c7235ea212f29f1fa00984342afe0f10aafd00000000801e47f8c184e12ec9760122db98fd06ea76848d35a6da442d2ceef7559a30cf57c61e92df327e7ab271da90859479701fccf86e462ee3393fb6814c27b760c4963625c0a198782927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #81: special case hash
#[tokio::test]
async fn p256verify_wycheproof_644_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8c291e8eeaa45adbaf9aba5c0583462d79cbeb7ac97300000000a37ea6700cda54e76b7683b6650baa6a7fc49b1c51eed9ba9dd463221f7a4f1005a89fe00c592ea076886c773eb937ec1cc8374b7915cfd11b1c1ae1166152f2f7806a31c8fd2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #82: special case hash
#[tokio::test]
async fn p256verify_wycheproof_645_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0eaae8641084fa979803efbfb8140732f4cdcf66c3f78a000000003c278a6b215291deaf24659ffbbce6e3c26f6021097a74abdbb69be4fb10419c0c496c946665d6fcf336d27cc7cdb982bb4e4ecef5827f84742f29f10abf83469270a03dc32927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #83: special case hash
#[tokio::test]
async fn p256verify_wycheproof_646_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e02716d01fb23a5a0068399bf01bab42ef17c6d96e13846c00000000afc0f89d207a3241812d75d947419dc58efb05e8003b33fc17eb50f9d15166a88479f107cdee749f2e492b213ce80b32d0574f62f1c5d70793cf55e382d5caadf75927672927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #84: special case hash
#[tokio::test]
async fn p256verify_wycheproof_647_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("9eb0bf583a1a6b9a194e9a16bc7dab2a9061768af89d00659a00000000fc7de16554e49f82a855204328ac94913bf01bbe84437a355a0a37c0dee3cf81aa7728aea00de2507ddaf5c94e1e126980d3df16250a2eaebc8be486effe7f22b4f9292927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #85: special case hash
#[tokio::test]
async fn p256verify_wycheproof_648_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("62aac98818b3b84a2c214f0d5e72ef286e1030cb53d9a82b690e00000000cd15a54c5062648339d2bff06f71c88216c26c6e19b4d80a8c602990ac82707efdfce99bbe7fcfafae3e69fd016777517aa01056317f467ad09aff09be73c9731b0d2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #86: special case hash
#[tokio::test]
async fn p256verify_wycheproof_649_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3760a7f37cf96218f29ae43732e513efd2b6f552ea4b6895464b9300000000c8975bd7157a8d363b309f1f444012b1a1d23096593133e71b4ca8b059cff37eaf7faa7a28b1c822baa241793f2abc930bd4c69840fe090f2aacc46786bf9196222927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #87: special case hash
#[tokio::test]
async fn p256verify_wycheproof_650_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0da0a1d2851d33023834f2098c0880096b4320bea836cd9cbb6ff6c8000000005694a6f84b8f875c276afd2ebcfe4d61de9ec90305afb1357b95b3e0da43885e0dffad9ffd0b757d8051dec02ebdf70d8ee2dc5c7870c0823b6ccc7c679cbaa42927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #88: special case hash
#[tokio::test]
async fn p256verify_wycheproof_651_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ffffffff293886d3086fd567aafd598f0fe975f735887194a764a231e82d289aa0c30e8026fdb2b4b4968a27d16a6d08f7098f1a98d21620d7454ba9790f1ba65e470453a8a399f15baf463f9deceb53acc5ca64459149688bd2760c654243392927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #89: special case hash
#[tokio::test]
async fn p256verify_wycheproof_652_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7bffffffff2376d1e3c03445a072e24326acdc4ce127ec2e0e8d9ca99527e7b7614ea84acf736527dd73602cd4bb4eea1dfebebd5ad8aca52aa0228cf7b99a88737cc85f5f2d2f60d1b8183f3ed490e4de14368e96a9482c2a4dd193195c902f2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #90: special case hash
#[tokio::test]
async fn p256verify_wycheproof_653_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("a2b5ffffffffebb251b085377605a224bc80872602a6e467fd016807e97fa395bead6734ebe44b810d3fb2ea00b1732945377338febfd439a8d74dfbd0f942fa6bb18eae36616a7d3cad35919fd21a8af4bbe7a10f73b3e036a46b103ef56e2a2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #91: special case hash
#[tokio::test]
async fn p256verify_wycheproof_654_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("641227ffffffff6f1b96fa5f097fcf3cc1a3c256870d45a67b83d0967d4b20c0499625479e161dacd4db9d9ce64854c98d922cbf212703e9654fae182df9bad242c177cf37b8193a0131108d97819edd9439936028864ac195b64fca76d9d6932927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #92: special case hash
#[tokio::test]
async fn p256verify_wycheproof_655_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("958415d8ffffffffabad03e2fc662dc3ba203521177502298df56f36600e0f8b08f16b8093a8fb4d66a2c8065b541b3d31e3bfe694f6b89c50fb1aaa6ff6c9b29d6455e2d5d1779748573b611cb95d4a21f967410399b39b535ba3e5af81ca2e2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #93: special case hash
#[tokio::test]
async fn p256verify_wycheproof_656_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("f1d8de4858ffffffff1281093536f47fe13deb04e1fbe8fb954521b6975420f8be26231b6191658a19dd72ddb99ed8f8c579b6938d19bce8eed8dc2b338cb5f8e1d9a32ee56cffed37f0f22b2dcb57d5c943c14f79694a03b9c5e96952575c892927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #94: special case hash
#[tokio::test]
async fn p256verify_wycheproof_657_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("0927895f2802ffffffff10782dd14a3b32dc5d47c05ef6f1876b95c81fc31def15e76880898316b16204ac920a02d58045f36a229d4aa4f812638c455abe0443e74d357d3fcb5c8c5337bd6aba4178b455ca10e226e13f9638196506a19391232927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #95: special case hash
#[tokio::test]
async fn p256verify_wycheproof_658_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("60907984aa7e8effffffff4f332862a10a57c3063fb5a30624cf6a0c3ac80589352ecb53f8df2c503a45f9846fc28d1d31e6307d3ddbffc1132315cc07f16dad1348dfa9c482c558e1d05c5242ca1c39436726ecd28258b1899792887dd0a3c62927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #96: special case hash
#[tokio::test]
async fn p256verify_wycheproof_659_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("c6ff198484939170ffffffff0af42cda50f9a5f50636ea6942d6b9b8cd6ae1e24a40801a7e606ba78a0da9882ab23c7677b8642349ed3d652c5bfa5f2a9558fb3a49b64848d682ef7f605f2832f7384bdc24ed2925825bf8ea77dc59817257822927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #97: special case hash
#[tokio::test]
async fn p256verify_wycheproof_660_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("de030419345ca15c75ffffffff8074799b9e0956cc43135d16dfbe4d27d7e68deacc5e1a8304a74d2be412b078924b3bb3511bac855c05c9e5e9e44df3d61e967451cd8e18d6ed1885dd827714847f96ec4bb0ed4c36ce9808db8f714204f6d12927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #98: special case hash
#[tokio::test]
async fn p256verify_wycheproof_661_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6f0e3eeaf42b28132b88fffffffff6c8665604d34acb19037e1ab78caaaac6ff2f7a5e9e5771d424f30f67fdab61e8ce4f8cd1214882adb65f7de94c31577052ac4e69808345809b44acb0b2bd889175fb75dd050c5a449ab9528f8f78daa10c2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #99: special case hash
#[tokio::test]
async fn p256verify_wycheproof_662_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("cdb549f773b3e62b3708d1ffffffffbe48f7c0591ddcae7d2cb222d1f8017ab9ffcda40f792ce4d93e7e0f0e95e1a2147dddd7f6487621c30a03d710b330021979938b55f8a17f7ed7ba9ade8f2065a1fa77618f0b67add8d58c422c2453a49a2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #100: special case hash
#[tokio::test]
async fn p256verify_wycheproof_663_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2c3f26f96a3ac0051df4989bffffffff9fd64886c1dc4f9924d8fd6f0edb048481f2359c4faba6b53d3e8c8c3fcc16a948350f7ab3a588b28c17603a431e39a8cd6f6a5cc3b55ead0ff695d06c6860b509e46d99fccefb9f7f9e101857f743002927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #101: special case hash
#[tokio::test]
async fn p256verify_wycheproof_664_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("ac18f8418c55a2502cb7d53f9affffffff5c31d89fda6a6b8476397c04edf411dfc8bf520445cbb8ee1596fb073ea283ea130251a6fdffa5c3f5f2aaf75ca808048e33efce147c9dd92823640e338e68bfd7d0dc7a4905b3a7ac711e577e90e72927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #102: special case hash
#[tokio::test]
async fn p256verify_wycheproof_665_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("4f9618f98e2d3a15b24094f72bb5ffffffffa2fd3e2893683e5a6ab8cf0ee610ad019f74c6941d20efda70b46c53db166503a0e393e932f688227688ba6a576293320eb7ca0710255346bdbb3102cdcf7964ef2e0988e712bc05efe16c1993452927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #103: special case hash
#[tokio::test]
async fn p256verify_wycheproof_666_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("422e82a3d56ed10a9cc21d31d37a25ffffffff67edf7c40204caae73ab0bc75aac8096842e8add68c34e78ce11dd71e4b54316bd3ebf7fffdeb7bd5a3ebc1883f5ca2f4f23d674502d4caf85d187215d36e3ce9f0ce219709f21a3aac003b7a82927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #104: special case hash
#[tokio::test]
async fn p256verify_wycheproof_667_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("7075d245ccc3281b6e7b329ff738fbb417a5ffffffffa0842d9890b5cf95d018677b2d3a59b18a5ff939b70ea002250889ddcd7b7b9d776854b4943693fb92f76b4ba856ade7677bf30307b21f3ccda35d2f63aee81efd0bab6972cc0795db552927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #105: special case hash
#[tokio::test]
async fn p256verify_wycheproof_668_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("3c80de54cd9226989443d593fa4fd6597e280ebeffffffffc1847eb76c217a95479e1ded14bcaed0379ba8e1b73d3115d84d31d4b7c30e1f05e1fc0d5957cfb0918f79e35b3d89487cf634a4f05b2e0c30857ca879f97c771e877027355b24432927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #106: special case hash
#[tokio::test]
async fn p256verify_wycheproof_669_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("de21754e29b85601980bef3d697ea2770ce891a8cdffffffffc7906aa794b39b43dfccd0edb9e280d9a58f01164d55c3d711e14b12ac5cf3b64840ead512a0a31dbe33fa8ba84533cd5c4934365b3442ca1174899b78ef9a3199f495843897722927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #107: special case hash
#[tokio::test]
async fn p256verify_wycheproof_670_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("8f65d92927cfb86a84dd59623fb531bb599e4d5f7289ffffffff2f1f2f57881c5b09ab637bd4caf0f4c7c7e4bca592fea20e9087c259d26a38bb4085f0bbff1145b7eb467b6748af618e9d80d6fdcd6aa24964e5a13f885bca8101de08eb0d752927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #108: special case hash
#[tokio::test]
async fn p256verify_wycheproof_671_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("6b63e9a74e092120160bea3877dace8a2cc7cd0e8426cbfffffffffafc8c3ca85e9b1c5a028070df5728c5c8af9b74e0667afa570a6cfa0114a5039ed15ee06fb1360907e2d9785ead362bb8d7bd661b6c29eeffd3c5037744edaeb9ad990c202927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #109: special case hash
#[tokio::test]
async fn p256verify_wycheproof_672_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("fc28259702a03845b6d75219444e8b43d094586e249c8699ffffffffe852512e0671a0a85c2b72d54a2fb0990e34538b4890050f5a5712f6d1a7a5fb8578f32edb1846bab6b7361479ab9c3285ca41291808f27fd5bd4fdac720e5854713694c2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #110: special case hash
#[tokio::test]
async fn p256verify_wycheproof_673_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("1273b4502ea4e3bccee044ee8e8db7f774ecbcd52e8ceb571757ffffffffe20a7673f8526748446477dbbb0590a45492c5d7d69859d301abbaedb35b2095103a3dc70ddf9c6b524d886bed9e6af02e0e4dec0d417a414fed3807ef4422913d7c2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #111: special case hash
#[tokio::test]
async fn p256verify_wycheproof_674_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("08fb565610a79baa0c566c66228d81814f8c53a15b96e602fb49ffffffffff6e7f085441070ecd2bb21285089ebb1aa6450d1a06c36d3ff39dfd657a796d12b5249712012029870a2459d18d47da9aa492a5e6cb4b2d8dafa9e4c5c54a2b9a8b2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #112: special case hash
#[tokio::test]
async fn p256verify_wycheproof_675_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("d59291cc2cf89f3087715fcb1aa4e79aa2403f748e97d7cd28ecaefeffffffff914c67fb61dd1e27c867398ea7322d5ab76df04bc5aa6683a8e0f30a5d287348fa07474031481dda4953e3ac1959ee8cea7e66ec412b38d6c96d28f6d37304ea2927b10512bae3eddcfe467828128bad2903269919f7086069c8c4df6c732838c7787964eaac00e5921fb1498a60f4606766b3d9685001558d1a974e7341513e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #113: k*G has a large x-coordinate
#[tokio::test]
async fn p256verify_wycheproof_676_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25000000000000000000000000000000004319055358e8617b0c46353d039cdaabffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254ed705d16f80987e2d9b1a6957d29ce22febf7d10fa515153182415c8361baaca4b1fc105ee5ce80d514ec1238beae2037a6f83625593620d460819e8682160926").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #114: r too large
#[tokio::test]
async fn p256verify_wycheproof_677_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25ffffffff00000001000000000000000000000000fffffffffffffffffffffffcffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254ed705d16f80987e2d9b1a6957d29ce22febf7d10fa515153182415c8361baaca4b1fc105ee5ce80d514ec1238beae2037a6f83625593620d460819e8682160926").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #115: r,s are large
#[tokio::test]
async fn p256verify_wycheproof_678_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254fffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63254e3cd8d2f81d6953b0844c09d7b560d527cd2ef67056893eadafa52c8501387d59ee41fdb4d10402ce7a0c5e3b747adfa3a490b62a6b7719068903485c0bb6dc2d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #116: r and s^-1 have a large Hamming weight
#[tokio::test]
async fn p256verify_wycheproof_679_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd909135bdb6799286170f5ead2de4f6511453fe50914f3df2de54a36383df8dd48240cd81edd91cb6936133508c3915100e81f332c4545d41189b481196851378e05b06e72d4a1bff80ea5db514aa2f93ea6dd6d9c0ae27b7837dc432f9ce89d9").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #117: r and s^-1 have a large Hamming weight
#[tokio::test]
async fn p256verify_wycheproof_680_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd27b4577ca009376f71303fd5dd227dcef5deb773ad5f5a84360644669ca249a5b062947356748b0fc17f1704c65aa1dca6e1bfe6779756fa616d91eaad13df2c0b38c17f3d0672e7409cfc5992a99fff12b84a4f8432293b431113f1b2fb579d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #118: small r and s
#[tokio::test]
async fn p256verify_wycheproof_681_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000014a03ef9f92eb268cafa601072489a56380fa0dc43171d7712813b3a19a1eb5e53e213e28a608ce9a2f4a17fd830c6654018a79b3e0263d91a8ba90622df6f2f0").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #120: small r and s
#[tokio::test]
async fn p256verify_wycheproof_682_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e2500000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000003091194c1cba17f34e286b4833701606a41cef26177ada8850b601ea1f859e70127242fcec708828758403ce2fe501983a7984e6209f4d6b95db9ad77767f55eb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #122: small r and s
#[tokio::test]
async fn p256verify_wycheproof_683_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e2500000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000005103c6ecceff59e71ea8f56fee3a4b2b148e81c2bdbdd39c195812c96dcfb41a72303a193dc591be150b883d770ec51ebb4ebce8b09042c2ecb16c448d8e57bf5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #124: small r and s
#[tokio::test]
async fn p256verify_wycheproof_684_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000063b66b829fe604638bcb2bfe8c22228be67390c20111bd2b451468927e87fb6eabc8e59c009361758b274ba2cad36b58fde485a3ed09dade76712fa9e9c4ac212").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #126: r is larger than n
#[tokio::test]
async fn p256verify_wycheproof_685_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc63255600000000000000000000000000000000000000000000000000000000000000063b66b829fe604638bcb2bfe8c22228be67390c20111bd2b451468927e87fb6eabc8e59c009361758b274ba2cad36b58fde485a3ed09dade76712fa9e9c4ac212").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #127: s is larger than n
#[tokio::test]
async fn p256verify_wycheproof_686_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e250000000000000000000000000000000000000000000000000000000000000005ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc75fbd84ff2f6c24e4a33cd71c09fdcbc74a6233961b874b8c8e0eb94582092cbc50c3084fa9547afda5c66335f3f937d4c79afa120486b534139d59ae82d61ead26420").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #128: small r and s^-1
#[tokio::test]
async fn p256verify_wycheproof_687_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e2500000000000000000000000000000000000000000000000000000000000001008f1e3c7862c58b16bb76eddbb76eddbb516af4f63f2d74d76e0d28c9bb75ea8884b959080bb30859cd53c2fb973cf14d60cdaa8ee00587889b5bc657ac588175a02ce5c1e53cb196113c78b4cb8dc7d360e5ea7850b0f6650b0c45af2c3cd7ca").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #129: smallish r and s^-1
#[tokio::test]
async fn p256verify_wycheproof_688_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25000000000000000000000000000000000000000000000000002d9b4d347952d6ef3043e7329581dbb3974497710ab11505ee1c87ff907beebadd195a0ffe6d7adf4083bd6ecbda5a77ae578e5d835fa7f74a07ebb91e0570e1ff32a563354e9925af80b09a167d9ef647df28e2d9acd0d4bc4f2deec5723818edaf9071e311f8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #130: 100-bit r and small s^-1
#[tokio::test]
async fn p256verify_wycheproof_689_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25000000000000000000000000000000000000001033e67e37b32b445580bf4eff8b748b74000000008b748b748b748b7466e769ad4a16d3dcd87129b8e91d1b4dc2569a3c9bf8c1838ca821f7ba6f000cc8679d278f3736b414a34a7c956a03770387ea85bc4f28804b4a91c9b7d65bc6434c975806795ab7d441a4e9683aeb09").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #131: small r and 100 bit s^-1
#[tokio::test]
async fn p256verify_wycheproof_690_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e250000000000000000000000000000000000000000000000000000000000000100ef9f6ba4d97c09d03178fa20b4aaad83be3cf9cb824a879fec3270fc4b81ef5b4a9f7da2a6c359a16540c271774a6bf1c586357c978256f44a6496d80670968ac496e73a44563f8d56fbd7bb9e4e3ae304c86f2c508eb777b03924755beb40d4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #132: 100-bit r and s^-1
#[tokio::test]
async fn p256verify_wycheproof_691_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e2500000000000000000000000000000000000000062522bbd3ecbe7c39e93e7c25ef9f6ba4d97c09d03178fa20b4aaad83be3cf9cb824a879fec3270fc4b81ef5b874146432b3cd2c9e26204c0a34136996067d466dde4917a8ff23a8e95ca106b709b3d50976ef8b385a813bc35f3a20710bdc6edd465e6f43ac4866703a6608c").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #133: r and s^-1 are close to n
#[tokio::test]
async fn p256verify_wycheproof_692_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc6324d5555555550000000055555555555555553ef7a8e48d07df81a693439654210c707a736d8e326a9ca62bbe25a34ea4e3633b499a96afa7aaa3fcf3fd88f8e07edeb3e45879d8622b93e818443a686e869eeda7bf9ae46aa3eafcc48a5934864627").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #134: s == 1
#[tokio::test]
async fn p256verify_wycheproof_693_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25555555550000000055555555555555553ef7a8e48d07df81a693439654210c700000000000000000000000000000000000000000000000000000000000000001e84d9b232e971a43382630f99725e423ec1ecb41e55172e9c69748a03f0d5988618b15b427ad83363bd041ff75fac98ef2ee923714e7d1dfe31753793c7588d4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #135: s == 0
#[tokio::test]
async fn p256verify_wycheproof_694_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25555555550000000055555555555555553ef7a8e48d07df81a693439654210c700000000000000000000000000000000000000000000000000000000000000000e84d9b232e971a43382630f99725e423ec1ecb41e55172e9c69748a03f0d5988618b15b427ad83363bd041ff75fac98ef2ee923714e7d1dfe31753793c7588d4").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #136: point at infinity during verify
#[tokio::test]
async fn p256verify_wycheproof_695_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a8555555550000000055555555555555553ef7a8e48d07df81a693439654210c700203736fcb198b15d8d7a0c80f66dddd15259240aa78d08aae67c467de04503434383438d5041ea9a387ee8e4d4e84b4471b160c6bcf2568b072f8f20e87a996").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #137: edge case for signature malleability
#[tokio::test]
async fn p256verify_wycheproof_696_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a97fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a878d844dc7f16b73b1f2a39730da5d8cd99fe2e70a18482384e37dcd2bfea02e1ed6572e01eb7a8d113d02c666c45ef22d3b9a6a6dea99aa43a8183c26e75d336").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #138: edge case for signature malleability
#[tokio::test]
async fn p256verify_wycheproof_697_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a97fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192a9dec6c8257dde94110eacc8c09d2e5789cc5beb81a958b02b4d62da9599a7401466fae1614174be63970b83f6524421067b06dd6f4e9c56baca4e344fdd690f1d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #139: u1 == 1
#[tokio::test]
async fn p256verify_wycheproof_698_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25555555550000000055555555555555553ef7a8e48d07df81a693439654210c70532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25a17f5b75a35ed64623ca5cbf1f91951292db0c23f0c2ea24c3d0cad0988cabc083a7a618625c228940730b4fa3ee64faecbb2fc20fdde7c58b3a3f6300424dc6").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #140: u1 == n - 1
#[tokio::test]
async fn p256verify_wycheproof_699_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25555555550000000055555555555555553ef7a8e48d07df81a693439654210c70acd155416a8b77f34089464733ff7cd39c400e9c69af7beb9eac5054ed2ec72c04ba0cba291a37db13f33bf90dab628c04ec8393a0200419e9eaa1ebcc9fb5c31f3a0a0e6823a49b625ad57b12a32d4047970fc3428f0f0049ecf4265dc12f62").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #141: u2 == 1
#[tokio::test]
async fn p256verify_wycheproof_700_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25555555550000000055555555555555553ef7a8e48d07df81a693439654210c70555555550000000055555555555555553ef7a8e48d07df81a693439654210c70692b6c828e0feed63d8aeaa2b7322f9ccbe8723a1ed39f229f204a434b8900efa1f6f6abcb38ea3b8fde38b98c7c271f274af56a8c5628dc3329069ae4dd5716").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #142: u2 == n - 1
#[tokio::test]
async fn p256verify_wycheproof_701_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25555555550000000055555555555555553ef7a8e48d07df81a693439654210c70aaaaaaaa00000000aaaaaaaaaaaaaaaa7def51c91a0fbf034d26872ca84218e100cefd9162d13e64cb93687a9cd8f9755ebb5a3ef7632f800f84871874ccef09543ecbeaf7e8044ef721be2fb5f549e4b8480d2587404ebf7dbbef2c54bc0cb1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #143: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_702_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd710f8e3edc7c2d5a3fd23de844002bb949d9f794f6d5405f6d97c1bb03dd2bd2b975183b42551cf52f291d5c1921fd5e12f50c8c85a4beb9de03efa3f0f244862243018e6866df922dc313612020311ff21e242ce3fb15bc78c406b25ab43091").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #144: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_703_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdedffbc270f722c243069a7e5f40335a61a58525c7b4db2e7a8e269274ffe4e1bc25f1d166f3e211cdf042a26f8abf6094d48b8d17191d74ed71714927446699965d06dd6a88abfa49e8b4c5da6bb922851969adf9604b5accfb52a114e77ccdb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #145: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_704_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffda25adcae105ed7ff4f95d2344e24ee523314c3e178525d007904b68919ba4d538fe5e88243a76e41a004236218a3c3a2d6eee398a23c3a0b008d7f0164cbc0ca98a20d1bdcf573513c7cfd9b83c63e3a82d40127c897697c86b8cb387af7f240").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #146: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_705_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd2e4348c645707dce6760d773de3f3e87346924b2f64bd3dd0297e766b5805ebb02148256b530fbc470c7b341970b38243ecee6d5a840a37beca2efb37e8dff2cc0adbea0882482a7489ca703a399864ba987eeb6ddb738af53a83573473cb30d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #147: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_706_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd348c673b07dce3920d773de3f3e87408869e916dbcf797d8f9684fb67753d1dca34db012ce6eda1e9c7375c5fcf3e54ed698e19615124273b3a621d021c76f8e777458d6f55a364c221e39e1205d5510bb4fbb7ddf08d8d8fdde13d1d6df7f14").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #148: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_707_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd6918ce760fb9c7241aee7bc7e7d0e8110d3d22db79ef2fb1f2d09f6ceea7a3b8b97af3fe78be15f2912b6271dd8a43badb6dd2a1b315b2ce7ae37b4e7778041d930d71ee1992d2466495c42102d08e81154c305307d1dcd52d0fa4c479b278e7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #149: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_708_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd73b3c694391d8eadde3f3e874089464715ac20e4c126bbf6d864d648969f5b5a81e7198a3c3f23901cedc7a1d6eff6e9bf81108e6c35cd8559139af3135dbcbb9ef1568530291a8061b90c9f4285eefcba990d4570a4e3b7b737525b5d580034").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #150: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_709_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdbb07ac7a86948c2c2989a16db1930ef1b89ce112595197656877e53c41457f28ab4d792ca121d1dba39cb9de645149c2ab573e8becc6ddff3cc9960f188ddf737f90ba23664153e93262ff73355415195858d7be1315a69456386de68285a3c8").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #151: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_710_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd27e4d82cb6c061dd9337c69bf9332ed3d198662d6f2299443f62c861187db648518412b69af43aae084476a68d59bbde51fbfa9e5be80563f587c9c2652f88ef2d3b90d25baa6bdb7b0c55e5240a3a98fbc24afed8523edec1c70503fc10f233").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #152: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_711_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffde7c5cf3aac2e88923b77850515fff6a12d13b356dfe9ec275c3dd81ae94609a4a08f14a644b9a935dffea4761ebaf592d1f66fe6cd373aa7f5d370af34f8352da54b5bc4025cf335900a914c2934ec2fec7a396d0a7affcad732a5741c7aaaf5").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #153: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_712_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc77838df91c1e953e016e10bddffea2317f9fee32bacfe553cede9e57a748f68ccf2296a6a89b62b90739d38af4ae3a20e9f45715b90044639241061e33f8f8caace0046491eeaa1c6e9a472b96d88f4af83e7ff1bb84438c7e058034412ae08").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #154: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_713_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8ef071c02383d2a6c02dc217bbffd446730d0318b0425e2586220907f885f97f94b0fc1525bcabf82b1f34895e5819a06c02b23e04002276e165f962c86e3927be7c2ab4d0b25303204fb32a1f8292902792225e16a6d2dbfb29fbc89a9c3376").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #155: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_714_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd5668aaa0b545bbf9a044a32399ffbe69ce20074e34d7bdf5cf56282a769763965351f37e1de0c88c508527d89882d183ccdcf2efca407edb0627cadfd16de6ec44b4b57cdf960d32ebcc4c97847eed218425853b5b675eb781b766a1a1300349").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #156: edge case for u1
#[tokio::test]
async fn p256verify_wycheproof_715_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdd12d6e56882f6c0027cae91a27127728f7fddf478fb4fdc2b65f40a60b0eb952748bbafc320e6735cb64019710a269c6c2b5d147bdc831325cb2fb276ac971a69d655e9a755bc9d800ad21ee3fd4d980d93a7a49a8c5ccd37005177578f51163").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #157: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_716_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd7fffffffaaaaaaaaffffffffffffffffe9a2538f37b28a2c513dee40fecbb71a14b3bbd75c5e1c0c36535a934d4ab85112410b3b90fa97a31c33038964fd85cc112f7d837f8f9c36b460d636c965a5f818f2b50c5d00fb3f9705561dd6631883").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #158: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_717_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdb62f26b5f2a2b26f6de86d42ad8a13da3ab3cccd0459b201de009e526adf21f2d823533c04cd8edc6d6f950a8e08ade04a9bafa2f14a590356935671ae9305bf43178d1f88b6a57a96924c265f0ddb75b58312907b195acb59d7797303123775").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #159: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_718_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdbb1d9ac949dd748cd02bbbe749bd351cd57b38bb61403d700686aa7b4c90851edb2b3408b3167d91030624c6328e8ce3ec108c105575c2f3d209b92e654bab69c34318139c50b0802c6e612f0fd3189d800df7c996d5d7b7c3d6be82836fa258").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #160: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_719_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd66755a00638cdaec1c732513ca0234ece52545dac11f816e818f725b4f60aaf209179ce7c59225392216453b2ac1e9d178c24837dfae26bc1dd7ab60638527425556b42e330289f3b826b2db7a86d19d45c2860a59f2be1ddcc3b691f95a9255").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #161: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_720_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd55a00c9fcdaebb6032513ca0234ecfffe98ebe492fdf02e48ca48e982beb366901959fb8deda56e5467b7e4b214ea4c2d0c2fb29d70ff19b6b1eccebd6568d7ed9dbd77a918297fd970bff01e1343f6925167db5a14d098a211c39cc3a413398").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #162: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_721_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdab40193f9b5d76c064a27940469d9fffd31d7c925fbe05c919491d3057d66cd2567f1fdc387e5350c852b4e8f8ba9d6d947e1c5dd7ccc61a5938245dd6bcab3a9960bebaf919514f9535c22eaaf0b5812857970e26662267b1f3eb1011130a11").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #163: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_722_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdca0234ebb5fdcb13ca0234ecffffffffcb0dadbbc7f549f8a26b4408d0dc86003499f974ff4ca6bbb2f51682fd5f51762f9dd6dd2855262660b36d46d3e4bec2f498fae2487807e220119152f0122476c64d4fa46ddce85c4546630f0d5c5e81").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #164: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_723_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdbfffffff3ea3677e082b9310572620ae19933a9e65b285598711c77298815ad32c5c01662cf00c1929596257db13b26ecf30d0f3ec4b9f0351b0f27094473426e986a086060d086eee822ddd2fc744247a0154b57f7a69c51d9fdafa484e4ac7").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #165: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_724_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd266666663bbbbbbbe6666666666666665b37902e023fab7c8f055d86e5cc41f491d4cba813a04d86dbae94c23be6f52c15774183be7ba5b2d9f3cf010b160501900b8adfea6491019a9ac080d516025a541bf4b952b0ad7be4b1874b02fd544a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #166: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_725_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdbfffffff36db6db7a492492492492492146c573f4c6dfc8d08a443e258970b09ef7fd0a3a36386638330ecad41e1a3b302af36960831d0210c614b948e8aa124ef0d6d800e4047d6d3c1be0fdeaf11fcd8cab5ab59c730eb34116e35a8c7d098").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #167: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_726_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdbfffffff2aaaaaab7fffffffffffffffc815d0e60b3e596ecb1ad3a27cfd49c4a521dab13cc9152d8ca77035a607fea06c55cc3ca5dbeb868cea92eafe93df2a7bfb9b28531996635e6a5ccaa2826a406ce1111bdb9c2e0ca36500418a2f43de").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #168: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_727_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd7fffffff55555555ffffffffffffffffd344a71e6f651458a27bdc81fd976e37474d58a4eec16e0d565f2187fe11d4e8e7a2683a12f38b4fc01d1237a81a10976e55f73bb7cdda46bdb67ef77f6fd2969df2b67920fb5945fde3a517a6ded4cd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #169: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_728_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd3fffffff800000007fffffffffffffffde737d56d38bcf4279dce5617e3192aa692da5cd4309d9a6e5cb525c37da8fa0879f7b57208cdabbf47d223a5b23a62140e0daa78cfdd207a7389aaed61738b17fc5fc3e6a5ed3397d2902e9125e6ab4").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #170: edge case for u2
#[tokio::test]
async fn p256verify_wycheproof_729_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd5d8ecd64a4eeba466815ddf3a4de9a8e6abd9c5db0a01eb80343553da648428f85689b3e0775c7718a90279f14a8082cfcd4d1f1679274f4e9b8805c570a0670167fcc5ca734552e09afa3640f4a034e15b9b7ca661ec7ff70d3f240ebe705b1").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #171: point duplication during verification
#[tokio::test]
async fn p256verify_wycheproof_730_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e256f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569f21d907e3890916dc4fa1f4703c1e50d3f54ddf7383e44023a41de562aa18ed80158137755b901f797a90d4ca8887e023cb2ef63b2ba2c0d455edaef42cf237e2a964fc00d377a8592b8b61aafa7a4aaa7c7b9fd2b41d6e0e17bd1ba5677edcd").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #172: duplication bug
#[tokio::test]
async fn p256verify_wycheproof_731_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e256f2347cab7dd76858fe0555ac3bc99048c4aacafdfb6bcbe05ea6c42c4934569f21d907e3890916dc4fa1f4703c1e50d3f54ddf7383e44023a41de562aa18ed80158137755b901f797a90d4ca8887e023cb2ef63b2ba2c0d455edaef42cf237ed569b03ef2c8857b6d4749e550585b5558384603d4be291f1e842e45a9881232").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #173: point with x-coordinate 0
#[tokio::test]
async fn p256verify_wycheproof_732_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e250000000000000000000000000000000000000000000000000000000000000001555555550000000055555555555555553ef7a8e48d07df81a693439654210c7038a084ffccc4ae2f8204be2abca9fb8ad4ab283b2aa50f13b6bb2347adabc69ca699799b77b1cc6dad271e88b899c12931986e958e1f5cf5653dddf7389365e2").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #175: comparison with point at infinity
#[tokio::test]
async fn p256verify_wycheproof_733_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25555555550000000055555555555555553ef7a8e48d07df81a693439654210c703333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aa9664ce273320d918d8bdb2e61201b4549b36b7cdc54e33b84adb6f2c10aac831e49e68831f18bda2973ac3d76bfbc8c5ee1cceed2dd862e2dc7c915c736cef1f4").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #176: extreme value for k and edgecase s
#[tokio::test]
async fn p256verify_wycheproof_734_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978555555550000000055555555555555553ef7a8e48d07df81a693439654210c70961691a5e960d07a301dbbad4d86247ec27d7089faeb3ddd1add395efff1e0fe7254622cc371866cdf990d2c5377790e37d1f1519817f09a231bd260a9e78aeb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #177: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_735_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc5d283e13ce8ca60da868e3b0fb33e6b4f1074793274e2928250e71e2aca63e9c214dc74fa25371fb4d9e506d418ed9a1bfd6d0c8bb6591d3e0f44505a84886ce").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #178: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_736_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc47669978cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa70fc351da038ae0803bd1d86514ae0462f9f8216551d9315aa9d297f792eef6a341c74eed786f2d33da35360ca7aa925e753f00d6077a1e9e5fc339d634019c73").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #179: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_737_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc476699783333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaaa1e34c8f16d138673fee55c080547c2bfd4de7550065f638322bba9430ce4b60662be9bb512663aa4d7df8ab3f3b4181c5d44a7bdf42436620b7d8a6b81ac936").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #180: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_738_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc4766997849249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c1857e1a8a8338d7fd8cf41d322a302d2078a87a23c7186150ed7cda6e52817c1bdfd0a9135a89d21ce821e29014b2898349254d748272b2d4eb8d59ee34c615377f").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #181: extreme value for k
#[tokio::test]
async fn p256verify_wycheproof_739_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e257cf27b188d034f7e8a52380304b51ac3c08969e277f21b35a60b48fc4766997816a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bb5c19fe227a61abc65c61ee7a018cc9571b2c6f663ea33583f76a686f64be078b7b4a0d734940f613d52bc48673b457c2cf78492490a5cc5606c0541d17b24ddb").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #182: extreme value for k and edgecase s
#[tokio::test]
async fn p256verify_wycheproof_740_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e256b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296555555550000000055555555555555553ef7a8e48d07df81a693439654210c70db02d1f3421d600e9d9ef9e47419dba3208eed08c2d4189a5db63abeb2739666e0ed26967b9ada9ed7ffe480827f90a0d210d5fd8ec628e31715e6b24125512a").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #183: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_741_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e256b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296b6db6db6249249254924924924924924625bd7a09bec4ca81bcdd9f8fd6b63cc6222d1962655501893c29e441395b6c05711bd3ed5a0ef72cfab338b88229c4baaae079cb44a1af070362aaa520ee24cac2626423b0bf81af1c54311d8e2fd23").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #184: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_742_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e256b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296cccccccc00000000cccccccccccccccc971f2ef152794b9d8fc7d568c9e8eaa74ccfa24c67f3def7fa81bc99c70bb0419c0952ba599f4c03361da184b04cdca5db76b797f7f41d9c729a2219478a7e629728df870800be8cf6ca7a0a82153bfa").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #185: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_743_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e256b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2963333333300000000333333333333333325c7cbbc549e52e763f1f55a327a3aaaea1c72c91034036bac71402b6e9ecc4af3dbde7a99dc574061e99fefff9d84dab7dd057e75b78ac6f56e34eb048f0a9d29d5d055408c90d02bc2ea918c18cb63").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #186: extreme value for k and s^-1
#[tokio::test]
async fn p256verify_wycheproof_744_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e256b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29649249248db6db6dbb6db6db6db6db6db5a8b230d0b2b51dcd7ebf0c9fef7c185c2879a66d86cb20b820b7795da2da62b38924f7817d1cd350d936988e90e79bc5431a7268ff6931c7a759de024eff90bcb0177216db6fd1f3aaaa11fa3b6a083").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #187: extreme value for k
#[tokio::test]
async fn p256verify_wycheproof_745_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e256b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c29616a4502e2781e11ac82cbc9d1edd8c981584d13e18411e2f6e0478c34416e3bbab1c0f273f74abc2b848c75006f2ef3c54c26df27711b06558f455079aee0ba3df510f2ecef6d9a05997c776f14ad6456c179f0a13af1771e4d6c37fa48b47f2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #188: testing point duplication
#[tokio::test]
async fn p256verify_wycheproof_746_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c26b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2964fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #189: testing point duplication
#[tokio::test]
async fn p256verify_wycheproof_747_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25acd155416a8b77f34089464733ff7cd39c400e9c69af7beb9eac5054ed2ec72c249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c26b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2964fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #190: testing point duplication
#[tokio::test]
async fn p256verify_wycheproof_748_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c26b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296b01cbd1c01e58065711814b583f061e9d431cca994cea1313449bf97c840ae0a").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #191: testing point duplication
#[tokio::test]
async fn p256verify_wycheproof_749_should_fail() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e25acd155416a8b77f34089464733ff7cd39c400e9c69af7beb9eac5054ed2ec72c249249246db6db6ddb6db6db6db6db6dad4591868595a8ee6bf5f864ff7be0c26b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296b01cbd1c01e58065711814b583f061e9d431cca994cea1313449bf97c840ae0a").unwrap()))).await;
    if let Err(e) = era_response {
        assert_eq!(
            e.to_string(),
            "(code: 3, message: execution reverted, data: Some(String(\"0x\")))"
        );
    } else if let Ok(response) = era_response {
        let (era_output, _) = parse_call_result(&response);
        assert_eq!(era_output, Bytes::from(RESPONSE_INVALID));
    }
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #269: pseudorandom signature
#[tokio::test]
async fn p256verify_wycheproof_750_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("bb5a52f42f9c9261ed4361f59422a1e30036e7c32b270c8807a419feca605023a8ea150cb80125d7381c4c1f1da8e9de2711f9917060406a73d7904519e51388f3ab9fa68bd47973a73b2d40480c2ba50c22c9d76ec217257288293285449b8604aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad587d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #270: pseudorandom signature
#[tokio::test]
async fn p256verify_wycheproof_751_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("532eaabd9574880dbf76b9b8cc00832c20a6ec113d682299550d7a6e0f345e2530e782f964b2e2ff065a051bc7adc20615d8c43a1365713c88268822c253bcce5b16df652aa1ecb2dc8b46c515f9604e2e84cacfa7c6eec30428d2d3f4e08ed504aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad587d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #271: pseudorandom signature
#[tokio::test]
async fn p256verify_wycheproof_752_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855b292a619339f6e567a305c951c0dcbcc42d16e47f219f9e98e76e09d8770b34a0177e60492c5a8242f76f07bfe3661bde59ec2a17ce5bd2dab2abebdf89a62e204aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad587d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #272: pseudorandom signature
#[tokio::test]
async fn p256verify_wycheproof_753_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("de47c9b27eb8d300dbb5f2c353e632c393262cf06340c4fa7f1b40c4cbd36f90986e65933ef2ed4ee5aada139f52b70539aaf63f00a91f29c69178490d57fb713dafedfb8da6189d372308cbf1489bbbdabf0c0217d1c0ff0f701aaa7a694b9c04aaec73635726f213fb8a9e64da3b8632e41495a944d0045b522eba7240fad587d9315798aaa3a5ba01775787ced05eaaf7b4e09fc81d6d1aa546e8365d525d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #288: x-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_754_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91d434e262a49eab7781e353a3565e482550dd0fd5defa013c7f29745eff3569f19b0c0a93f267fb6052fd8077be769c2b98953195d7bc10de844218305c6ba17a4f337ccfd67726a805e4f1600ae2849df3807eca117380239fbd816900000000ed9dea124cc8c396416411e988c30f427eb504af43a3146cd5df7ea60666d685").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #289: x-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_755_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f910fe774355c04d060f76d79fd7a772e421463489221bf0a33add0be9b1979110b500dcba1c69a8fbd43fa4f57f743ce124ca8b91a1f325f3fac6181175df557374f337ccfd67726a805e4f1600ae2849df3807eca117380239fbd816900000000ed9dea124cc8c396416411e988c30f427eb504af43a3146cd5df7ea60666d685").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #290: x-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_756_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91bb40bf217bed3fb3950c7d39f03d36dc8e3b2cd79693f125bfd06595ee1135e3541bf3532351ebb032710bdb6a1bf1bfc89a1e291ac692b3fa4780745bb556774f337ccfd67726a805e4f1600ae2849df3807eca117380239fbd816900000000ed9dea124cc8c396416411e988c30f427eb504af43a3146cd5df7ea60666d685").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #291: y-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_757_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91664eb7ee6db84a34df3c86ea31389a5405badd5ca99231ff556d3e75a233e73a59f3c752e52eca46137642490a51560ce0badc678754b8f72e51a2901426a1bd3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f49726500493584fa174d791c72bf2ce3880a8960dd2a7c7a1338a82f85a9e59cdbde80000000").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #292: y-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_758_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f914cd0429bbabd2827009d6fcd843d4ce39c3e42e2d1631fd001985a79d1fd8b439638bf12dd682f60be7ef1d0e0d98f08b7bca77a1a2b869ae466189d2acdabe33cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f49726500493584fa174d791c72bf2ce3880a8960dd2a7c7a1338a82f85a9e59cdbde80000000").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #293: y-coordinate of the public key has many trailing 0's
#[tokio::test]
async fn p256verify_wycheproof_759_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91e56c6ea2d1b017091c44d8b6cb62b9f460e3ce9aed5e5fd41e8added97c56c04a308ec31f281e955be20b457e463440b4fcf2b80258078207fc1378180f89b553cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f49726500493584fa174d791c72bf2ce3880a8960dd2a7c7a1338a82f85a9e59cdbde80000000").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #294: y-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_760_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f911158a08d291500b4cabed3346d891eee57c176356a2624fb011f8fbbf3466830228a8c486a736006e082325b85290c5bc91f378b75d487dda46798c18f2855193cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f4972650049357b05e8b186e38d41d31c77f5769f22d58385ecc857d07a561a6324217fffffff").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #295: y-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_761_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91b1db9289649f59410ea36b0c0fc8d6aa2687b29176939dd23e0dde56d309fa9d3e1535e4280559015b0dbd987366dcf43a6d1af5c23c7d584e1c3f48a12513363cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f4972650049357b05e8b186e38d41d31c77f5769f22d58385ecc857d07a561a6324217fffffff").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #296: y-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_762_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91b7b16e762286cb96446aa8d4e6e7578b0a341a79f2dd1a220ac6f0ca4e24ed86ddc60a700a139b04661c547d07bbb0721780146df799ccf55e55234ecb8f12bc3cf03d614d8939cfd499a07873fac281618f06b8ff87e8015c3f4972650049357b05e8b186e38d41d31c77f5769f22d58385ecc857d07a561a6324217fffffff").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #297: x-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_763_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91d82a7c2717261187c8e00d8df963ff35d796edad36bc6e6bd1c91c670d9105b43dcabddaf8fcaa61f4603e7cbac0f3c0351ecd5988efb23f680d07debd1399292829c31faa2e400e344ed94bca3fcd0545956ebcfe8ad0f6dfa5ff8effffffffa01aafaf000e52585855afa7676ade284113099052df57e7eb3bd37ebeb9222e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #298: x-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_764_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f915eb9c8845de68eb13d5befe719f462d77787802baff30ce96a5cba063254af782c026ae9be2e2a5e7ca0ff9bbd92fb6e44972186228ee9a62b87ddbe2ef66fb52829c31faa2e400e344ed94bca3fcd0545956ebcfe8ad0f6dfa5ff8effffffffa01aafaf000e52585855afa7676ade284113099052df57e7eb3bd37ebeb9222e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #299: x-coordinate of the public key has many trailing 1's
#[tokio::test]
async fn p256verify_wycheproof_765_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f9196843dd03c22abd2f3b782b170239f90f277921becc117d0404a8e4e36230c28f2be378f526f74a543f67165976de9ed9a31214eb4d7e6db19e1ede123dd991d2829c31faa2e400e344ed94bca3fcd0545956ebcfe8ad0f6dfa5ff8effffffffa01aafaf000e52585855afa7676ade284113099052df57e7eb3bd37ebeb9222e").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #300: x-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_766_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91766456dce1857c906f9996af729339464d27e9d98edc2d0e3b760297067421f6402385ecadae0d8081dccaf5d19037ec4e55376eced699e93646bfbbf19d0b41fffffff948081e6a0458dd8f9e738f2665ff9059ad6aac0708318c4ca9a7a4f55a8abcba2dda8474311ee54149b973cae0c0fb89557ad0bf78e6529a1663bd73").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #301: x-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_767_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91c605c4b2edeab20419e6518a11b2dbc2b97ed8b07cced0b19c34f777de7b9fd9edf0f612c5f46e03c719647bc8af1b29b2cde2eda700fb1cff5e159d47326dbafffffff948081e6a0458dd8f9e738f2665ff9059ad6aac0708318c4ca9a7a4f55a8abcba2dda8474311ee54149b973cae0c0fb89557ad0bf78e6529a1663bd73").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #302: x-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_768_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91d48b68e6cabfe03cf6141c9ac54141f210e64485d9929ad7b732bfe3b7eb8a84feedae50c61bd00e19dc26f9b7e2265e4508c389109ad2f208f0772315b6c941fffffff948081e6a0458dd8f9e738f2665ff9059ad6aac0708318c4ca9a7a4f55a8abcba2dda8474311ee54149b973cae0c0fb89557ad0bf78e6529a1663bd73").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #303: x-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_769_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91b7c81457d4aeb6aa65957098569f0479710ad7f6595d5874c35a93d12a5dd4c7b7961a0b652878c2d568069a432ca18a1a9199f2ca574dad4b9e3a05c0a1cdb300000003fa15f963949d5f03a6f5c7f86f9e0015eeb23aebbff1173937ba748e1099872070e8e87c555fa13659cca5d7fadcfcb0023ea889548ca48af2ba7e71").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #304: x-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_770_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f916b01332ddb6edfa9a30a1321d5858e1ee3cf97e263e669f8de5e9652e76ff3f75939545fced457309a6a04ace2bd0f70139c8f7d86b02cb1cc58f9e69e96cd5a00000003fa15f963949d5f03a6f5c7f86f9e0015eeb23aebbff1173937ba748e1099872070e8e87c555fa13659cca5d7fadcfcb0023ea889548ca48af2ba7e71").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #305: x-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_771_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91efdb884720eaeadc349f9fc356b6c0344101cd2fd8436b7d0e6a4fb93f106361f24bee6ad5dc05f7613975473aadf3aacba9e77de7d69b6ce48cb60d8113385d00000003fa15f963949d5f03a6f5c7f86f9e0015eeb23aebbff1173937ba748e1099872070e8e87c555fa13659cca5d7fadcfcb0023ea889548ca48af2ba7e71").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #306: y-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_772_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f9131230428405560dcb88fb5a646836aea9b23a23dd973dcbe8014c87b8b20eb070f9344d6e812ce166646747694a41b0aaf97374e19f3c5fb8bd7ae3d9bd0beffbcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015000000001352bb4a0fa2ea4cceb9ab63dd684ade5a1127bcf300a698a7193bc2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #307: y-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_773_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91caa797da65b320ab0d5c470cda0b36b294359c7db9841d679174db34c4855743cf543a62f23e212745391aaf7505f345123d2685ee3b941d3de6d9b36242e5a0bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015000000001352bb4a0fa2ea4cceb9ab63dd684ade5a1127bcf300a698a7193bc2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #308: y-coordinate of the public key is small
#[tokio::test]
async fn p256verify_wycheproof_774_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f917e5f0ab5d900d3d3d7867657e5d6d36519bc54084536e7d21c336ed8001859459450c07f201faec94b82dfb322e5ac676688294aad35aa72e727ff0b19b646aabcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015000000001352bb4a0fa2ea4cceb9ab63dd684ade5a1127bcf300a698a7193bc2").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #309: y-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_775_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91d7d70c581ae9e3f66dc6a480bf037ae23f8a1e4a2136fe4b03aa69f0ca25b35689c460f8a5a5c2bbba962c8a3ee833a413e85658e62a59e2af41d9127cc47224bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015fffffffeecad44b6f05d15b33146549c2297b522a5eed8430cff596758e6c43d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #310: y-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_776_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f91341c1b9ff3c83dd5e0dfa0bf68bcdf4bb7aa20c625975e5eeee34bb396266b3472b69f061b750fd5121b22b11366fad549c634e77765a017902a67099e0a4469bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015fffffffeecad44b6f05d15b33146549c2297b522a5eed8430cff596758e6c43d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}

// wycheproof/ecdsa_webcrypto_test.json EcdsaP1363Verify SHA-256 #311: y-coordinate of the public key is large
#[tokio::test]
async fn p256verify_wycheproof_777_should_pass() {
    let era_response = era_call(P256VERIFTY_PRECOMPILE_ADDRESS, None, Some(Bytes::from(hex::decode("2f77668a9dfbf8d5848b9eeb4a7145ca94c6ed9236e4a773f6dcafa5132b2f9170bebe684cdcb5ca72a42f0d873879359bd1781a591809947628d313a3814f67aec03aca8f5587a4d535fa31027bbe9cc0e464b1c3577f4c2dcde6b2094798a9bcbb2914c79f045eaa6ecbbc612816b3be5d2d6796707d8125e9f851c18af015fffffffeecad44b6f05d15b33146549c2297b522a5eed8430cff596758e6c43d").unwrap()))).await.unwrap();
    let (era_output, _) = parse_call_result(&era_response);
    assert_eq!(era_output, Bytes::from(RESPONSE_VALID));
}
